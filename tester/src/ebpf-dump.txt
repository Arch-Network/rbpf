-rwxr-xr-x  1 deepanshuhooda  staff  187600 May 23 2226 /Users/deepanshuhooda/work/rbpf-strings/target/sbf-solana-solana/release/ebpf.so
ELF Header
  Magic   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class                             ELF64
  Data                              2's complement, little endian
  Version                           1 (current)
  OS/ABI                            UNIX - System V
  ABI Version                       0
  Type                              DYN (Shared object file)
  Machine                           EM_BPF
  Version                           0x1
  Entry point address               0x59C8
  Start of program headers          64 (bytes into file)
  Start of section headers          186832 (bytes into file)
  Flags                             0x0
  Size of this header               64 (bytes)
  Size of program headers           56 (bytes)
  Number of program headers         4
  Size of section headers           64 (bytes)
  Number of section headers         12
  Section header string table index 10
There are 12 section headers, starting at offset 0x2d9d0

Section Headers
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        0000000000000120 000120 0188b8 00  AX  0   0  8
  [ 2] .rodata           PROGBITS        00000000000189d8 0189d8 0013a7 00  AM  0   0  8
  [ 3] .data.rel.ro      PROGBITS        0000000000019d80 019d80 0008e8 00  WA  0   0  8
  [ 4] .dynamic          DYNAMIC         000000000001a668 01a668 0000b0 10  WA  6   0  8
  [ 5] .dynsym           DYNSYM          000000000001a718 01a718 0000d8 18   A  6   1  8
  [ 6] .dynstr           STRTAB          000000000001a7f0 01a7f0 000059 00   A  0   0  1
  [ 7] .rel.dyn          REL             000000000001a850 01a850 001fb0 10   A  5   0  8
  [ 8] .comment          PROGBITS        0000000000000000 01c800 000013 01  MS  0   0  1
  [ 9] .symtab           SYMTAB          0000000000000000 01c818 009588 18     11 1587  8
  [10] .shstrtab         STRTAB          0000000000000000 025da0 000061 00      0   0  1
  [11] .strtab           STRTAB          0000000000000000 025e01 007bcd 00      0   0  1
Key to Flags
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  R (retain), p (processor specific)

Elf file type is DYN (Shared object file)
Entry point 0x59c8
There are 4 program headers, starting at offset 64

Program Headers
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  LOAD           0x000120 0x0000000000000120 0x0000000000000120 0x0188b8 0x0188b8 R E 0x1000
  LOAD           0x0189d8 0x00000000000189d8 0x00000000000189d8 0x001c90 0x001c90 RW  0x1000
  LOAD           0x01a718 0x000000000001a718 0x000000000001a718 0x0020e8 0x0020e8 R   0x1000
  DYNAMIC        0x01a668 0x000000000001a668 0x000000000001a668 0x0000b0 0x0000b0 RW  0x8

 Section to Segment mapping
  Segment Sections...
   00     .text
   01     .rodata .data.rel.ro
   02     .dynsym .dynstr .rel.dyn
   03     .dynamic
   None   .comment .symtab .shstrtab .strtab
Dynamic section at offset 0x1a668 contains 11 entries
  Tag                Type       Name/Value
  0x000000000000001e (FLAGS)    TEXTREL
  0x0000000000000011 (REL)      0x1a850
  0x0000000000000012 (RELSZ)    8112 (bytes)
  0x0000000000000013 (RELENT)   16 (bytes)
  0x000000006ffffffa (RELCOUNT) 388
  0x0000000000000006 (SYMTAB)   0x1a718
  0x000000000000000b (SYMENT)   24 (bytes)
  0x0000000000000005 (STRTAB)   0x1a7f0
  0x000000000000000a (STRSZ)    89 (bytes)
  0x0000000000000016 (TEXTREL)  0x0
  0x0000000000000000 (NULL)     0x0

Relocation section '.rel.dyn' at offset 0x1a850 contains 507 entries
    Offset             Info             Type               Symbol's Value  Symbol's Name
0000000000000a88  0000000000000008 R_BPF_64_RELATIVE
0000000000000aa0  0000000000000008 R_BPF_64_RELATIVE
0000000000001c78  0000000000000008 R_BPF_64_RELATIVE
0000000000001c90  0000000000000008 R_BPF_64_RELATIVE
0000000000001ce0  0000000000000008 R_BPF_64_RELATIVE
0000000000001cf8  0000000000000008 R_BPF_64_RELATIVE
00000000000020a0  0000000000000008 R_BPF_64_RELATIVE
0000000000002668  0000000000000008 R_BPF_64_RELATIVE
0000000000002698  0000000000000008 R_BPF_64_RELATIVE
00000000000026c0  0000000000000008 R_BPF_64_RELATIVE
0000000000002720  0000000000000008 R_BPF_64_RELATIVE
0000000000002750  0000000000000008 R_BPF_64_RELATIVE
0000000000002778  0000000000000008 R_BPF_64_RELATIVE
0000000000002e18  0000000000000008 R_BPF_64_RELATIVE
0000000000002e48  0000000000000008 R_BPF_64_RELATIVE
0000000000002e68  0000000000000008 R_BPF_64_RELATIVE
0000000000002e80  0000000000000008 R_BPF_64_RELATIVE
0000000000002ea0  0000000000000008 R_BPF_64_RELATIVE
0000000000002eb8  0000000000000008 R_BPF_64_RELATIVE
0000000000002ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000002f08  0000000000000008 R_BPF_64_RELATIVE
0000000000006140  0000000000000008 R_BPF_64_RELATIVE
0000000000007308  0000000000000008 R_BPF_64_RELATIVE
0000000000007348  0000000000000008 R_BPF_64_RELATIVE
00000000000073f0  0000000000000008 R_BPF_64_RELATIVE
0000000000007408  0000000000000008 R_BPF_64_RELATIVE
0000000000007440  0000000000000008 R_BPF_64_RELATIVE
0000000000007458  0000000000000008 R_BPF_64_RELATIVE
0000000000007468  0000000000000008 R_BPF_64_RELATIVE
0000000000007788  0000000000000008 R_BPF_64_RELATIVE
00000000000077b8  0000000000000008 R_BPF_64_RELATIVE
0000000000007840  0000000000000008 R_BPF_64_RELATIVE
0000000000008388  0000000000000008 R_BPF_64_RELATIVE
0000000000008fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000009018  0000000000000008 R_BPF_64_RELATIVE
0000000000009430  0000000000000008 R_BPF_64_RELATIVE
0000000000009898  0000000000000008 R_BPF_64_RELATIVE
00000000000098e8  0000000000000008 R_BPF_64_RELATIVE
0000000000009900  0000000000000008 R_BPF_64_RELATIVE
0000000000009910  0000000000000008 R_BPF_64_RELATIVE
00000000000099e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a178  0000000000000008 R_BPF_64_RELATIVE
000000000000a290  0000000000000008 R_BPF_64_RELATIVE
000000000000a670  0000000000000008 R_BPF_64_RELATIVE
000000000000a870  0000000000000008 R_BPF_64_RELATIVE
000000000000a928  0000000000000008 R_BPF_64_RELATIVE
000000000000ce60  0000000000000008 R_BPF_64_RELATIVE
000000000000cea8  0000000000000008 R_BPF_64_RELATIVE
000000000000ced8  0000000000000008 R_BPF_64_RELATIVE
000000000000d490  0000000000000008 R_BPF_64_RELATIVE
000000000000d938  0000000000000008 R_BPF_64_RELATIVE
000000000000d980  0000000000000008 R_BPF_64_RELATIVE
000000000000d998  0000000000000008 R_BPF_64_RELATIVE
000000000000de08  0000000000000008 R_BPF_64_RELATIVE
000000000000de50  0000000000000008 R_BPF_64_RELATIVE
000000000000de78  0000000000000008 R_BPF_64_RELATIVE
000000000000e3d8  0000000000000008 R_BPF_64_RELATIVE
000000000000e3f0  0000000000000008 R_BPF_64_RELATIVE
000000000000e410  0000000000000008 R_BPF_64_RELATIVE
000000000000e428  0000000000000008 R_BPF_64_RELATIVE
000000000000e558  0000000000000008 R_BPF_64_RELATIVE
000000000000e570  0000000000000008 R_BPF_64_RELATIVE
000000000000e580  0000000000000008 R_BPF_64_RELATIVE
000000000000e5a0  0000000000000008 R_BPF_64_RELATIVE
000000000000e9d0  0000000000000008 R_BPF_64_RELATIVE
000000000000f268  0000000000000008 R_BPF_64_RELATIVE
000000000000fa80  0000000000000008 R_BPF_64_RELATIVE
000000000000faa8  0000000000000008 R_BPF_64_RELATIVE
000000000000fac0  0000000000000008 R_BPF_64_RELATIVE
000000000000fb08  0000000000000008 R_BPF_64_RELATIVE
000000000000fb20  0000000000000008 R_BPF_64_RELATIVE
000000000000fb90  0000000000000008 R_BPF_64_RELATIVE
000000000000fbc8  0000000000000008 R_BPF_64_RELATIVE
000000000000fc18  0000000000000008 R_BPF_64_RELATIVE
000000000000fc50  0000000000000008 R_BPF_64_RELATIVE
000000000000fc68  0000000000000008 R_BPF_64_RELATIVE
000000000000fc88  0000000000000008 R_BPF_64_RELATIVE
000000000000fca8  0000000000000008 R_BPF_64_RELATIVE
000000000000fd18  0000000000000008 R_BPF_64_RELATIVE
000000000000fd50  0000000000000008 R_BPF_64_RELATIVE
000000000000fd68  0000000000000008 R_BPF_64_RELATIVE
000000000000fda8  0000000000000008 R_BPF_64_RELATIVE
000000000000fdc0  0000000000000008 R_BPF_64_RELATIVE
000000000000fe98  0000000000000008 R_BPF_64_RELATIVE
000000000000feb0  0000000000000008 R_BPF_64_RELATIVE
000000000000ff70  0000000000000008 R_BPF_64_RELATIVE
000000000000ff88  0000000000000008 R_BPF_64_RELATIVE
000000000000ffc8  0000000000000008 R_BPF_64_RELATIVE
0000000000010000  0000000000000008 R_BPF_64_RELATIVE
0000000000010030  0000000000000008 R_BPF_64_RELATIVE
0000000000010068  0000000000000008 R_BPF_64_RELATIVE
0000000000010098  0000000000000008 R_BPF_64_RELATIVE
00000000000100c8  0000000000000008 R_BPF_64_RELATIVE
00000000000100f8  0000000000000008 R_BPF_64_RELATIVE
0000000000010128  0000000000000008 R_BPF_64_RELATIVE
0000000000010158  0000000000000008 R_BPF_64_RELATIVE
0000000000010188  0000000000000008 R_BPF_64_RELATIVE
00000000000101b8  0000000000000008 R_BPF_64_RELATIVE
00000000000101e8  0000000000000008 R_BPF_64_RELATIVE
0000000000010218  0000000000000008 R_BPF_64_RELATIVE
0000000000010248  0000000000000008 R_BPF_64_RELATIVE
0000000000010278  0000000000000008 R_BPF_64_RELATIVE
0000000000010298  0000000000000008 R_BPF_64_RELATIVE
00000000000102b8  0000000000000008 R_BPF_64_RELATIVE
00000000000102d0  0000000000000008 R_BPF_64_RELATIVE
00000000000102f0  0000000000000008 R_BPF_64_RELATIVE
0000000000010310  0000000000000008 R_BPF_64_RELATIVE
0000000000010330  0000000000000008 R_BPF_64_RELATIVE
0000000000010350  0000000000000008 R_BPF_64_RELATIVE
0000000000010370  0000000000000008 R_BPF_64_RELATIVE
0000000000010390  0000000000000008 R_BPF_64_RELATIVE
00000000000103b0  0000000000000008 R_BPF_64_RELATIVE
00000000000103d0  0000000000000008 R_BPF_64_RELATIVE
00000000000103e8  0000000000000008 R_BPF_64_RELATIVE
0000000000010408  0000000000000008 R_BPF_64_RELATIVE
0000000000010428  0000000000000008 R_BPF_64_RELATIVE
0000000000010448  0000000000000008 R_BPF_64_RELATIVE
0000000000010468  0000000000000008 R_BPF_64_RELATIVE
0000000000010488  0000000000000008 R_BPF_64_RELATIVE
00000000000104a8  0000000000000008 R_BPF_64_RELATIVE
00000000000104c8  0000000000000008 R_BPF_64_RELATIVE
00000000000104e8  0000000000000008 R_BPF_64_RELATIVE
0000000000010508  0000000000000008 R_BPF_64_RELATIVE
0000000000010528  0000000000000008 R_BPF_64_RELATIVE
0000000000010548  0000000000000008 R_BPF_64_RELATIVE
0000000000010568  0000000000000008 R_BPF_64_RELATIVE
00000000000105e0  0000000000000008 R_BPF_64_RELATIVE
0000000000010650  0000000000000008 R_BPF_64_RELATIVE
0000000000010680  0000000000000008 R_BPF_64_RELATIVE
00000000000106a8  0000000000000008 R_BPF_64_RELATIVE
0000000000010780  0000000000000008 R_BPF_64_RELATIVE
0000000000010cc0  0000000000000008 R_BPF_64_RELATIVE
0000000000010cf0  0000000000000008 R_BPF_64_RELATIVE
0000000000010d18  0000000000000008 R_BPF_64_RELATIVE
0000000000010ff8  0000000000000008 R_BPF_64_RELATIVE
0000000000011068  0000000000000008 R_BPF_64_RELATIVE
0000000000011080  0000000000000008 R_BPF_64_RELATIVE
0000000000011090  0000000000000008 R_BPF_64_RELATIVE
00000000000114b0  0000000000000008 R_BPF_64_RELATIVE
00000000000114c8  0000000000000008 R_BPF_64_RELATIVE
00000000000115a8  0000000000000008 R_BPF_64_RELATIVE
0000000000011968  0000000000000008 R_BPF_64_RELATIVE
0000000000011978  0000000000000008 R_BPF_64_RELATIVE
0000000000011990  0000000000000008 R_BPF_64_RELATIVE
00000000000119a8  0000000000000008 R_BPF_64_RELATIVE
00000000000119c0  0000000000000008 R_BPF_64_RELATIVE
00000000000119d8  0000000000000008 R_BPF_64_RELATIVE
0000000000011ca8  0000000000000008 R_BPF_64_RELATIVE
0000000000011cb8  0000000000000008 R_BPF_64_RELATIVE
0000000000011cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000011ce8  0000000000000008 R_BPF_64_RELATIVE
0000000000011d00  0000000000000008 R_BPF_64_RELATIVE
0000000000011d18  0000000000000008 R_BPF_64_RELATIVE
0000000000011ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000011f78  0000000000000008 R_BPF_64_RELATIVE
0000000000011fc0  0000000000000008 R_BPF_64_RELATIVE
0000000000012020  0000000000000008 R_BPF_64_RELATIVE
0000000000012038  0000000000000008 R_BPF_64_RELATIVE
00000000000120c8  0000000000000008 R_BPF_64_RELATIVE
0000000000012138  0000000000000008 R_BPF_64_RELATIVE
0000000000012198  0000000000000008 R_BPF_64_RELATIVE
0000000000012228  0000000000000008 R_BPF_64_RELATIVE
0000000000012270  0000000000000008 R_BPF_64_RELATIVE
00000000000122a0  0000000000000008 R_BPF_64_RELATIVE
0000000000012768  0000000000000008 R_BPF_64_RELATIVE
0000000000012898  0000000000000008 R_BPF_64_RELATIVE
00000000000128b0  0000000000000008 R_BPF_64_RELATIVE
0000000000012960  0000000000000008 R_BPF_64_RELATIVE
00000000000129f8  0000000000000008 R_BPF_64_RELATIVE
0000000000012ab8  0000000000000008 R_BPF_64_RELATIVE
0000000000012b38  0000000000000008 R_BPF_64_RELATIVE
0000000000012bb0  0000000000000008 R_BPF_64_RELATIVE
0000000000012c88  0000000000000008 R_BPF_64_RELATIVE
0000000000012cc0  0000000000000008 R_BPF_64_RELATIVE
0000000000012d90  0000000000000008 R_BPF_64_RELATIVE
0000000000012da8  0000000000000008 R_BPF_64_RELATIVE
0000000000012e80  0000000000000008 R_BPF_64_RELATIVE
0000000000012f50  0000000000000008 R_BPF_64_RELATIVE
0000000000012ff0  0000000000000008 R_BPF_64_RELATIVE
00000000000130f8  0000000000000008 R_BPF_64_RELATIVE
0000000000013148  0000000000000008 R_BPF_64_RELATIVE
00000000000133c0  0000000000000008 R_BPF_64_RELATIVE
0000000000013650  0000000000000008 R_BPF_64_RELATIVE
0000000000013920  0000000000000008 R_BPF_64_RELATIVE
00000000000139c0  0000000000000008 R_BPF_64_RELATIVE
00000000000149b0  0000000000000008 R_BPF_64_RELATIVE
00000000000149e8  0000000000000008 R_BPF_64_RELATIVE
0000000000014f50  0000000000000008 R_BPF_64_RELATIVE
0000000000014fc0  0000000000000008 R_BPF_64_RELATIVE
0000000000015218  0000000000000008 R_BPF_64_RELATIVE
00000000000153c8  0000000000000008 R_BPF_64_RELATIVE
00000000000154e0  0000000000000008 R_BPF_64_RELATIVE
0000000000015540  0000000000000008 R_BPF_64_RELATIVE
00000000000155c0  0000000000000008 R_BPF_64_RELATIVE
0000000000015620  0000000000000008 R_BPF_64_RELATIVE
00000000000156a0  0000000000000008 R_BPF_64_RELATIVE
0000000000015700  0000000000000008 R_BPF_64_RELATIVE
0000000000015988  0000000000000008 R_BPF_64_RELATIVE
0000000000015dd8  0000000000000008 R_BPF_64_RELATIVE
0000000000015e00  0000000000000008 R_BPF_64_RELATIVE
0000000000015e28  0000000000000008 R_BPF_64_RELATIVE
0000000000015e50  0000000000000008 R_BPF_64_RELATIVE
0000000000015e78  0000000000000008 R_BPF_64_RELATIVE
0000000000015ea0  0000000000000008 R_BPF_64_RELATIVE
00000000000164c8  0000000000000008 R_BPF_64_RELATIVE
00000000000164e8  0000000000000008 R_BPF_64_RELATIVE
0000000000016568  0000000000000008 R_BPF_64_RELATIVE
0000000000016580  0000000000000008 R_BPF_64_RELATIVE
00000000000165f0  0000000000000008 R_BPF_64_RELATIVE
0000000000016778  0000000000000008 R_BPF_64_RELATIVE
00000000000167c8  0000000000000008 R_BPF_64_RELATIVE
0000000000016828  0000000000000008 R_BPF_64_RELATIVE
0000000000016860  0000000000000008 R_BPF_64_RELATIVE
00000000000168b0  0000000000000008 R_BPF_64_RELATIVE
00000000000168f8  0000000000000008 R_BPF_64_RELATIVE
0000000000016958  0000000000000008 R_BPF_64_RELATIVE
00000000000169a8  0000000000000008 R_BPF_64_RELATIVE
0000000000016ac0  0000000000000008 R_BPF_64_RELATIVE
0000000000016cb0  0000000000000008 R_BPF_64_RELATIVE
0000000000016dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000016e20  0000000000000008 R_BPF_64_RELATIVE
0000000000016e58  0000000000000008 R_BPF_64_RELATIVE
0000000000016e88  0000000000000008 R_BPF_64_RELATIVE
0000000000016eb8  0000000000000008 R_BPF_64_RELATIVE
0000000000017178  0000000000000008 R_BPF_64_RELATIVE
0000000000017190  0000000000000008 R_BPF_64_RELATIVE
00000000000171c0  0000000000000008 R_BPF_64_RELATIVE
00000000000171f0  0000000000000008 R_BPF_64_RELATIVE
0000000000017298  0000000000000008 R_BPF_64_RELATIVE
00000000000172d8  0000000000000008 R_BPF_64_RELATIVE
00000000000172f0  0000000000000008 R_BPF_64_RELATIVE
0000000000017308  0000000000000008 R_BPF_64_RELATIVE
0000000000017348  0000000000000008 R_BPF_64_RELATIVE
0000000000017360  0000000000000008 R_BPF_64_RELATIVE
0000000000017688  0000000000000008 R_BPF_64_RELATIVE
0000000000017700  0000000000000008 R_BPF_64_RELATIVE
0000000000017808  0000000000000008 R_BPF_64_RELATIVE
0000000000017880  0000000000000008 R_BPF_64_RELATIVE
0000000000017aa8  0000000000000008 R_BPF_64_RELATIVE
0000000000017b20  0000000000000008 R_BPF_64_RELATIVE
0000000000017be8  0000000000000008 R_BPF_64_RELATIVE
0000000000017c20  0000000000000008 R_BPF_64_RELATIVE
0000000000017cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000017d58  0000000000000008 R_BPF_64_RELATIVE
0000000000017de8  0000000000000008 R_BPF_64_RELATIVE
0000000000017f08  0000000000000008 R_BPF_64_RELATIVE
0000000000018040  0000000000000008 R_BPF_64_RELATIVE
00000000000180d8  0000000000000008 R_BPF_64_RELATIVE
00000000000180e8  0000000000000008 R_BPF_64_RELATIVE
00000000000181a8  0000000000000008 R_BPF_64_RELATIVE
0000000000018270  0000000000000008 R_BPF_64_RELATIVE
00000000000182a0  0000000000000008 R_BPF_64_RELATIVE
0000000000019d80  0000000000000008 R_BPF_64_RELATIVE
0000000000019d90  0000000000000008 R_BPF_64_RELATIVE
0000000000019da8  0000000000000008 R_BPF_64_RELATIVE
0000000000019dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000019dd8  0000000000000008 R_BPF_64_RELATIVE
0000000000019df0  0000000000000008 R_BPF_64_RELATIVE
0000000000019e08  0000000000000008 R_BPF_64_RELATIVE
0000000000019e20  0000000000000008 R_BPF_64_RELATIVE
0000000000019e38  0000000000000008 R_BPF_64_RELATIVE
0000000000019e50  0000000000000008 R_BPF_64_RELATIVE
0000000000019e68  0000000000000008 R_BPF_64_RELATIVE
0000000000019e80  0000000000000008 R_BPF_64_RELATIVE
0000000000019e98  0000000000000008 R_BPF_64_RELATIVE
0000000000019ea0  0000000000000008 R_BPF_64_RELATIVE
0000000000019eb0  0000000000000008 R_BPF_64_RELATIVE
0000000000019ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000019ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000019ee0  0000000000000008 R_BPF_64_RELATIVE
0000000000019ef8  0000000000000008 R_BPF_64_RELATIVE
0000000000019f08  0000000000000008 R_BPF_64_RELATIVE
0000000000019f20  0000000000000008 R_BPF_64_RELATIVE
0000000000019f28  0000000000000008 R_BPF_64_RELATIVE
0000000000019f40  0000000000000008 R_BPF_64_RELATIVE
0000000000019f48  0000000000000008 R_BPF_64_RELATIVE
0000000000019f50  0000000000000008 R_BPF_64_RELATIVE
0000000000019f58  0000000000000008 R_BPF_64_RELATIVE
0000000000019f60  0000000000000008 R_BPF_64_RELATIVE
0000000000019f68  0000000000000008 R_BPF_64_RELATIVE
0000000000019f70  0000000000000008 R_BPF_64_RELATIVE
0000000000019f78  0000000000000008 R_BPF_64_RELATIVE
0000000000019f80  0000000000000008 R_BPF_64_RELATIVE
0000000000019f98  0000000000000008 R_BPF_64_RELATIVE
0000000000019fb0  0000000000000008 R_BPF_64_RELATIVE
0000000000019fc8  0000000000000008 R_BPF_64_RELATIVE
0000000000019fd0  0000000000000008 R_BPF_64_RELATIVE
0000000000019fd8  0000000000000008 R_BPF_64_RELATIVE
0000000000019fe0  0000000000000008 R_BPF_64_RELATIVE
0000000000019ff8  0000000000000008 R_BPF_64_RELATIVE
000000000001a000  0000000000000008 R_BPF_64_RELATIVE
000000000001a018  0000000000000008 R_BPF_64_RELATIVE
000000000001a030  0000000000000008 R_BPF_64_RELATIVE
000000000001a038  0000000000000008 R_BPF_64_RELATIVE
000000000001a040  0000000000000008 R_BPF_64_RELATIVE
000000000001a048  0000000000000008 R_BPF_64_RELATIVE
000000000001a060  0000000000000008 R_BPF_64_RELATIVE
000000000001a070  0000000000000008 R_BPF_64_RELATIVE
000000000001a080  0000000000000008 R_BPF_64_RELATIVE
000000000001a098  0000000000000008 R_BPF_64_RELATIVE
000000000001a0a0  0000000000000008 R_BPF_64_RELATIVE
000000000001a0b8  0000000000000008 R_BPF_64_RELATIVE
000000000001a0d0  0000000000000008 R_BPF_64_RELATIVE
000000000001a0e8  0000000000000008 R_BPF_64_RELATIVE
000000000001a100  0000000000000008 R_BPF_64_RELATIVE
000000000001a108  0000000000000008 R_BPF_64_RELATIVE
000000000001a120  0000000000000008 R_BPF_64_RELATIVE
000000000001a128  0000000000000008 R_BPF_64_RELATIVE
000000000001a130  0000000000000008 R_BPF_64_RELATIVE
000000000001a138  0000000000000008 R_BPF_64_RELATIVE
000000000001a140  0000000000000008 R_BPF_64_RELATIVE
000000000001a148  0000000000000008 R_BPF_64_RELATIVE
000000000001a150  0000000000000008 R_BPF_64_RELATIVE
000000000001a158  0000000000000008 R_BPF_64_RELATIVE
000000000001a160  0000000000000008 R_BPF_64_RELATIVE
000000000001a178  0000000000000008 R_BPF_64_RELATIVE
000000000001a180  0000000000000008 R_BPF_64_RELATIVE
000000000001a198  0000000000000008 R_BPF_64_RELATIVE
000000000001a1a0  0000000000000008 R_BPF_64_RELATIVE
000000000001a1b8  0000000000000008 R_BPF_64_RELATIVE
000000000001a1c0  0000000000000008 R_BPF_64_RELATIVE
000000000001a1d8  0000000000000008 R_BPF_64_RELATIVE
000000000001a1e0  0000000000000008 R_BPF_64_RELATIVE
000000000001a1f8  0000000000000008 R_BPF_64_RELATIVE
000000000001a200  0000000000000008 R_BPF_64_RELATIVE
000000000001a210  0000000000000008 R_BPF_64_RELATIVE
000000000001a228  0000000000000008 R_BPF_64_RELATIVE
000000000001a240  0000000000000008 R_BPF_64_RELATIVE
000000000001a248  0000000000000008 R_BPF_64_RELATIVE
000000000001a250  0000000000000008 R_BPF_64_RELATIVE
000000000001a258  0000000000000008 R_BPF_64_RELATIVE
000000000001a268  0000000000000008 R_BPF_64_RELATIVE
000000000001a280  0000000000000008 R_BPF_64_RELATIVE
000000000001a298  0000000000000008 R_BPF_64_RELATIVE
000000000001a2a0  0000000000000008 R_BPF_64_RELATIVE
000000000001a2b8  0000000000000008 R_BPF_64_RELATIVE
000000000001a2c8  0000000000000008 R_BPF_64_RELATIVE
000000000001a2d8  0000000000000008 R_BPF_64_RELATIVE
000000000001a2f0  0000000000000008 R_BPF_64_RELATIVE
000000000001a2f8  0000000000000008 R_BPF_64_RELATIVE
000000000001a308  0000000000000008 R_BPF_64_RELATIVE
000000000001a318  0000000000000008 R_BPF_64_RELATIVE
000000000001a328  0000000000000008 R_BPF_64_RELATIVE
000000000001a338  0000000000000008 R_BPF_64_RELATIVE
000000000001a350  0000000000000008 R_BPF_64_RELATIVE
000000000001a358  0000000000000008 R_BPF_64_RELATIVE
000000000001a360  0000000000000008 R_BPF_64_RELATIVE
000000000001a368  0000000000000008 R_BPF_64_RELATIVE
000000000001a380  0000000000000008 R_BPF_64_RELATIVE
000000000001a398  0000000000000008 R_BPF_64_RELATIVE
000000000001a3a0  0000000000000008 R_BPF_64_RELATIVE
000000000001a3a8  0000000000000008 R_BPF_64_RELATIVE
000000000001a3b0  0000000000000008 R_BPF_64_RELATIVE
000000000001a3c8  0000000000000008 R_BPF_64_RELATIVE
000000000001a3e0  0000000000000008 R_BPF_64_RELATIVE
000000000001a3f0  0000000000000008 R_BPF_64_RELATIVE
000000000001a400  0000000000000008 R_BPF_64_RELATIVE
000000000001a410  0000000000000008 R_BPF_64_RELATIVE
000000000001a420  0000000000000008 R_BPF_64_RELATIVE
000000000001a430  0000000000000008 R_BPF_64_RELATIVE
000000000001a440  0000000000000008 R_BPF_64_RELATIVE
000000000001a450  0000000000000008 R_BPF_64_RELATIVE
000000000001a460  0000000000000008 R_BPF_64_RELATIVE
000000000001a470  0000000000000008 R_BPF_64_RELATIVE
000000000001a488  0000000000000008 R_BPF_64_RELATIVE
000000000001a4a0  0000000000000008 R_BPF_64_RELATIVE
000000000001a4b8  0000000000000008 R_BPF_64_RELATIVE
000000000001a4d0  0000000000000008 R_BPF_64_RELATIVE
000000000001a4e8  0000000000000008 R_BPF_64_RELATIVE
000000000001a500  0000000000000008 R_BPF_64_RELATIVE
000000000001a510  0000000000000008 R_BPF_64_RELATIVE
000000000001a520  0000000000000008 R_BPF_64_RELATIVE
000000000001a530  0000000000000008 R_BPF_64_RELATIVE
000000000001a540  0000000000000008 R_BPF_64_RELATIVE
000000000001a550  0000000000000008 R_BPF_64_RELATIVE
000000000001a560  0000000000000008 R_BPF_64_RELATIVE
000000000001a570  0000000000000008 R_BPF_64_RELATIVE
000000000001a580  0000000000000008 R_BPF_64_RELATIVE
000000000001a590  0000000000000008 R_BPF_64_RELATIVE
000000000001a5a0  0000000000000008 R_BPF_64_RELATIVE
000000000001a5b0  0000000000000008 R_BPF_64_RELATIVE
000000000001a5c0  0000000000000008 R_BPF_64_RELATIVE
000000000001a5d8  0000000000000008 R_BPF_64_RELATIVE
000000000001a5f0  0000000000000008 R_BPF_64_RELATIVE
000000000001a608  0000000000000008 R_BPF_64_RELATIVE
000000000001a620  0000000000000008 R_BPF_64_RELATIVE
000000000001a638  0000000000000008 R_BPF_64_RELATIVE
000000000001a650  0000000000000008 R_BPF_64_RELATIVE
00000000000105a8  000000010000000a R_BPF_64_32            0000000000007778 custom_panic
0000000000000ab8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000f70  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000000f88  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000010f0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001108  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001218  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001ca8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000001d10  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000020b8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000026d8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002790  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002e30  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002e60  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002e98  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002ed0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002ef0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002f20  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000002f38  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000005a98  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000005c60  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000005d90  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000005eb8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000005fa8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000060e8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000006338  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000066e0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000007480  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000074a0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008a98  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008ab0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008c10  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008c28  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008db0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008dc8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008f30  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000008f48  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000090b0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000009928  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000009998  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000a170  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000a2a8  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000a4d8  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000a638  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000a940  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000d088  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000d418  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000d688  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000d6f0  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000ddc0  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000e288  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000e408  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000e440  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000e598  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000e998  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000f198  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000f230  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000f9f0  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000fe20  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000ff20  000000030000000a R_BPF_64_32            0000000000000000 abort
000000000000ff30  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000105b0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000105b8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000105d0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000105d8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010608  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010618  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000106c0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010700  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000109b0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000109c8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010b28  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010b40  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010d30  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010d40  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010d68  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010f00  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010f48  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000110a8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000113c8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000011410  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000011ed8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000012010  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000012080  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000012110  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000121f0  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000122f0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000014f68  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000014fd8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015230  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000153e0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015598  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015678  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015758  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015df0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015e18  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015e40  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015e68  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015e90  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000015eb8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000016638  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000016750  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000016ad8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000016cd8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000016d30  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000016f08  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000171a8  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000171d8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000017208  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000176a0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000017820  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000017ac0  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000018288  000000030000000a R_BPF_64_32            0000000000000000 abort
00000000000182b8  000000030000000a R_BPF_64_32            0000000000000000 abort
0000000000010598  000000040000000a R_BPF_64_32            0000000000000000 sol_log_
00000000000183c0  000000050000000a R_BPF_64_32            0000000000000000 sol_memcpy_
0000000000018520  000000060000000a R_BPF_64_32            0000000000000000 sol_memmove_
00000000000186e8  000000070000000a R_BPF_64_32            0000000000000000 sol_memset_
0000000000018820  000000080000000a R_BPF_64_32            0000000000000000 sol_memcmp_

Symbol table '.dynsym' contains 9 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000007778   120 FUNC    GLOBAL DEFAULT     1 custom_panic
     2 00000000000059c8  6880 FUNC    GLOBAL DEFAULT     1 entrypoint
     3 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
     4 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
     5 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
     6 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memmove_
     7 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
     8 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_

Symbol table '.symtab' contains 1595 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS ebpf.ee3b5d8edb6931d0-cgu.0
     2 0000000000000120   104 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::io::error::Error>
     3 0000000000000180     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
     4 0000000000000188     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<core::cell::BorrowError>
     5 0000000000000190  1568 FUNC    LOCAL  DEFAULT     1 core::hash::BuildHasher::hash_one
     6 0000000000002f40  1624 FUNC    LOCAL  DEFAULT     1 <core::hash::sip::Hasher<S> as core::hash::Hasher>::write
     7 00000000000007b0   784 FUNC    LOCAL  DEFAULT     1 core::slice::sort::insertion_sort_shift_left
     8 0000000000000a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
     9 0000000000000a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_5
    10 0000000000000880     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_3
    11 0000000000000820     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_18
    12 0000000000000848     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_19
    13 00000000000008d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
    14 0000000000000920     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
    15 0000000000000a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
    16 00000000000009b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_16
    17 0000000000000a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_14
    18 0000000000018a96    46 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_1
    19 0000000000019e68    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_2
    20 0000000000000ac0   808 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
    21 0000000000000b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_5
    22 0000000000000c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_14
    23 0000000000000b30     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_6
    24 0000000000000d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_25
    25 0000000000000b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_4
    26 0000000000000cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_24
    27 0000000000000dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_34
    28 0000000000000b68     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_8
    29 0000000000000b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_10
    30 0000000000000ba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_12
    31 0000000000000dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_33
    32 0000000000000c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_16
    33 0000000000000c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_18
    34 0000000000000c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_20
    35 0000000000000ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_22
    36 0000000000000cd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_23
    37 0000000000000dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_35
    38 0000000000000d48     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_27
    39 0000000000000d78     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_29
    40 0000000000000d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_31
    41 0000000000000de8   424 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
    42 0000000000000e18     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_2
    43 0000000000000f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_17
    44 0000000000000e50     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_5
    45 0000000000000e60     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_7
    46 0000000000000e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_9
    47 0000000000000ee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_11
    48 0000000000000ef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_12
    49 0000000000000f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_15
    50 0000000000000f40     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_14
    51 0000000000000f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_18
    52 0000000000000f90   384 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
    53 0000000000000fc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_2
    54 00000000000010e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_15
    55 0000000000000ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_5
    56 0000000000001008     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_7
    57 0000000000001058     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_9
    58 0000000000001068     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_10
    59 00000000000010c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_13
    60 00000000000010c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_12
    61 00000000000010f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_16
    62 0000000000001110  7728 FUNC    LOCAL  DEFAULT     1 borsh::ser::hashes::<impl borsh::ser::BorshSerialize for std::collections::hash::map::HashMap<K,V,H>>::serialize
    63 0000000000001b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_35
    64 00000000000011a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_3
    65 0000000000001170     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_2
    66 00000000000011b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_5
    67 00000000000011d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_7
    68 00000000000011e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_9
    69 0000000000001208     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_11
    70 0000000000001220     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_13
    71 0000000000001308     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_22
    72 0000000000001280     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_16
    73 00000000000012b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_18
    74 00000000000012c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_20
    75 0000000000002f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_166
    76 0000000000001b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_34
    77 0000000000001498     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_24
    78 00000000000014d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_26
    79 00000000000014a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_25
    80 0000000000001690     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_28
    81 00000000000014f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_27
    82 0000000000001720     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_33
    83 00000000000016b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_30
    84 00000000000016d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_32
    85 0000000000001750     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_167
    86 0000000000001bb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_36
    87 0000000000001768     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_147
    88 00000000000017c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_149
    89 00000000000017a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_148
    90 0000000000002de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_159
    91 0000000000001828     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_151
    92 0000000000002df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_160
    93 0000000000001970     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_153
    94 0000000000001898     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_163
    95 0000000000001908     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_165
    96 0000000000001a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_156
    97 0000000000001ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_158
    98 0000000000001c10     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_38
    99 0000000000001c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_40
   100 0000000000001c50     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_42
   101 0000000000001cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_44
   102 0000000000018a3f    43 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_3
   103 0000000000019df0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_4
   104 0000000000001d18     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_46
   105 0000000000019e08    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_5
   106 0000000000001dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_48
   107 0000000000001db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_169
   108 0000000000001fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_70
   109 0000000000001e70     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_51
   110 0000000000001eb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_53
   111 0000000000002ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_57
   112 0000000000001f70     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_56
   113 0000000000001f18     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_63
   114 0000000000001f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_61
   115 0000000000002000     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_71
   116 0000000000002e68     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_76
   117 0000000000002048     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_75
   118 0000000000002068     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_77
   119 0000000000002238     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_92
   120 0000000000002120     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_84
   121 0000000000002088     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_79
   122 00000000000020c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_81
   123 0000000000019e38    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_6
   124 00000000000020d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_83
   125 0000000000002158     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_86
   126 0000000000002198     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_88
   127 00000000000021a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_90
   128 0000000000002ea0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_168
   129 0000000000002488     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_94
   130 0000000000002298     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_144
   131 0000000000002300     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_146
   132 00000000000023d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_129
   133 0000000000002410     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_138
   134 0000000000002440     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_140
   135 0000000000002460     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_142
   136 00000000000024e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_109
   137 0000000000002538     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_104
   138 0000000000002628     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_112
   139 0000000000002620     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_111
   140 0000000000002638     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_113
   141 00000000000026e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_115
   142 0000000000019d80    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_7
   143 00000000000189f0     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_8
   144 0000000000019da8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_9
   145 0000000000002798     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_117
   146 0000000000019dc0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_10
   147 0000000000002e08     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_119
   148 0000000000002e38     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_120
   149 0000000000002ad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_126
   150 00000000000029e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_125
   151 0000000000002988     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_135
   152 0000000000002a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_131
   153 0000000000002a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_133
   154 0000000000002cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_95
   155 0000000000002c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_59
   156 0000000000002bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_68
   157 0000000000002c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_66
   158 0000000000002cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_97
   159 0000000000002ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_99
   160 0000000000002ef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_100
   161 0000000000002d78     0 NOTYPE  LOCAL  DEFAULT     1 LBB7_103
   162 0000000000019dd8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_11
   163 0000000000018a6a    44 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_12
   164 0000000000019e50    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_13
   165 0000000000019e20    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_14
   166 0000000000019d90    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_15
   167 00000000000031e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_11
   168 0000000000002fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_3
   169 0000000000003478     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_5
   170 0000000000002fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_4
   171 0000000000003498     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_6
   172 0000000000002fe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_8
   173 0000000000003018     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_9
   174 00000000000034f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_22
   175 00000000000033e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_15
   176 0000000000003248     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_13
   177 0000000000003508     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_17
   178 00000000000033f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_16
   179 0000000000003530     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_18
   180 0000000000003420     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_20
   181 0000000000003468     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_21
   182 00000000000034f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB8_23
   183 0000000000003598  2112 FUNC    LOCAL  DEFAULT     1 hashbrown::map::HashMap<K,V,S,A>::insert
   184 0000000000003608     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_2
   185 0000000000003dd8  7152 FUNC    LOCAL  DEFAULT     1 hashbrown::raw::RawTable<T,A>::reserve_rehash
   186 00000000000036d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_3
   187 00000000000038d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_22
   188 0000000000003758     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_5
   189 00000000000038b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_7
   190 0000000000003a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_21
   191 0000000000003a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_13
   192 0000000000003a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_10
   193 0000000000003a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_12
   194 0000000000003a60     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_14
   195 0000000000003b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_15
   196 0000000000003b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_20
   197 0000000000003c88     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_19
   198 0000000000003c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB9_18
   199 0000000000003e10     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_2
   200 0000000000003e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_4
   201 00000000000059c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_87
   202 0000000000003ea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_6
   203 00000000000040a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_49
   204 0000000000003ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
   205 0000000000005228     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_11
   206 0000000000003f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_13
   207 0000000000005270     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_15
   208 00000000000052b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_16
   209 00000000000040d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_51
   210 0000000000004180     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_89
   211 0000000000004120     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_53
   212 0000000000004198     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_55
   213 0000000000005248     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_54
   214 0000000000004308     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_85
   215 00000000000041c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_56
   216 0000000000004338     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_57
   217 00000000000042a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_90
   218 00000000000042e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_84
   219 00000000000059b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_86
   220 00000000000043d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_59
   221 0000000000004608     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_62
   222 0000000000004478     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_61
   223 0000000000004730     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_64
   224 0000000000004628     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_63
   225 0000000000004650     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_65
   226 00000000000046b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_66
   227 00000000000046c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_67
   228 0000000000004758     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_68
   229 0000000000004788     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_69
   230 0000000000004918     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_71
   231 0000000000004e60     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_74
   232 0000000000004e20     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_73
   233 0000000000005078     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_77
   234 00000000000051b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_83
   235 0000000000005150     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_80
   236 0000000000005140     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_82
   237 0000000000005310     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_18
   238 0000000000005388     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_23
   239 0000000000005360     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_21
   240 00000000000053b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_24
   241 0000000000005480     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_33
   242 0000000000005408     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_27
   243 0000000000005438     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_29
   244 0000000000005448     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_31
   245 0000000000005958     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_88
   246 00000000000054e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_35
   247 0000000000005990     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_38
   248 0000000000005618     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_37
   249 0000000000005568     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_47
   250 00000000000055f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_48
   251 0000000000005940     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_40
   252 0000000000005728     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_44
   253 00000000000056e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_43
   254 0000000000005998     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_39
   255 0000000000005a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_2
   256 0000000000005a58     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_4
   257 0000000000005a68     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_6
   258 0000000000005aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_8
   259 0000000000005b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_10
   260 0000000000005b40     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_12
   261 0000000000005b50     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_14
   262 0000000000005b78     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_16
   263 0000000000005b68     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_15
   264 00000000000060d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_58
   265 0000000000005be8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_18
   266 0000000000005c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_20
   267 0000000000005c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_22
   268 0000000000005c68     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_24
   269 0000000000005ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_26
   270 0000000000005d08     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_28
   271 0000000000005d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_30
   272 0000000000005d48     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_32
   273 0000000000005d98     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_34
   274 0000000000005e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_36
   275 0000000000005e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_38
   276 0000000000005e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_40
   277 0000000000005ec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_42
   278 0000000000005f20     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_44
   279 0000000000005f60     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_46
   280 0000000000005f70     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_48
   281 0000000000005fb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_50
   282 0000000000006070     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_52
   283 00000000000060a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_54
   284 00000000000060b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_56
   285 00000000000060f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_59
   286 0000000000006578     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_86
   287 00000000000062b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_64
   288 00000000000061e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_61
   289 0000000000007488     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_154
   290 0000000000006210     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_63
   291 00000000000073e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_150
   292 00000000000063e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_76
   293 0000000000006340     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_68
   294 0000000000006330     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_67
   295 0000000000006378     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_70
   296 00000000000063a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_72
   297 00000000000063b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_74
   298 00000000000064f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_80
   299 0000000000006530     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_82
   300 0000000000006560     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_84
   301 0000000000006678     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_88
   302 00000000000066a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_90
   303 00000000000066b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_92
   304 00000000000066e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_94
   305 0000000000007420     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_151
   306 00000000000067f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_98
   307 0000000000006880     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_100
   308 0000000000006948     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_103
   309 00000000000069c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_105
   310 0000000000006a70     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_107
   311 0000000000006b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_110
   312 0000000000006ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_112
   313 0000000000006c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_114
   314 0000000000006ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_117
   315 0000000000006e90     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_125
   316 0000000000006d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_119
   317 0000000000006dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_122
   318 0000000000006e30     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_124
   319 0000000000006ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_127
   320 0000000000006f70     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_129
   321 0000000000007028     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_132
   322 0000000000007098     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_134
   323 0000000000007120     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_136
   324 0000000000007428     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_152
   325 0000000000007220     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_143
   326 00000000000071b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_140
   327 00000000000071f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_142
   328 00000000000071c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_141
   329 00000000000072f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_149
   330 0000000000007288     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_146
   331 00000000000072c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_148
   332 0000000000007290     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_147
   333 0000000000019ea0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_17
   334 0000000000018ac4    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_18
   335 0000000000019e80    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_19
   336 0000000000007468     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_153
   337 0000000000018b1a    43 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_20
   338 0000000000019ec0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_21
   339 0000000000019ee0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_22
   340 00000000000074e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB12_2
   341 0000000000007510     0 NOTYPE  LOCAL  DEFAULT     1 LBB12_4
   342 0000000000007528     0 NOTYPE  LOCAL  DEFAULT     1 LBB12_6
   343 0000000000007570     0 NOTYPE  LOCAL  DEFAULT     1 LBB12_8
   344 00000000000075c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_2
   345 00000000000075f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_4
   346 0000000000007610     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_6
   347 0000000000007680     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_10
   348 0000000000007660     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_9
   349 00000000000076c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB15_2
   350 00000000000076f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB15_4
   351 0000000000007710     0 NOTYPE  LOCAL  DEFAULT     1 LBB15_6
   352 0000000000007770     0 NOTYPE  LOCAL  DEFAULT     1 LBB15_8
   353 0000000000019ef8    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_23
   354 00000000000189d8    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_24
   355 00000000000189f0    79 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_25
   356 0000000000018b08    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_27
   357 0000000000018b19     1 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_28
   358 0000000000018b45    15 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_29
   359 00000000000074a8   208 FUNC    LOCAL  HIDDEN      1 __rust_alloc
   360 0000000000007578     8 FUNC    LOCAL  HIDDEN      1 __rust_dealloc
   361 0000000000007580   264 FUNC    LOCAL  HIDDEN      1 __rust_realloc
   362 0000000000007688   240 FUNC    LOCAL  HIDDEN      1 __rust_alloc_zeroed
   363 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS 4wress70nbkcd0lr
   364 00000000000077f0     0 NOTYPE  LOCAL  DEFAULT     1
   365 00000000000077f0    16 FUNC    LOCAL  HIDDEN      1 __rust_alloc_error_handler
   366 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS tester.6ccb1db94abf740-cgu.0
   367 0000000000018b70     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_5
   368 0000000000007800   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
   369 000000000001a018    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_31
   370 0000000000007868     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<<core::cell::RefCell<T> as core::fmt::Debug>::fmt::BorrowedPlaceholder>
   371 0000000000007870   784 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>
   372 0000000000007b78     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_13
   373 00000000000078b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_3
   374 0000000000007940     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_11
   375 00000000000079d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_4
   376 0000000000007900     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_10
   377 0000000000007a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_6
   378 00000000000079e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_5
   379 0000000000007b48     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_8
   380 0000000000007b80     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>
   381 0000000000007b88    48 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError>
   382 0000000000007bb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_2
   383 0000000000007bb8    48 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<alloc::string::String>
   384 0000000000007be0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_2
   385 0000000000007be8   192 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::io::error::Error>
   386 0000000000007ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_5
   387 0000000000007c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_4
   388 0000000000007ca8  1568 FUNC    LOCAL  DEFAULT     1 core::hash::BuildHasher::hash_one
   389 0000000000009a48  1624 FUNC    LOCAL  DEFAULT     1 <core::hash::sip::Hasher<S> as core::hash::Hasher>::write
   390 00000000000082c8    24 FUNC    LOCAL  DEFAULT     1 core::error::Error::cause
   391 00000000000082e0     8 FUNC    LOCAL  DEFAULT     1 core::error::Error::provide
   392 00000000000082e8    56 FUNC    LOCAL  DEFAULT     1 core::error::Error::type_id
   393 0000000000008320    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   394 0000000000008458   720 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_char
   395 0000000000008340   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   396 00000000000083b0   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   397 0000000000008410     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_2
   398 0000000000008dd0   384 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   399 0000000000008550     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_9
   400 00000000000085b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_3
   401 00000000000084e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_4
   402 00000000000085f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_5
   403 0000000000008690     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_6
   404 0000000000008580     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_11
   405 0000000000008ab8   376 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   406 0000000000008718     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_12
   407 00000000000086d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB41_8
   408 0000000000008728   168 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_str
   409 0000000000008788     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_2
   410 00000000000087d0   328 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   411 0000000000008840     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_2
   412 0000000000008890     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_7
   413 0000000000008860     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_6
   414 00000000000088e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_9
   415 00000000000088c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_11
   416 00000000000088f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_10
   417 00000000000088d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_12
   418 0000000000008908     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_13
   419 0000000000008918   416 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   420 0000000000008940     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_2
   421 0000000000008a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_17
   422 0000000000008978     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_5
   423 0000000000008988     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_7
   424 00000000000089b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_9
   425 0000000000008a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_11
   426 0000000000008a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_12
   427 0000000000008a70     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_15
   428 0000000000008a68     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_14
   429 0000000000008aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_18
   430 0000000000008ae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   431 0000000000008c08     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_15
   432 0000000000008b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_5
   433 0000000000008b28     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_7
   434 0000000000008b78     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_9
   435 0000000000008b88     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_10
   436 0000000000008be8     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_13
   437 0000000000008be0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_12
   438 0000000000008c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_16
   439 0000000000008c30   416 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   440 0000000000008c58     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_2
   441 0000000000008da8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_17
   442 0000000000008c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_5
   443 0000000000008ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_7
   444 0000000000008cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_9
   445 0000000000008d20     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_11
   446 0000000000008d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_12
   447 0000000000008d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_15
   448 0000000000008d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_14
   449 0000000000008db8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_18
   450 0000000000008e00     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_2
   451 0000000000008f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_15
   452 0000000000008e38     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_5
   453 0000000000008e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_7
   454 0000000000008e98     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_9
   455 0000000000008ea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_10
   456 0000000000008f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_13
   457 0000000000008f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_12
   458 0000000000008f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_16
   459 0000000000008f50  1936 FUNC    LOCAL  DEFAULT     1 borsh::de::hashes::<impl borsh::de::BorshDeserialize for std::collections::hash::map::HashMap<K,V,H>>::deserialize_reader
   460 0000000000009018     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_43
   461 0000000000009038     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_3
   462 0000000000008fe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_42
   463 0000000000009400     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_45
   464 0000000000019f80    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_35
   465 00000000000093e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_44
   466 0000000000009068     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_5
   467 00000000000090b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_7
   468 00000000000091a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_8
   469 00000000000090f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_15
   470 0000000000009408     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_25
   471 0000000000009708   832 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as borsh::de::BorshDeserialize>::deserialize_reader
   472 0000000000009300     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_12
   473 000000000000a0a0  2216 FUNC    LOCAL  DEFAULT     1 <alloc::vec::Vec<T> as borsh::de::BorshDeserialize>::deserialize_reader
   474 0000000000009288     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_13
   475 0000000000009348     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_22
   476 0000000000009380     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_17
   477 0000000000009330     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_21
   478 00000000000093d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_24
   479 00000000000093a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_19
   480 0000000000009628     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_40
   481 000000000000b1c0  7312 FUNC    LOCAL  DEFAULT     1 hashbrown::raw::RawTable<T,A>::reserve_rehash
   482 00000000000094f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_28
   483 00000000000094d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_32
   484 00000000000095e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_33
   485 000000000000a948  2168 FUNC    LOCAL  DEFAULT     1 hashbrown::map::HashMap<K,V,S,A>::insert
   486 0000000000009668     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_35
   487 0000000000009610     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_39
   488 00000000000096a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB49_37
   489 00000000000096e0    40 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Display>::fmt
   490 00000000000097d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_12
   491 0000000000009788     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_3
   492 00000000000097b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_4
   493 00000000000097f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_5
   494 0000000000009a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_13
   495 0000000000019fb0    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_55
   496 0000000000009930     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_7
   497 0000000000018bd7    55 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_56
   498 0000000000019fe0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_57
   499 000000000001a000    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_58
   500 00000000000099a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_9
   501 0000000000019f28    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_59
   502 0000000000009a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB61_11
   503 0000000000009cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_11
   504 0000000000009aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_3
   505 0000000000009f80     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_5
   506 0000000000009ac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_4
   507 0000000000009fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_6
   508 0000000000009ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_8
   509 0000000000009b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_9
   510 0000000000009ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_22
   511 0000000000009ee8     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_15
   512 0000000000009d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_13
   513 000000000000a010     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_17
   514 0000000000009f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_16
   515 000000000000a038     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_18
   516 0000000000009f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_20
   517 0000000000009f70     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_21
   518 000000000000a000     0 NOTYPE  LOCAL  DEFAULT     1 LBB62_23
   519 000000000000a178     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_38
   520 000000000000a578     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_2
   521 000000000000a130     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_5
   522 000000000000a1b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_7
   523 000000000000a158     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_6
   524 000000000000a910     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_39
   525 000000000000a270     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_8
   526 000000000000a1f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_13
   527 000000000000a420     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_30
   528 000000000000a918     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_17
   529 000000000000a248     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_16
   530 000000000000a530     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_40
   531 000000000000a2d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_18
   532 000000000000a278     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_9
   533 000000000000a2b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_11
   534 000000000001a048    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_60
   535 000000000000a300     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_20
   536 000000000000a310     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_22
   537 000000000000a500     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_29
   538 000000000000a3a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_25
   539 000000000000a4e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_27
   540 000000000000a4e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_28
   541 000000000000a5a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_33
   542 000000000000a6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_42
   543 000000000000a640     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_35
   544 000000000000a6b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_37
   545 000000000000a700     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_44
   546 000000000000a718     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_46
   547 000000000000a740     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_49
   548 000000000000a7e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_50
   549 000000000000a788     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_53
   550 000000000000a8d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_48
   551 000000000000a870     0 NOTYPE  LOCAL  DEFAULT     1 LBB63_54
   552 0000000000019f98    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_61
   553 000000000000a9c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_2
   554 000000000000aa90     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_3
   555 000000000000ac90     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_23
   556 000000000000ab10     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_5
   557 000000000000ac70     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_7
   558 000000000000ae48     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_21
   559 000000000000adf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_13
   560 000000000000adc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_10
   561 000000000000add8     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_12
   562 000000000000ae18     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_14
   563 000000000000af00     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_15
   564 000000000000aef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_20
   565 000000000000b070     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_19
   566 000000000000b058     0 NOTYPE  LOCAL  DEFAULT     1 LBB65_18
   567 000000000000b1f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_2
   568 000000000000b230     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_4
   569 000000000000c7e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_81
   570 000000000000b290     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_6
   571 000000000000b4a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_44
   572 000000000000b2c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_9
   573 000000000000c658     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_11
   574 000000000000b300     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_13
   575 000000000000c6a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_15
   576 000000000000c6e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_16
   577 000000000000b4d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_46
   578 000000000000b578     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_82
   579 000000000000b518     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_48
   580 000000000000b590     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_50
   581 000000000000c678     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_49
   582 000000000000b6f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_80
   583 000000000000b5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_51
   584 000000000000b738     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_52
   585 000000000000b698     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_83
   586 000000000000b6d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_79
   587 000000000000b7d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_54
   588 000000000000ba28     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_57
   589 000000000000b870     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_56
   590 000000000000bb50     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_59
   591 000000000000ba48     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_58
   592 000000000000ba68     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_60
   593 000000000000bac8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_61
   594 000000000000bad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_62
   595 000000000000bb78     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_63
   596 000000000000bbb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_64
   597 000000000000bd48     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_66
   598 000000000000c298     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_69
   599 000000000000c258     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_68
   600 000000000000c4a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_72
   601 000000000000c5e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_78
   602 000000000000c580     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_75
   603 000000000000c570     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_77
   604 000000000000c748     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_18
   605 000000000000c7c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_23
   606 000000000000c798     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_21
   607 000000000000c7f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_24
   608 000000000000c880     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_27
   609 000000000000c8e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_29
   610 000000000000cd40     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_32
   611 000000000000ca18     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_31
   612 000000000000c968     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_42
   613 000000000000ca00     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_43
   614 000000000000cd78     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_33
   615 000000000000cb28     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_39
   616 000000000000cae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_38
   617 000000000000cdc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB66_34
   618 000000000001a060    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_62
   619 000000000000e540     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_85
   620 000000000000e5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_86
   621 000000000000d170     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_16
   622 000000000000d040     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_5
   623 000000000000d090     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_7
   624 000000000000d420     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_9
   625 000000000000d0c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_8
   626 000000000000e500     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_83
   627 000000000000e5d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_87
   628 000000000000e690     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_94
   629 000000000000e788     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_103
   630 000000000000d5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_22
   631 000000000000e920     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_117
   632 000000000000e448     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_75
   633 000000000000d4f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_13
   634 000000000000d7f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_33
   635 000000000000d678     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_25
   636 000000000000d690     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_27
   637 000000000000d680     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_26
   638 000000000000d6f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_30
   639 000000000000d6d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_29
   640 000000000000d700     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_31
   641 000000000000d8d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_35
   642 000000000000d728     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_32
   643 000000000000e358     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_68
   644 000000000000e390     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_70
   645 000000000000e3d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_73
   646 000000000000dad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_37
   647 000000000000dce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_42
   648 000000000000db68     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_39
   649 000000000000dcc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_41
   650 000000000000dd58     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_44
   651 000000000000dd30     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_43
   652 000000000000ddc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_49
   653 000000000000dd88     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_47
   654 000000000000e410     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_74
   655 000000000000df90     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_51
   656 000000000000e1a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_56
   657 000000000000e028     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_53
   658 000000000000e188     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_55
   659 000000000000e218     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_58
   660 000000000000e1f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_57
   661 000000000000e290     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_63
   662 000000000000e248     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_61
   663 000000000000e308     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_65
   664 000000000000e340     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_67
   665 000000000000e3d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_72
   666 000000000001a0b8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   667 000000000001a0d0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_66
   668 000000000000e490     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_78
   669 000000000000e4c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_80
   670 000000000000e478     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_77
   671 000000000000e4f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_82
   672 000000000000e510     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_84
   673 0000000000018c68    50 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_67
   674 000000000001a080    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_68
   675 000000000001a0a0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   676 000000000000e610     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_90
   677 000000000000e650     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_92
   678 000000000000e5f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_89
   679 000000000000e898     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_112
   680 000000000000e6c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_96
   681 000000000000e708     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_99
   682 000000000000e748     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_101
   683 000000000000e6f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_98
   684 000000000000e8b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_115
   685 000000000000e7d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_105
   686 000000000000e818     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_108
   687 000000000000e858     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_110
   688 000000000000e800     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_107
   689 000000000000e8d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_113
   690 000000000000e8f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_116
   691 000000000000e9a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_119
   692 000000000000ea20     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_121
   693 000000000000ea60     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_124
   694 000000000000eaa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_126
   695 000000000000ea48     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_123
   696 000000000000eae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_128
   697 000000000000eb10     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_130
   698 0000000000019f08    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_106
   699 0000000000018b70    76 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_107
   700 0000000000018bbc    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_108
   701 0000000000018c0e    76 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_109
   702 0000000000018c5a    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_111
   703 0000000000018c67     1 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_114
   704 0000000000018c9a    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_115
   705 000000000000cf18  7208 FUNC    LOCAL  HIDDEN      1 tester::entrypoint::deserialize
   706 000000000000ce50   200 FUNC    LOCAL  HIDDEN      1 tester::types::UtxoInfo::id
   707 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.341b08a2e62bcd6-cgu.0
   708 000000000000eb40  1256 FUNC    LOCAL  DEFAULT     1 std::io::error::repr_bitpacked::kind_from_prim
   709 000000000000eba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_28
   710 000000000000ec18     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_15
   711 000000000000ec88     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
   712 000000000000ed18     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
   713 000000000000f020     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_97
   714 000000000000eb90     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_56
   715 000000000000f018     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_95
   716 000000000000ebe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_42
   717 000000000000ecb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_36
   718 000000000000ed48     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_33
   719 000000000000ee98     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_75
   720 000000000000ebd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_76
   721 000000000000ec50     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_49
   722 000000000000ed78     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_46
   723 000000000000eea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_85
   724 000000000000ec08     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_86
   725 000000000000ece8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_22
   726 000000000000eda8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_19
   727 000000000000eeb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_65
   728 000000000000ec40     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_66
   729 000000000000edd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_53
   730 000000000000eec8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_90
   731 000000000000eed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_93
   732 000000000000ec78     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_92
   733 000000000000ee08     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_12
   734 000000000000eee8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_60
   735 000000000000eca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_61
   736 000000000000ee38     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_39
   737 000000000000eef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_80
   738 000000000000ecd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_81
   739 000000000000ee68     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_25
   740 000000000000ef08     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_70
   741 000000000000ed08     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_71
   742 000000000000ef18     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_57
   743 000000000000ef28     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_58
   744 000000000000ed38     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_59
   745 000000000000ef38     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_77
   746 000000000000ef48     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_78
   747 000000000000ed68     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_79
   748 000000000000ef58     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_87
   749 000000000000ef68     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_88
   750 000000000000ed98     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_89
   751 000000000000ef78     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_67
   752 000000000000ef88     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_68
   753 000000000000edc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_69
   754 000000000000ef98     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_94
   755 000000000000efa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_91
   756 000000000000edf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_96
   757 000000000000efb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_62
   758 000000000000efc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_63
   759 000000000000ee28     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_64
   760 000000000000efd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_82
   761 000000000000efe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_83
   762 000000000000ee58     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_84
   763 000000000000eff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_72
   764 000000000000f008     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_73
   765 000000000000ee88     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_74
   766 000000000000f028    48 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError>
   767 000000000000f050     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
   768 000000000000f058    24 FUNC    LOCAL  DEFAULT     1 core::error::Error::cause
   769 000000000000f070     8 FUNC    LOCAL  DEFAULT     1 core::error::Error::provide
   770 000000000000f078    56 FUNC    LOCAL  DEFAULT     1 core::error::Error::type_id
   771 000000000000f0e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_3
   772 000000000000f110     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_5
   773 000000000000f140     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_8
   774 000000000000f120     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_6
   775 000000000000f138     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_7
   776 000000000000f328     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_18
   777 000000000000f1a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_11
   778 000000000000f238     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_13
   779 000000000001a108    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_1
   780 000000000000f308     0 NOTYPE  LOCAL  DEFAULT     1 LBB5_17
   781 000000000001a0e8    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_2
   782 000000000000f0b0   648 FUNC    LOCAL  HIDDEN      1 borsh::de::unexpected_eof_to_unexpected_length_of_input
   783 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS std.b43219b47229f51b-cgu.0
   784 000000000000f338    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   785 000000000000f368    40 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   786 000000000000f390   168 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for i32>::fmt
   787 000000000000f3f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_2
   788 000000000000f3d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_4
   789 000000000000f418     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_3
   790 000000000000f430     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_5
   791 000000000000f438     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&mut std::io::Write::write_fmt::Adapter<std::sys::sbf::stdio::Stderr>>
   792 000000000000f440     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<i32>
   793 000000000000f448     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<bool>
   794 000000000000f450    48 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<alloc::string::String>
   795 000000000000f478     0 NOTYPE  LOCAL  DEFAULT     1 LBB54_2
   796 000000000000f480    40 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Debug>::fmt
   797 000000000000f4a8  1256 FUNC    LOCAL  DEFAULT     1 std::io::error::repr_bitpacked::kind_from_prim
   798 000000000000f508     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_28
   799 000000000000f580     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_15
   800 000000000000f5f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_9
   801 000000000000f680     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_6
   802 000000000000f988     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_97
   803 000000000000f4f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_56
   804 000000000000f980     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_95
   805 000000000000f548     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_42
   806 000000000000f620     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_36
   807 000000000000f6b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_33
   808 000000000000f800     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_75
   809 000000000000f538     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_76
   810 000000000000f5b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_49
   811 000000000000f6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_46
   812 000000000000f810     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_85
   813 000000000000f570     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_86
   814 000000000000f650     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_22
   815 000000000000f710     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_19
   816 000000000000f820     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_65
   817 000000000000f5a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_66
   818 000000000000f740     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_53
   819 000000000000f830     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_90
   820 000000000000f840     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_93
   821 000000000000f5e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_92
   822 000000000000f770     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_12
   823 000000000000f850     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_60
   824 000000000000f610     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_61
   825 000000000000f7a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_39
   826 000000000000f860     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_80
   827 000000000000f640     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_81
   828 000000000000f7d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_25
   829 000000000000f870     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_70
   830 000000000000f670     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_71
   831 000000000000f880     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_57
   832 000000000000f890     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_58
   833 000000000000f6a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_59
   834 000000000000f8a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_77
   835 000000000000f8b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_78
   836 000000000000f6d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_79
   837 000000000000f8c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_87
   838 000000000000f8d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_88
   839 000000000000f700     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_89
   840 000000000000f8e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_67
   841 000000000000f8f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_68
   842 000000000000f730     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_69
   843 000000000000f900     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_94
   844 000000000000f910     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_91
   845 000000000000f760     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_96
   846 000000000000f920     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_62
   847 000000000000f930     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_63
   848 000000000000f790     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_64
   849 000000000000f940     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_82
   850 000000000000f950     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_83
   851 000000000000f7c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_84
   852 000000000000f960     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_72
   853 000000000000f970     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_73
   854 000000000000f7f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB208_74
   855 000000000000f9f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_2
   856 000000000000fb40     0 NOTYPE  LOCAL  DEFAULT     1 LBB215_3
   857 000000000000fbf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB215_9
   858 000000000001a1e0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.348
   859 0000000000018d81     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.347
   860 000000000001a180    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.176
   861 0000000000018d7b     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.346
   862 000000000000fcd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB215_10
   863 000000000000fce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB215_5
   864 0000000000018d6b     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.180
   865 0000000000018d64     7 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.177
   866 000000000001a1c0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.181
   867 000000000000fcd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB215_11
   868 0000000000018d62     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.172
   869 000000000001a160    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.174
   870 000000000000fe28     0 NOTYPE  LOCAL  DEFAULT     1 LBB215_7
   871 000000000001a1a0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.178
   872 0000000000018d70    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.324
   873 000000000000ffa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_6
   874 0000000000010018     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_15
   875 0000000000010088     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_23
   876 0000000000010118     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_32
   877 0000000000010580     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_81
   878 000000000000ffe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_11
   879 00000000000100b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_26
   880 0000000000010148     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_35
   881 0000000000010298     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_56
   882 0000000000018e85    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.370
   883 0000000000010050     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_19
   884 0000000000010178     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_38
   885 00000000000102b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_57
   886 0000000000018ef0    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.380
   887 0000000000010578     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_80
   888 00000000000100e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_29
   889 00000000000101a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_41
   890 00000000000102d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_58
   891 0000000000018df8    10 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.360
   892 00000000000101d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_44
   893 00000000000102f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_59
   894 0000000000010310     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_60
   895 0000000000018f37    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.385
   896 0000000000010208     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_47
   897 0000000000010330     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_61
   898 0000000000018dc7    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.355
   899 0000000000010238     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_50
   900 0000000000010350     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_62
   901 0000000000018eaf    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.375
   902 0000000000010268     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_53
   903 0000000000010370     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_63
   904 0000000000018e32    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.365
   905 0000000000010390     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_64
   906 00000000000103b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_65
   907 0000000000018da6    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.353
   908 00000000000103d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_66
   909 00000000000103e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_67
   910 0000000000018e99    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.373
   911 0000000000010408     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_68
   912 0000000000010428     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_69
   913 0000000000018f19    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.383
   914 0000000000010448     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_70
   915 0000000000010468     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_71
   916 0000000000018e19    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.363
   917 0000000000010488     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_72
   918 00000000000104a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_73
   919 0000000000018f54    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.388
   920 00000000000104c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_74
   921 00000000000104e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_75
   922 0000000000010508     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_76
   923 0000000000010528     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_77
   924 0000000000018ede    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.378
   925 0000000000010548     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_78
   926 0000000000010568     0 NOTYPE  LOCAL  DEFAULT     1 LBB487_79
   927 0000000000018e63    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.368
   928 0000000000018e79    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.369
   929 0000000000018ded    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.359
   930 0000000000018f2c    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.384
   931 0000000000018db5    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.354
   932 0000000000018ea4    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.374
   933 0000000000018e26    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.364
   934 0000000000018d86    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.351
   935 0000000000018d97    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.352
   936 0000000000018e90     9 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.372
   937 0000000000018efe    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.381
   938 0000000000018f0a    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.382
   939 0000000000018e02    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.361
   940 0000000000018e0f    10 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.362
   941 0000000000018f44    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.386
   942 0000000000018f4f     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.387
   943 0000000000018dd8    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.356
   944 0000000000018de4     9 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.357
   945 0000000000018ec6    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.376
   946 0000000000018ed2    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.377
   947 0000000000018e43    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.366
   948 0000000000018e55    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.367
   949 0000000000010598    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::sol_log
   950 0000000000018f61    46 OBJECT  LOCAL  DEFAULT     2 .Lanon.3c4b9e1b83aba65f518faaf3c2bbdeb6.504
   951 000000000000ff28    16 FUNC    LOCAL  HIDDEN      1 rust_begin_unwind
   952 000000000000ff10     8 FUNC    LOCAL  HIDDEN      1 std::io::stdio::_print
   953 000000000000f990    16 FUNC    LOCAL  HIDDEN      1 <std::io::error::Error as core::fmt::Debug>::fmt
   954 0000000000010610    16 FUNC    LOCAL  HIDDEN      1 __rg_oom
   955 000000000000f9a0   128 FUNC    LOCAL  HIDDEN      1 std::io::error::Error::_new
   956 00000000000105c0    16 FUNC    LOCAL  HIDDEN      1 std::sys::sbf::decode_error_kind
   957 00000000000105d0    16 FUNC    LOCAL  HIDDEN      1 std::sys::sbf::abort_internal
   958 000000000000fa20  1264 FUNC    LOCAL  HIDDEN      1 std::io::error::<impl core::fmt::Debug for std::io::error::repr_bitpacked::Repr>::fmt
   959 000000000000ff18    16 FUNC    LOCAL  HIDDEN      1 std::process::abort
   960 00000000000105a8    24 FUNC    LOCAL  HIDDEN      1 std::sys::sbf::panic
   961 000000000000ff38  1632 FUNC    LOCAL  HIDDEN      1 <std::io::error::ErrorKind as core::fmt::Debug>::fmt
   962 00000000000105e0    48 FUNC    LOCAL  HIDDEN      1 std::alloc::rust_oom
   963 000000000000ff10     8 FUNC    LOCAL  HIDDEN      1 std::io::stdio::_eprint
   964 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS panic_abort.70bb53666ed0d001-cgu.0
   965 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS hashbrown.5041212c5f4143a3-cgu.0
   966 0000000000010640     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
   967 000000000001a200    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.945059e31bf7ec39847d669a0e9195eb.1
   968 0000000000018fb0     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.945059e31bf7ec39847d669a0e9195eb.2
   969 000000000001a210    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.945059e31bf7ec39847d669a0e9195eb.4
   970 00000000000106e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
   971 0000000000018f8f    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.945059e31bf7ec39847d669a0e9195eb.0
   972 0000000000018fb0   100 OBJECT  LOCAL  DEFAULT     2 .Lanon.945059e31bf7ec39847d669a0e9195eb.3
   973 0000000000010620   168 FUNC    LOCAL  HIDDEN      1 hashbrown::raw::Fallibility::capacity_overflow
   974 00000000000106c8    64 FUNC    LOCAL  HIDDEN      1 hashbrown::raw::Fallibility::alloc_err
   975 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS alloc.293e626d0547fb3e-cgu.0
   976 0000000000010708     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<usize>
   977 0000000000010710     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<core::fmt::Error>
   978 0000000000010718    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   979 00000000000110b0   712 FUNC    LOCAL  DEFAULT     1 alloc::string::String::push
   980 0000000000010738   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   981 000000000001a228    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.1
   982 00000000000107a8   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   983 0000000000010808     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_2
   984 0000000000010850   384 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   985 0000000000010880     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_2
   986 00000000000109a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_15
   987 00000000000108b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_5
   988 00000000000108c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_7
   989 0000000000010918     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_9
   990 0000000000010928     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_10
   991 0000000000010b48   360 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   992 0000000000010988     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_13
   993 0000000000010980     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_12
   994 00000000000109b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_16
   995 00000000000109d0   376 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   996 00000000000109f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_2
   997 0000000000010b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_15
   998 0000000000010a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_5
   999 0000000000010a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_7
  1000 0000000000010a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_9
  1001 0000000000010aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_10
  1002 0000000000010b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_13
  1003 0000000000010af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_12
  1004 0000000000010b30     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_16
  1005 0000000000010bc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_2
  1006 0000000000010c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_7
  1007 0000000000010bf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_6
  1008 0000000000010c88     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_9
  1009 0000000000010c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_10
  1010 0000000000010ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_11
  1011 000000000001a258    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.6
  1012 0000000000019018     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.3
  1013 000000000001a268    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.7
  1014 0000000000010f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_4
  1015 0000000000010e28     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_2
  1016 0000000000010ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_12
  1017 0000000000010e98     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_7
  1018 0000000000010eb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_9
  1019 0000000000010f70     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_17
  1020 0000000000010ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_11
  1021 0000000000010f80     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_18
  1022 0000000000010f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_15
  1023 0000000000011058     0 NOTYPE  LOCAL  DEFAULT     1 LBB69_20
  1024 0000000000019045    51 OBJECT  LOCAL  DEFAULT     2 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.35
  1025 000000000001a280    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.36
  1026 000000000001a2a0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.38
  1027 0000000000019034    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.5
  1028 00000000000111a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_9
  1029 0000000000011208     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_3
  1030 0000000000011138     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_4
  1031 0000000000011250     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_5
  1032 00000000000112e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_6
  1033 00000000000111d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_11
  1034 0000000000011370     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_12
  1035 0000000000011330     0 NOTYPE  LOCAL  DEFAULT     1 LBB80_8
  1036 0000000000011418     0 NOTYPE  LOCAL  DEFAULT     1 LBB90_5
  1037 00000000000113d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB90_3
  1038 0000000000019018    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.4
  1039 0000000000019078    24 OBJECT  LOCAL  DEFAULT     2 .Lanon.748abaacfe86ce3af0f9ad2d4c25ff16.37
  1040 0000000000010cb0   136 FUNC    LOCAL  HIDDEN      1 alloc::raw_vec::capacity_overflow
  1041 0000000000010d38    16 FUNC    LOCAL  HIDDEN      1 alloc::alloc::handle_alloc_error
  1042 0000000000011378    24 FUNC    LOCAL  HIDDEN      1 <alloc::string::FromUtf8Error as core::fmt::Display>::fmt
  1043 0000000000010de8   712 FUNC    LOCAL  HIDDEN      1 alloc::fmt::format::format_inner
  1044 0000000000011390   200 FUNC    LOCAL  HIDDEN      1 <alloc::string::String as core::clone::Clone>::clone
  1045 0000000000010d98    40 FUNC    LOCAL  HIDDEN      1 <<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError as core::fmt::Display>::fmt
  1046 0000000000010dc0    40 FUNC    LOCAL  HIDDEN      1 <<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError as core::fmt::Debug>::fmt
  1047 0000000000010d70    40 FUNC    LOCAL  HIDDEN      1 <<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError as core::error::Error>::description
  1048 0000000000010d48    40 FUNC    LOCAL  HIDDEN      1 alloc::alloc::handle_alloc_error::rt_error
  1049 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS core.e331350d01507b11-cgu.0
  1050 0000000000011458    16 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
  1051 0000000000011460     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_1
  1052 0000000000011468     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>
  1053 0000000000011470     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<core::fmt::Error>
  1054 0000000000019090     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.2
  1055 000000000001a368    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.318
  1056 0000000000019125     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.319
  1057 000000000001a2b8    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.165
  1058 0000000000011478   224 FUNC    LOCAL  DEFAULT     1 <core::ops::range::Range<Idx> as core::fmt::Debug>::fmt
  1059 00000000000178a8   672 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for u64>::fmt
  1060 0000000000011548     0 NOTYPE  LOCAL  DEFAULT     1 LBB94_3
  1061 0000000000011558    56 FUNC    LOCAL  DEFAULT     1 <T as core::any::Any>::type_id
  1062 00000000000190d9    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.170
  1063 00000000000115d0  2440 FUNC    LOCAL  DEFAULT     1 core::char::methods::<impl char>::escape_debug_ext
  1064 0000000000011650     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_4
  1065 00000000000116b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_16
  1066 00000000000116e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_10
  1067 0000000000011620     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_12
  1068 0000000000011758     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_9
  1069 0000000000011830     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_17
  1070 0000000000011748     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_7
  1071 0000000000011718     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_11
  1072 0000000000011670     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_14
  1073 00000000000117c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_15
  1074 0000000000011808     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_13
  1075 0000000000011780     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_22
  1076 0000000000011b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_23
  1077 00000000000117a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_28
  1078 0000000000011840     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_25
  1079 0000000000011838     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_18
  1080 0000000000011ee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_27
  1081 0000000000011eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB116_24
  1082 000000000001a638    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.490
  1083 0000000000019104     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.296
  1084 0000000000019103     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.295
  1085 000000000001a2c8    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.225
  1086 0000000000017f60    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
  1087 000000000001a2d8    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.262
  1088 000000000001a2f8    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.267
  1089 0000000000017f30    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
  1090 000000000001a318    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.285
  1091 00000000000123c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_1
  1092 0000000000012360     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_32
  1093 0000000000012810     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_28
  1094 0000000000012708     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_26
  1095 00000000000123e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_4
  1096 0000000000012628     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_18
  1097 0000000000012480     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_8
  1098 0000000000012450     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_7
  1099 0000000000012690     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_23
  1100 00000000000125c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_12
  1101 0000000000012548     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_10
  1102 00000000000124c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_16
  1103 00000000000125e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_14
  1104 0000000000012680     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_22
  1105 0000000000012640     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_20
  1106 00000000000126c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_25
  1107 00000000000126b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_24
  1108 0000000000012738     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_27
  1109 00000000000127a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB209_29
  1110 0000000000012be0     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_18
  1111 00000000000129d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_7
  1112 00000000000190f9     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.288
  1113 00000000000128c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_4
  1114 00000000000190fc     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.289
  1115 00000000000128d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_6
  1116 00000000000190f7     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.284
  1117 00000000000129e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_11
  1118 0000000000012a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_13
  1119 00000000000190fe     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.290
  1120 000000000001a338    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.286
  1121 0000000000012bd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_17
  1122 0000000000019101     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.291
  1123 0000000000012c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB212_4
  1124 0000000000012ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB212_3
  1125 0000000000012ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB212_9
  1126 0000000000012ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB212_7
  1127 0000000000012cd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB212_8
  1128 0000000000012d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_2
  1129 0000000000012d28     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_15
  1130 0000000000012e50     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_8
  1131 0000000000019106     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.297
  1132 0000000000012db8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_5
  1133 0000000000012de0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_7
  1134 0000000000012e68     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_10
  1135 0000000000012ec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_12
  1136 0000000000019107     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.298
  1137 0000000000013018     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_14
  1138 0000000000013070     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_4
  1139 00000000000130a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_3
  1140 0000000000013170     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_11
  1141 0000000000013098     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_7
  1142 00000000000130c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_8
  1143 00000000000130e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_9
  1144 0000000000013130     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_10
  1145 00000000000190bb     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.157
  1146 0000000000019109     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.299
  1147 0000000000019127   200 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.322
  1148 0000000000013180   512 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_char
  1149 0000000000013268     0 NOTYPE  LOCAL  DEFAULT     1 LBB235_3
  1150 0000000000013280     0 NOTYPE  LOCAL  DEFAULT     1 LBB235_4
  1151 00000000000131f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB235_5
  1152 00000000000132c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB235_6
  1153 0000000000013360     0 NOTYPE  LOCAL  DEFAULT     1 LBB235_7
  1154 0000000000013380   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
  1155 000000000001a380    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.325
  1156 00000000000133e8    24 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
  1157 0000000000013400   520 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
  1158 00000000000134f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB243_3
  1159 0000000000013508     0 NOTYPE  LOCAL  DEFAULT     1 LBB243_4
  1160 0000000000013480     0 NOTYPE  LOCAL  DEFAULT     1 LBB243_5
  1161 0000000000013550     0 NOTYPE  LOCAL  DEFAULT     1 LBB243_6
  1162 00000000000135e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB243_7
  1163 0000000000013608   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
  1164 0000000000013808     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_4
  1165 0000000000013a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_7
  1166 0000000000013768     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_3
  1167 00000000000137a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_8
  1168 0000000000013b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_11
  1169 0000000000013840     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_6
  1170 0000000000013880     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_15
  1171 00000000000138f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_18
  1172 0000000000013900     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_19
  1173 0000000000013950     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_21
  1174 0000000000013990     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_24
  1175 00000000000139a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_25
  1176 00000000000139f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_27
  1177 0000000000013a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_12
  1178 0000000000013af0     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_13
  1179 0000000000013b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB256_14
  1180 0000000000013b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_2
  1181 0000000000013ba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_5
  1182 0000000000013b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_4
  1183 0000000000013ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_14
  1184 0000000000013c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_8
  1185 0000000000013c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_13
  1186 0000000000013cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_10
  1187 0000000000013c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_12
  1188 0000000000013d48     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_16
  1189 0000000000014138   192 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral::write_prefix
  1190 0000000000013e40     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_44
  1191 0000000000013e10     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_43
  1192 0000000000013d60     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_17
  1193 0000000000013dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_18
  1194 0000000000013d78     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_19
  1195 0000000000013e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_29
  1196 0000000000013f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_22
  1197 0000000000013fc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_25
  1198 0000000000013db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_21
  1199 0000000000013ee8     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_39
  1200 0000000000013f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_41
  1201 0000000000013fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_24
  1202 0000000000013ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_26
  1203 0000000000014038     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_28
  1204 00000000000140c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_33
  1205 0000000000014118     0 NOTYPE  LOCAL  DEFAULT     1 LBB257_36
  1206 00000000000141b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB258_2
  1207 00000000000141c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB258_3
  1208 00000000000141c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB258_4
  1209 00000000000143c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_2
  1210 0000000000014458     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_25
  1211 0000000000014348     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_12
  1212 0000000000014288     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_6
  1213 0000000000014328     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_11
  1214 0000000000014388     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_15
  1215 0000000000014420     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_19
  1216 00000000000143e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_18
  1217 0000000000014428     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_20
  1218 00000000000145d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_3
  1219 0000000000014438     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_22
  1220 0000000000014450     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_24
  1221 0000000000014490     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_27
  1222 00000000000144d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_29
  1223 0000000000014520     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_34
  1224 0000000000014578     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_31
  1225 0000000000014500     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_33
  1226 00000000000145b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_46
  1227 0000000000014600     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_38
  1228 0000000000014638     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_42
  1229 00000000000145e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_54
  1230 0000000000014610     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_40
  1231 0000000000014630     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_41
  1232 0000000000014668     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_43
  1233 00000000000146b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_45
  1234 0000000000014710     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_49
  1235 0000000000014768     0 NOTYPE  LOCAL  DEFAULT     1 LBB259_52
  1236 0000000000014968     0 NOTYPE  LOCAL  DEFAULT     1 LBB277_3
  1237 0000000000014a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB277_8
  1238 00000000000149d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB277_6
  1239 0000000000014a00     0 NOTYPE  LOCAL  DEFAULT     1 LBB277_7
  1240 0000000000014a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB282_2
  1241 00000000000151a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_17
  1242 0000000000015140     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_12
  1243 0000000000014ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_3
  1244 0000000000014b68     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_46
  1245 0000000000014b70     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_47
  1246 00000000000150e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_7
  1247 0000000000014cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_13
  1248 0000000000014c30     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_5
  1249 0000000000014d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_14
  1250 0000000000014f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_27
  1251 0000000000014dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_23
  1252 0000000000014da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_22
  1253 0000000000014df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_28
  1254 0000000000014f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_26
  1255 00000000000150d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_48
  1256 0000000000014e80     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_32
  1257 0000000000015020     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_31
  1258 0000000000014e90     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_33
  1259 0000000000015068     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_40
  1260 0000000000014fb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_38
  1261 000000000001a3c8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.334
  1262 0000000000014f70     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_36
  1263 0000000000014fe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_39
  1264 000000000001a650    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.493
  1265 0000000000015000     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_42
  1266 0000000000015040     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_41
  1267 00000000000151b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_10
  1268 0000000000015200     0 NOTYPE  LOCAL  DEFAULT     1 LBB296_11
  1269 000000000001a3b0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.333
  1270 00000000000154b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_15
  1271 0000000000015300     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_4
  1272 0000000000015420     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_3
  1273 0000000000015310     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_5
  1274 0000000000015490     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_14
  1275 00000000000153b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_10
  1276 0000000000015480     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_16
  1277 0000000000015380     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_8
  1278 00000000000153e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_11
  1279 0000000000015440     0 NOTYPE  LOCAL  DEFAULT     1 LBB298_12
  1280 000000000001a3e0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.349
  1281 000000000001a400    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.351
  1282 000000000001a420    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.354
  1283 0000000000015798     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_2
  1284 00000000000157a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_4
  1285 0000000000015d98     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_57
  1286 0000000000015870     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_6
  1287 00000000000157f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_23
  1288 0000000000015dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_25
  1289 0000000000015d68     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_58
  1290 0000000000015840     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_26
  1291 0000000000015988     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_17
  1292 0000000000015970     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_15
  1293 0000000000015920     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_10
  1294 00000000000158d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_9
  1295 0000000000015978     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_16
  1296 0000000000015928     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_11
  1297 00000000000192bf   256 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.396
  1298 00000000000159f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_22
  1299 0000000000015b50     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_21
  1300 0000000000015df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_44
  1301 0000000000015c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_47
  1302 0000000000015a60     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_48
  1303 0000000000015c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_45
  1304 0000000000015a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_49
  1305 0000000000015e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_52
  1306 0000000000015e70     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_56
  1307 0000000000015e20     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_30
  1308 0000000000015cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_32
  1309 0000000000015bb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_33
  1310 0000000000015ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_31
  1311 0000000000015bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_34
  1312 0000000000015e98     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_40
  1313 0000000000015d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_37
  1314 0000000000015d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_35
  1315 0000000000015dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB322_59
  1316 000000000001a470    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.397
  1317 000000000001a4b8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.400
  1318 000000000001a488    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.398
  1319 000000000001a4d0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.401
  1320 000000000001a4e8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.402
  1321 000000000001a4a0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.399
  1322 0000000000016338     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_16
  1323 0000000000015f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_9
  1324 0000000000015fc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_4
  1325 0000000000015f60     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_8
  1326 0000000000016038     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_14
  1327 0000000000016060     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_11
  1328 0000000000015ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_6
  1329 0000000000016018     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_13
  1330 0000000000016298     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_15
  1331 0000000000016098     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_24
  1332 00000000000161b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_26
  1333 0000000000016440     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_32
  1334 00000000000163a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_30
  1335 00000000000164a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_33
  1336 00000000000162d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_22
  1337 0000000000016348     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_17
  1338 0000000000016378     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_19
  1339 00000000000163d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB324_31
  1340 0000000000016580     0 NOTYPE  LOCAL  DEFAULT     1 LBB326_2
  1341 000000000001a440    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.374
  1342 0000000000016600     0 NOTYPE  LOCAL  DEFAULT     1 LBB326_3
  1343 000000000001a460    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.376
  1344 0000000000016758     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_5
  1345 0000000000016708     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_7
  1346 0000000000016890     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_9
  1347 00000000000167a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_12
  1348 00000000000168d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_10
  1349 00000000000167b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_14
  1350 000000000001a590    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.437
  1351 0000000000016ee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_15
  1352 00000000000193bf     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.426
  1353 00000000000168e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_42
  1354 00000000000169e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_16
  1355 000000000001a550    64 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.435
  1356 0000000000016a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_20
  1357 0000000000016a00     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_19
  1358 0000000000016a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_21
  1359 0000000000016b60     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_32
  1360 0000000000016a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_24
  1361 0000000000016a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_26
  1362 0000000000016ae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_28
  1363 000000000001a5c0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.439
  1364 0000000000016b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_29
  1365 0000000000016b58     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_31
  1366 0000000000016b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_37
  1367 0000000000016ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_35
  1368 0000000000016d20     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_36
  1369 0000000000016cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_43
  1370 0000000000016d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_44
  1371 0000000000016c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_40
  1372 0000000000016d40     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_45
  1373 0000000000019090    43 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.95
  1374 0000000000016d98     0 NOTYPE  LOCAL  DEFAULT     1 LBB347_49
  1375 000000000001a500    80 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.431
  1376 0000000000016f10   768 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::check
  1377 0000000000017080     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_3
  1378 0000000000016fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_2
  1379 0000000000016f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_6
  1380 0000000000016ff0     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_8
  1381 00000000000171b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_10
  1382 00000000000171e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_11
  1383 0000000000017008     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_21
  1384 0000000000017050     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_12
  1385 0000000000017168     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_19
  1386 00000000000170c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_5
  1387 0000000000017108     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_13
  1388 0000000000017138     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_15
  1389 0000000000017178     0 NOTYPE  LOCAL  DEFAULT     1 LBB365_16
  1390 000000000001a5d8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.466
  1391 000000000001a5f0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.467
  1392 0000000000017378     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_7
  1393 0000000000017308     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_5
  1394 0000000000017298     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_4
  1395 0000000000017380     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_8
  1396 000000000001957b   450 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.470
  1397 000000000001945f    88 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.468
  1398 00000000000194b7   196 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.469
  1399 0000000000017370     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_6
  1400 00000000000198ac   303 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.473
  1401 000000000001973d    80 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.471
  1402 000000000001978d   287 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.472
  1403 00000000000173c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_10
  1404 0000000000017408     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_12
  1405 0000000000017448     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_14
  1406 0000000000017480     0 NOTYPE  LOCAL  DEFAULT     1 LBB366_16
  1407 0000000000017b48   712 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::fmt_u64
  1408 0000000000017630     0 NOTYPE  LOCAL  DEFAULT     1 LBB594_1
  1409 00000000000175d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB594_5
  1410 0000000000017660     0 NOTYPE  LOCAL  DEFAULT     1 LBB594_2
  1411 00000000000176a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB594_6
  1412 00000000000177b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB595_1
  1413 0000000000017750     0 NOTYPE  LOCAL  DEFAULT     1 LBB595_5
  1414 00000000000177e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB595_2
  1415 0000000000017828     0 NOTYPE  LOCAL  DEFAULT     1 LBB595_6
  1416 0000000000017908     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_4
  1417 00000000000178e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_8
  1418 00000000000179b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_11
  1419 0000000000017b40     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_16
  1420 0000000000017978     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_5
  1421 0000000000017930     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_7
  1422 0000000000017a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_2
  1423 0000000000017a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_12
  1424 00000000000179d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_14
  1425 0000000000017a58     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_9
  1426 0000000000017ac8     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_15
  1427 0000000000017aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB611_3
  1428 0000000000017c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_4
  1429 0000000000017b68     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_2
  1430 0000000000017cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_6
  1431 0000000000017c68     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_5
  1432 0000000000017c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_8
  1433 0000000000017d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_7
  1434 0000000000017da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB612_9
  1435 0000000000019a1d     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.815
  1436 000000000001a620    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.479
  1437 000000000001a608    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.478
  1438 0000000000018020     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_1
  1439 0000000000017fd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_5
  1440 0000000000018000     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_8
  1441 00000000000180b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_9
  1442 00000000000180c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_10
  1443 0000000000019a24   132 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS
  1444 0000000000018090     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_3
  1445 0000000000018290     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_12
  1446 0000000000018160     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_14
  1447 0000000000018180     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_15
  1448 0000000000018250     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_22
  1449 0000000000019aa8   727 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::OFFSETS
  1450 00000000000181e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_17
  1451 0000000000018260     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_19
  1452 0000000000018248     0 NOTYPE  LOCAL  DEFAULT     1 LBB767_21
  1453 00000000000190bc    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.159
  1454 00000000000190d7     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.164
  1455 00000000000190e4    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.266
  1456 00000000000190f6     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.280
  1457 000000000001910a    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.317
  1458 00000000000191ef    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.347
  1459 0000000000019201    34 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.348
  1460 0000000000019223    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.352
  1461 0000000000019239    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.353
  1462 0000000000019246    26 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.372
  1463 0000000000019260    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.373
  1464 0000000000019272    42 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.375
  1465 000000000001929c    35 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.395
  1466 00000000000193c4    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.427
  1467 00000000000193cf    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.428
  1468 00000000000193f5     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.430
  1469 00000000000193fb    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.432
  1470 0000000000019409    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.436
  1471 000000000001941f    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.438
  1472 000000000001943a    37 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.465
  1473 00000000000199db    40 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.474
  1474 0000000000019a03    26 OBJECT  LOCAL  DEFAULT     2 .Lanon.5e304f3f7bed6973b6eadc3461257e0f.489
  1475 0000000000012088   144 FUNC    LOCAL  HIDDEN      1 core::panicking::panic
  1476 0000000000015680   224 FUNC    LOCAL  HIDDEN      1 core::slice::index::slice_index_order_fail
  1477 0000000000012018   112 FUNC    LOCAL  HIDDEN      1 core::panicking::panic_fmt
  1478 00000000000155a0   224 FUNC    LOCAL  HIDDEN      1 core::slice::index::slice_end_index_len_fail
  1479 0000000000017ec8    40 FUNC    LOCAL  HIDDEN      1 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
  1480 00000000000121f8   256 FUNC    LOCAL  HIDDEN      1 core::result::unwrap_failed
  1481 0000000000011590    64 FUNC    LOCAL  HIDDEN      1 <core::cell::BorrowError as core::fmt::Debug>::fmt
  1482 00000000000147c0    32 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::debug_lower_hex
  1483 00000000000147e0    32 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::debug_upper_hex
  1484 0000000000017728   384 FUNC    LOCAL  HIDDEN      1 core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt
  1485 00000000000175a8   384 FUNC    LOCAL  HIDDEN      1 core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt
  1486 0000000000017ea0    40 FUNC    LOCAL  HIDDEN      1 core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
  1487 0000000000014800   104 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::debug_struct
  1488 0000000000012818  1000 FUNC    LOCAL  HIDDEN      1 core::fmt::builders::DebugStruct::field
  1489 0000000000012c00   248 FUNC    LOCAL  HIDDEN      1 core::fmt::builders::DebugStruct::finish
  1490 0000000000014790    48 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::write_str
  1491 0000000000014868   432 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::debug_struct_field2_finish
  1492 0000000000014aa8  1936 FUNC    LOCAL  HIDDEN      1 <str as core::fmt::Debug>::fmt
  1493 0000000000017e10    40 FUNC    LOCAL  HIDDEN      1 core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
  1494 0000000000017ec8    40 FUNC    LOCAL  HIDDEN      1 core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt
  1495 00000000000136c8  1096 FUNC    LOCAL  HIDDEN      1 core::fmt::write
  1496 0000000000015238    48 FUNC    LOCAL  HIDDEN      1 <str as core::fmt::Display>::fmt
  1497 0000000000015760  1888 FUNC    LOCAL  HIDDEN      1 core::str::converts::from_utf8
  1498 0000000000013678    80 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::new
  1499 00000000000154c0   224 FUNC    LOCAL  HIDDEN      1 core::slice::index::slice_start_index_len_fail
  1500 0000000000012118   224 FUNC    LOCAL  HIDDEN      1 core::panicking::panic_bounds_check
  1501 0000000000011f58   192 FUNC    LOCAL  HIDDEN      1 core::option::expect_failed
  1502 0000000000017ef0    64 FUNC    LOCAL  HIDDEN      1 <core::fmt::Error as core::fmt::Debug>::fmt
  1503 00000000000141f8  1432 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::pad
  1504 0000000000017728   384 FUNC    LOCAL  HIDDEN      1 core::fmt::num::<impl core::fmt::UpperHex for i32>::fmt
  1505 00000000000175a8   384 FUNC    LOCAL  HIDDEN      1 core::fmt::num::<impl core::fmt::LowerHex for i32>::fmt
  1506 0000000000017e38   104 FUNC    LOCAL  HIDDEN      1 core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt
  1507 0000000000014a18   144 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::debug_tuple
  1508 0000000000012cf8   816 FUNC    LOCAL  HIDDEN      1 core::fmt::builders::DebugTuple::field
  1509 0000000000013028   344 FUNC    LOCAL  HIDDEN      1 core::fmt::builders::DebugTuple::finish
  1510 0000000000017f90   816 FUNC    LOCAL  HIDDEN      1 core::unicode::unicode_data::grapheme_extend::lookup
  1511 0000000000017210   920 FUNC    LOCAL  HIDDEN      1 core::unicode::printable::is_printable
  1512 0000000000016630    16 FUNC    LOCAL  HIDDEN      1 core::str::slice_error_fail
  1513 00000000000164a8   392 FUNC    LOCAL  HIDDEN      1 <core::str::error::Utf8Error as core::fmt::Display>::fmt
  1514 0000000000013b10  1576 FUNC    LOCAL  HIDDEN      1 core::fmt::Formatter::pad_integral
  1515 00000000000122f8  1312 FUNC    LOCAL  HIDDEN      1 <core::fmt::builders::PadAdapter as core::fmt::Write>::write_str
  1516 0000000000015ec0  1512 FUNC    LOCAL  HIDDEN      1 core::str::count::do_count_chars
  1517 0000000000015268   600 FUNC    LOCAL  HIDDEN      1 <char as core::fmt::Debug>::fmt
  1518 0000000000016640  2256 FUNC    LOCAL  HIDDEN      1 core::str::slice_error_fail_rt
  1519 0000000000014790    48 FUNC    LOCAL  HIDDEN      1 <core::fmt::Formatter as core::fmt::Write>::write_str
  1520 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.020
  1521 00000000000183b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_4
  1522 0000000000018360     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1523 0000000000018318     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
  1524 00000000000183a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1525 0000000000018368     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1526 0000000000018518     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_5
  1527 0000000000018530     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1528 0000000000018490     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_11
  1529 0000000000018450     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_4
  1530 0000000000018508     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_14
  1531 00000000000184d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1532 0000000000018598     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1533 0000000000018550     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_8
  1534 00000000000185a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_10
  1535 00000000000186d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
  1536 00000000000186a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_4
  1537 0000000000018670     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
  1538 00000000000186f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
  1539 00000000000186a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
  1540 0000000000018800     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_8
  1541 00000000000187a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_6
  1542 0000000000018760     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_3
  1543 0000000000018798     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_5
  1544 0000000000018848     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
  1545 00000000000187a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
  1546 00000000000187e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
  1547 0000000000018838     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
  1548 0000000000018700   352 FUNC    LOCAL  HIDDEN      1 memcmp
  1549 00000000000182c0   272 FUNC    LOCAL  HIDDEN      1 memcpy
  1550 00000000000183d0   536 FUNC    LOCAL  HIDDEN      1 memmove
  1551 00000000000185e8   280 FUNC    LOCAL  HIDDEN      1 memset
  1552 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.106
  1553 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.010
  1554 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.118
  1555 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.001
  1556 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.124
  1557 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.127
  1558 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.131
  1559 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.132
  1560 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.133
  1561 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.139
  1562 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.003
  1563 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.146
  1564 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.147
  1565 0000000000018920     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_2
  1566 0000000000018958     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_4
  1567 0000000000018860   376 FUNC    LOCAL  HIDDEN      1 __multi3
  1568 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.148
  1569 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.155
  1570 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.156
  1571 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.170
  1572 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.175
  1573 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.181
  1574 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.185
  1575 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.186
  1576 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.203
  1577 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.006
  1578 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.204
  1579 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.206
  1580 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.211
  1581 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.216
  1582 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.226
  1583 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.231
  1584 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.248
  1585 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.39567c74ea00e13b-cgu.254
  1586 000000000001a668     0 NOTYPE  LOCAL  HIDDEN      4 _DYNAMIC
  1587 0000000000007778   120 FUNC    GLOBAL DEFAULT     1 custom_panic
  1588 00000000000059c8  6880 FUNC    GLOBAL DEFAULT     1 entrypoint
  1589 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
  1590 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
  1591 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
  1592 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memmove_
  1593 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
  1594 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_
There are no section groups in this file.

/Users/deepanshuhooda/work/rbpf-strings/target/sbf-solana-solana/release/ebpf.so	file format elf64-bpf

Disassembly of section .text

0000000000000120 <core::ptr::drop_in_place<std::io::error::Error>>
      36	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      37	bf 21 00 00 00 00 00 00	r1 = r2
      38	57 01 00 00 03 00 00 00	r1 &= 0x3
      39	bf 13 00 00 00 00 00 00	r3 = r1
      40	07 03 00 00 fe ff ff ff	r3 += -0x2
      41	b7 04 00 00 02 00 00 00	r4 = 0x2
      42	2d 34 05 00 00 00 00 00	if r4 > r3 goto +0x5 <LBB0_3>
      43	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB0_3>
      44	79 21 ff ff 00 00 00 00	r1 = *(u64 *)(r2 - 0x1)
      45	79 22 07 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x7)
      46	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
      47	8d 00 00 00 02 00 00 00	callx r2

0000000000000180 <LBB0_3>
      48	95 00 00 00 00 00 00 00	exit

0000000000000188 <core::ptr::drop_in_place<core::cell::BorrowError>>
      49	95 00 00 00 00 00 00 00	exit

0000000000000190 <core::hash::BuildHasher::hash_one>
      50	18 04 00 00 6d 6f 64 6e 00 00 00 00 61 72 6f 64	r4 = 0x646f72616e646f6d ll
      52	bf 25 00 00 00 00 00 00	r5 = r2
      53	af 45 00 00 00 00 00 00	r5 ^= r4
      54	18 04 00 00 73 65 74 79 00 00 00 00 62 64 65 74	r4 = 0x7465646279746573 ll
      56	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
      57	af 42 00 00 00 00 00 00	r2 ^= r4
      58	b7 04 00 00 00 00 00 00	r4 = 0x0
      59	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
      60	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
      61	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
      62	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
      63	7b 5a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r5
      64	18 02 00 00 61 72 65 6e 00 00 00 00 65 67 79 6c	r2 = 0x6c7967656e657261 ll
      66	bf 14 00 00 00 00 00 00	r4 = r1
      67	af 24 00 00 00 00 00 00	r4 ^= r2
      68	7b 4a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r4
      69	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
      70	18 02 00 00 75 65 73 70 00 00 00 00 65 6d 6f 73	r2 = 0x736f6d6570736575 ll
      72	af 21 00 00 00 00 00 00	r1 ^= r2
      73	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
      74	79 34 10 00 00 00 00 00	r4 = *(u64 *)(r3 + 0x10)
      75	79 32 00 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x0)
      76	bf a6 00 00 00 00 00 00	r6 = r10
      77	07 06 00 00 b0 ff ff ff	r6 += -0x50
      78	bf 61 00 00 00 00 00 00	r1 = r6
      79	bf 43 00 00 00 00 00 00	r3 = r4
      80	85 10 00 00 97 05 00 00	call 0x597 ; <<core::hash::sip::Hasher<S> as core::hash::Hasher>::write>
      81	b7 01 00 00 ff 00 00 00	r1 = 0xff
      82	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
      83	bf a2 00 00 00 00 00 00	r2 = r10
      84	07 02 00 00 ff ff ff ff	r2 += -0x1
      85	bf 61 00 00 00 00 00 00	r1 = r6
      86	b7 03 00 00 01 00 00 00	r3 = 0x1
      87	85 10 00 00 90 05 00 00	call 0x590 ; <<core::hash::sip::Hasher<S> as core::hash::Hasher>::write>
      88	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
      89	79 a5 c0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x40)
      90	bf 53 00 00 00 00 00 00	r3 = r5
      91	0f 13 00 00 00 00 00 00	r3 += r1
      92	bf 51 00 00 00 00 00 00	r1 = r5
      93	77 01 00 00 33 00 00 00	r1 >>= 0x33
      94	67 05 00 00 0d 00 00 00	r5 <<= 0xd
      95	4f 15 00 00 00 00 00 00	r5 |= r1
      96	af 35 00 00 00 00 00 00	r5 ^= r3
      97	bf 51 00 00 00 00 00 00	r1 = r5
      98	77 01 00 00 2f 00 00 00	r1 >>= 0x2f
      99	bf 50 00 00 00 00 00 00	r0 = r5
     100	67 00 00 00 11 00 00 00	r0 <<= 0x11
     101	4f 10 00 00 00 00 00 00	r0 |= r1
     102	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
     103	67 04 00 00 38 00 00 00	r4 <<= 0x38
     104	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     105	4f 14 00 00 00 00 00 00	r4 |= r1
     106	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
     107	bf 41 00 00 00 00 00 00	r1 = r4
     108	af 21 00 00 00 00 00 00	r1 ^= r2
     109	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     110	bf 17 00 00 00 00 00 00	r7 = r1
     111	0f 27 00 00 00 00 00 00	r7 += r2
     112	bf 72 00 00 00 00 00 00	r2 = r7
     113	0f 52 00 00 00 00 00 00	r2 += r5
     114	bf 26 00 00 00 00 00 00	r6 = r2
     115	af 06 00 00 00 00 00 00	r6 ^= r0
     116	bf 65 00 00 00 00 00 00	r5 = r6
     117	77 05 00 00 33 00 00 00	r5 >>= 0x33
     118	bf 60 00 00 00 00 00 00	r0 = r6
     119	67 00 00 00 0d 00 00 00	r0 <<= 0xd
     120	4f 50 00 00 00 00 00 00	r0 |= r5
     121	bf 35 00 00 00 00 00 00	r5 = r3
     122	77 05 00 00 20 00 00 00	r5 >>= 0x20
     123	67 03 00 00 20 00 00 00	r3 <<= 0x20
     124	4f 53 00 00 00 00 00 00	r3 |= r5
     125	bf 15 00 00 00 00 00 00	r5 = r1
     126	77 05 00 00 30 00 00 00	r5 >>= 0x30
     127	67 01 00 00 10 00 00 00	r1 <<= 0x10
     128	4f 51 00 00 00 00 00 00	r1 |= r5
     129	af 71 00 00 00 00 00 00	r1 ^= r7
     130	bf 17 00 00 00 00 00 00	r7 = r1
     131	0f 37 00 00 00 00 00 00	r7 += r3
     132	bf 75 00 00 00 00 00 00	r5 = r7
     133	af 45 00 00 00 00 00 00	r5 ^= r4
     134	0f 65 00 00 00 00 00 00	r5 += r6
     135	bf 13 00 00 00 00 00 00	r3 = r1
     136	77 03 00 00 2b 00 00 00	r3 >>= 0x2b
     137	67 01 00 00 15 00 00 00	r1 <<= 0x15
     138	4f 31 00 00 00 00 00 00	r1 |= r3
     139	bf 54 00 00 00 00 00 00	r4 = r5
     140	af 04 00 00 00 00 00 00	r4 ^= r0
     141	bf 43 00 00 00 00 00 00	r3 = r4
     142	77 03 00 00 2f 00 00 00	r3 >>= 0x2f
     143	bf 46 00 00 00 00 00 00	r6 = r4
     144	67 06 00 00 11 00 00 00	r6 <<= 0x11
     145	4f 36 00 00 00 00 00 00	r6 |= r3
     146	af 71 00 00 00 00 00 00	r1 ^= r7
     147	bf 23 00 00 00 00 00 00	r3 = r2
     148	77 03 00 00 20 00 00 00	r3 >>= 0x20
     149	67 02 00 00 20 00 00 00	r2 <<= 0x20
     150	4f 32 00 00 00 00 00 00	r2 |= r3
     151	a7 02 00 00 ff 00 00 00	r2 ^= 0xff
     152	bf 10 00 00 00 00 00 00	r0 = r1
     153	0f 20 00 00 00 00 00 00	r0 += r2
     154	0f 04 00 00 00 00 00 00	r4 += r0
     155	bf 43 00 00 00 00 00 00	r3 = r4
     156	af 63 00 00 00 00 00 00	r3 ^= r6
     157	bf 36 00 00 00 00 00 00	r6 = r3
     158	77 06 00 00 33 00 00 00	r6 >>= 0x33
     159	bf 32 00 00 00 00 00 00	r2 = r3
     160	67 02 00 00 0d 00 00 00	r2 <<= 0xd
     161	4f 62 00 00 00 00 00 00	r2 |= r6
     162	bf 56 00 00 00 00 00 00	r6 = r5
     163	77 06 00 00 20 00 00 00	r6 >>= 0x20
     164	67 05 00 00 20 00 00 00	r5 <<= 0x20
     165	4f 65 00 00 00 00 00 00	r5 |= r6
     166	bf 16 00 00 00 00 00 00	r6 = r1
     167	77 06 00 00 30 00 00 00	r6 >>= 0x30
     168	67 01 00 00 10 00 00 00	r1 <<= 0x10
     169	4f 61 00 00 00 00 00 00	r1 |= r6
     170	af 01 00 00 00 00 00 00	r1 ^= r0
     171	bf 10 00 00 00 00 00 00	r0 = r1
     172	0f 50 00 00 00 00 00 00	r0 += r5
     173	0f 03 00 00 00 00 00 00	r3 += r0
     174	af 32 00 00 00 00 00 00	r2 ^= r3
     175	bf 26 00 00 00 00 00 00	r6 = r2
     176	77 06 00 00 2f 00 00 00	r6 >>= 0x2f
     177	bf 25 00 00 00 00 00 00	r5 = r2
     178	67 05 00 00 11 00 00 00	r5 <<= 0x11
     179	4f 65 00 00 00 00 00 00	r5 |= r6
     180	bf 16 00 00 00 00 00 00	r6 = r1
     181	77 06 00 00 2b 00 00 00	r6 >>= 0x2b
     182	67 01 00 00 15 00 00 00	r1 <<= 0x15
     183	4f 61 00 00 00 00 00 00	r1 |= r6
     184	af 01 00 00 00 00 00 00	r1 ^= r0
     185	bf 40 00 00 00 00 00 00	r0 = r4
     186	77 00 00 00 20 00 00 00	r0 >>= 0x20
     187	67 04 00 00 20 00 00 00	r4 <<= 0x20
     188	4f 04 00 00 00 00 00 00	r4 |= r0
     189	bf 10 00 00 00 00 00 00	r0 = r1
     190	0f 40 00 00 00 00 00 00	r0 += r4
     191	0f 02 00 00 00 00 00 00	r2 += r0
     192	af 25 00 00 00 00 00 00	r5 ^= r2
     193	bf 56 00 00 00 00 00 00	r6 = r5
     194	77 06 00 00 33 00 00 00	r6 >>= 0x33
     195	bf 54 00 00 00 00 00 00	r4 = r5
     196	67 04 00 00 0d 00 00 00	r4 <<= 0xd
     197	4f 64 00 00 00 00 00 00	r4 |= r6
     198	bf 36 00 00 00 00 00 00	r6 = r3
     199	77 06 00 00 20 00 00 00	r6 >>= 0x20
     200	67 03 00 00 20 00 00 00	r3 <<= 0x20
     201	4f 63 00 00 00 00 00 00	r3 |= r6
     202	bf 16 00 00 00 00 00 00	r6 = r1
     203	77 06 00 00 30 00 00 00	r6 >>= 0x30
     204	67 01 00 00 10 00 00 00	r1 <<= 0x10
     205	4f 61 00 00 00 00 00 00	r1 |= r6
     206	af 01 00 00 00 00 00 00	r1 ^= r0
     207	bf 10 00 00 00 00 00 00	r0 = r1
     208	0f 30 00 00 00 00 00 00	r0 += r3
     209	0f 05 00 00 00 00 00 00	r5 += r0
     210	af 54 00 00 00 00 00 00	r4 ^= r5
     211	bf 13 00 00 00 00 00 00	r3 = r1
     212	77 03 00 00 2b 00 00 00	r3 >>= 0x2b
     213	67 01 00 00 15 00 00 00	r1 <<= 0x15
     214	4f 31 00 00 00 00 00 00	r1 |= r3
     215	af 01 00 00 00 00 00 00	r1 ^= r0
     216	bf 45 00 00 00 00 00 00	r5 = r4
     217	77 05 00 00 2f 00 00 00	r5 >>= 0x2f
     218	bf 43 00 00 00 00 00 00	r3 = r4
     219	67 03 00 00 11 00 00 00	r3 <<= 0x11
     220	4f 53 00 00 00 00 00 00	r3 |= r5
     221	bf 15 00 00 00 00 00 00	r5 = r1
     222	77 05 00 00 30 00 00 00	r5 >>= 0x30
     223	bf 10 00 00 00 00 00 00	r0 = r1
     224	67 00 00 00 10 00 00 00	r0 <<= 0x10
     225	4f 50 00 00 00 00 00 00	r0 |= r5
     226	bf 25 00 00 00 00 00 00	r5 = r2
     227	77 05 00 00 20 00 00 00	r5 >>= 0x20
     228	67 02 00 00 20 00 00 00	r2 <<= 0x20
     229	4f 52 00 00 00 00 00 00	r2 |= r5
     230	0f 21 00 00 00 00 00 00	r1 += r2
     231	af 10 00 00 00 00 00 00	r0 ^= r1
     232	bf 02 00 00 00 00 00 00	r2 = r0
     233	77 02 00 00 2b 00 00 00	r2 >>= 0x2b
     234	67 00 00 00 15 00 00 00	r0 <<= 0x15
     235	4f 20 00 00 00 00 00 00	r0 |= r2
     236	af 30 00 00 00 00 00 00	r0 ^= r3
     237	0f 14 00 00 00 00 00 00	r4 += r1
     238	bf 41 00 00 00 00 00 00	r1 = r4
     239	77 01 00 00 20 00 00 00	r1 >>= 0x20
     240	bf 42 00 00 00 00 00 00	r2 = r4
     241	67 02 00 00 20 00 00 00	r2 <<= 0x20
     242	4f 12 00 00 00 00 00 00	r2 |= r1
     243	af 20 00 00 00 00 00 00	r0 ^= r2
     244	af 40 00 00 00 00 00 00	r0 ^= r4
     245	95 00 00 00 00 00 00 00	exit

00000000000007b0 <core::slice::sort::insertion_sort_shift_left>
     246	bf 38 00 00 00 00 00 00	r8 = r3
     247	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     248	bf 81 00 00 00 00 00 00	r1 = r8
     249	07 01 00 00 ff ff ff ff	r1 += -0x1
     250	3d 21 56 00 00 00 00 00	if r1 >= r2 goto +0x56 <LBB3_4>
     251	3d 28 54 00 00 00 00 00	if r8 >= r2 goto +0x54 <LBB3_5>
     252	bf 83 00 00 00 00 00 00	r3 = r8
     253	67 03 00 00 04 00 00 00	r3 <<= 0x4
     254	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
     255	0f 13 00 00 00 00 00 00	r3 += r1
     256	07 03 00 00 f0 ff ff ff	r3 += -0x10
     257	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
     258	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
     259	05 00 0c 00 00 00 00 00	goto +0xc <LBB3_3>

0000000000000820 <LBB3_18>
     260	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
     261	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
     262	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
     263	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
     264	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)

0000000000000848 <LBB3_19>
     265	07 08 00 00 01 00 00 00	r8 += 0x1
     266	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     267	07 01 00 00 10 00 00 00	r1 += 0x10
     268	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     269	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
     270	2d 82 01 00 00 00 00 00	if r2 > r8 goto +0x1 <LBB3_3>
     271	05 00 40 00 00 00 00 00	goto +0x40 <LBB3_5>

0000000000000880 <LBB3_3>
     272	bf 81 00 00 00 00 00 00	r1 = r8
     273	67 01 00 00 04 00 00 00	r1 <<= 0x4
     274	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)
     275	0f 17 00 00 00 00 00 00	r7 += r1
     276	79 71 f0 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x10)
     277	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
     278	79 74 00 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x0)
     279	79 46 10 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x10)
     280	bf 63 00 00 00 00 00 00	r3 = r6
     281	2d 62 01 00 00 00 00 00	if r2 > r6 goto +0x1 <LBB3_7>
     282	bf 23 00 00 00 00 00 00	r3 = r2

00000000000008d8 <LBB3_7>
     283	bf 69 00 00 00 00 00 00	r9 = r6
     284	1f 29 00 00 00 00 00 00	r9 -= r2
     285	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     286	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
     287	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
     288	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     289	85 10 00 00 be 2f 00 00	call 0x2fbe ; <memcmp>
     290	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB3_9>
     291	bf 09 00 00 00 00 00 00	r9 = r0

0000000000000920 <LBB3_9>
     292	65 09 e4 ff ff ff ff ff	if r9 s> -0x1 goto -0x1c <LBB3_19>
     293	bf 71 00 00 00 00 00 00	r1 = r7
     294	07 01 00 00 f0 ff ff ff	r1 += -0x10
     295	bf 82 00 00 00 00 00 00	r2 = r8
     296	67 02 00 00 04 00 00 00	r2 <<= 0x4
     297	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
     298	0f 23 00 00 00 00 00 00	r3 += r2
     299	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
     300	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
     301	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
     302	7b 27 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r2
     303	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     304	7b 27 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r2
     305	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
     306	15 08 d1 ff 01 00 00 00	if r8 == 0x1 goto -0x2f <LBB3_18>
     307	b7 07 00 00 01 00 00 00	r7 = 0x1
     308	79 a9 e0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x20)
     309	05 00 0d 00 00 00 00 00	goto +0xd <LBB3_12>

00000000000009b0 <LBB3_16>
     310	bf 91 00 00 00 00 00 00	r1 = r9
     311	65 08 cc ff ff ff ff ff	if r8 s> -0x1 goto -0x34 <LBB3_18>
     312	bf 92 00 00 00 00 00 00	r2 = r9
     313	07 02 00 00 f0 ff ff ff	r2 += -0x10
     314	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     315	7b 19 08 00 00 00 00 00	*(u64 *)(r9 + 0x8) = r1
     316	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
     317	7b 19 00 00 00 00 00 00	*(u64 *)(r9 + 0x0) = r1
     318	07 07 00 00 01 00 00 00	r7 += 0x1
     319	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
     320	bf 29 00 00 00 00 00 00	r9 = r2
     321	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
     322	1d 72 c1 ff 00 00 00 00	if r2 == r7 goto -0x3f <LBB3_18>

0000000000000a18 <LBB3_12>
     323	79 91 f0 ff 00 00 00 00	r1 = *(u64 *)(r9 - 0x10)
     324	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
     325	bf 63 00 00 00 00 00 00	r3 = r6
     326	2d 62 01 00 00 00 00 00	if r2 > r6 goto +0x1 <LBB3_14>
     327	bf 23 00 00 00 00 00 00	r3 = r2

0000000000000a40 <LBB3_14>
     328	bf 68 00 00 00 00 00 00	r8 = r6
     329	1f 28 00 00 00 00 00 00	r8 -= r2
     330	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     331	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
     332	85 10 00 00 93 2f 00 00	call 0x2f93 ; <memcmp>
     333	15 00 e8 ff 00 00 00 00	if r0 == 0x0 goto -0x18 <LBB3_16>
     334	bf 08 00 00 00 00 00 00	r8 = r0
     335	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB3_16>

0000000000000a80 <LBB3_5>
     336	95 00 00 00 00 00 00 00	exit

0000000000000a88 <LBB3_4>
     337	18 01 00 00 96 8a 01 00 00 00 00 00 00 00 00 00	r1 = 0x18a96 ll
     339	b7 02 00 00 2e 00 00 00	r2 = 0x2e
     340	18 03 00 00 68 9e 01 00 00 00 00 00 00 00 00 00	r3 = 0x19e68 ll
     342	85 10 00 00 ba 22 00 00	call 0x22ba ; <core::panicking::panic>
     343	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000ac0 <alloc::raw_vec::finish_grow>
     344	bf 37 00 00 00 00 00 00	r7 = r3
     345	bf 16 00 00 00 00 00 00	r6 = r1
     346	15 02 07 00 00 00 00 00	if r2 == 0x0 goto +0x7 <LBB4_5>
     347	79 41 08 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x8)
     348	15 01 26 00 00 00 00 00	if r1 == 0x0 goto +0x26 <LBB4_14>
     349	79 43 10 00 00 00 00 00	r3 = *(u64 *)(r4 + 0x10)
     350	55 03 07 00 00 00 00 00	if r3 != 0x0 goto +0x7 <LBB4_6>
     351	55 07 42 00 00 00 00 00	if r7 != 0x0 goto +0x42 <LBB4_25>

0000000000000b00 <LBB4_4>
     352	b7 07 00 00 00 00 00 00	r7 = 0x0
     353	05 00 3c 00 00 00 00 00	goto +0x3c <LBB4_24>

0000000000000b10 <LBB4_5>
     354	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     355	b7 01 00 00 00 00 00 00	r1 = 0x0
     356	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     357	05 00 54 00 00 00 00 00	goto +0x54 <LBB4_34>

0000000000000b30 <LBB4_6>
     358	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
     360	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     361	18 05 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r5 = 0x300008000 ll
     363	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB4_8>
     364	bf 15 00 00 00 00 00 00	r5 = r1

0000000000000b68 <LBB4_8>
     365	bf 51 00 00 00 00 00 00	r1 = r5
     366	1f 71 00 00 00 00 00 00	r1 -= r7
     367	b7 08 00 00 00 00 00 00	r8 = 0x0
     368	b7 00 00 00 01 00 00 00	r0 = 0x1
     369	2d 51 01 00 00 00 00 00	if r1 > r5 goto +0x1 <LBB4_10>
     370	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000000b98 <LBB4_10>
     371	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB4_12>
     372	bf 18 00 00 00 00 00 00	r8 = r1

0000000000000ba8 <LBB4_12>
     373	bf 21 00 00 00 00 00 00	r1 = r2
     374	87 01 00 00 00 00 00 00	r1 = -r1
     375	5f 18 00 00 00 00 00 00	r8 &= r1
     376	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
     378	2d 81 3d 00 00 00 00 00	if r1 > r8 goto +0x3d <LBB4_33>
     379	79 42 00 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x0)
     380	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
     382	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
     383	bf 81 00 00 00 00 00 00	r1 = r8
     384	85 10 00 00 d7 2e 00 00	call 0x2ed7 ; <memcpy>
     385	bf 82 00 00 00 00 00 00	r2 = r8
     386	05 00 1b 00 00 00 00 00	goto +0x1b <LBB4_24>

0000000000000c18 <LBB4_14>
     387	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB4_16>
     388	05 00 db ff 00 00 00 00	goto -0x25 <LBB4_4>

0000000000000c28 <LBB4_16>
     389	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
     391	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     392	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
     394	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB4_18>
     395	bf 14 00 00 00 00 00 00	r4 = r1

0000000000000c60 <LBB4_18>
     396	bf 43 00 00 00 00 00 00	r3 = r4
     397	1f 73 00 00 00 00 00 00	r3 -= r7
     398	b7 01 00 00 00 00 00 00	r1 = 0x0
     399	b7 05 00 00 01 00 00 00	r5 = 0x1
     400	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB4_20>
     401	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000000c90 <LBB4_20>
     402	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB4_22>
     403	bf 31 00 00 00 00 00 00	r1 = r3

0000000000000ca0 <LBB4_22>
     404	bf 23 00 00 00 00 00 00	r3 = r2
     405	87 03 00 00 00 00 00 00	r3 = -r3
     406	5f 31 00 00 00 00 00 00	r1 &= r3
     407	18 03 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000008 ll
     409	2d 13 1e 00 00 00 00 00	if r3 > r1 goto +0x1e <LBB4_33>

0000000000000cd0 <LBB4_23>
     410	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
     412	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
     413	bf 12 00 00 00 00 00 00	r2 = r1

0000000000000cf0 <LBB4_24>
     414	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     415	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
     416	b7 01 00 00 00 00 00 00	r1 = 0x0
     417	05 00 19 00 00 00 00 00	goto +0x19 <LBB4_35>

0000000000000d10 <LBB4_25>
     418	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
     420	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     421	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
     423	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB4_27>
     424	bf 14 00 00 00 00 00 00	r4 = r1

0000000000000d48 <LBB4_27>
     425	bf 43 00 00 00 00 00 00	r3 = r4
     426	1f 73 00 00 00 00 00 00	r3 -= r7
     427	b7 01 00 00 00 00 00 00	r1 = 0x0
     428	b7 05 00 00 01 00 00 00	r5 = 0x1
     429	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB4_29>
     430	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000000d78 <LBB4_29>
     431	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB4_31>
     432	bf 31 00 00 00 00 00 00	r1 = r3

0000000000000d88 <LBB4_31>
     433	bf 23 00 00 00 00 00 00	r3 = r2
     434	87 03 00 00 00 00 00 00	r3 = -r3
     435	5f 31 00 00 00 00 00 00	r1 &= r3
     436	18 03 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000008 ll
     438	2d 13 01 00 00 00 00 00	if r3 > r1 goto +0x1 <LBB4_33>
     439	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB4_23>

0000000000000dc0 <LBB4_33>
     440	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     441	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2

0000000000000dd0 <LBB4_34>
     442	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000000dd8 <LBB4_35>
     443	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     444	95 00 00 00 00 00 00 00	exit

0000000000000de8 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     445	bf 16 00 00 00 00 00 00	r6 = r1
     446	bf 24 00 00 00 00 00 00	r4 = r2
     447	0f 34 00 00 00 00 00 00	r4 += r3
     448	b7 01 00 00 01 00 00 00	r1 = 0x1
     449	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB5_2>
     450	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000e18 <LBB5_2>
     451	57 01 00 00 01 00 00 00	r1 &= 0x1
     452	55 01 28 00 00 00 00 00	if r1 != 0x0 goto +0x28 <LBB5_17>
     453	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     454	bf 17 00 00 00 00 00 00	r7 = r1
     455	67 07 00 00 01 00 00 00	r7 <<= 0x1
     456	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB5_5>
     457	bf 47 00 00 00 00 00 00	r7 = r4

0000000000000e50 <LBB5_5>
     458	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB5_7>
     459	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000000e60 <LBB5_7>
     460	b7 02 00 00 01 00 00 00	r2 = 0x1
     461	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 08	r3 = 0x800000000000000 ll
     463	2d 73 01 00 00 00 00 00	if r3 > r7 goto +0x1 <LBB5_9>
     464	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000000e88 <LBB5_9>
     465	bf 73 00 00 00 00 00 00	r3 = r7
     466	67 03 00 00 04 00 00 00	r3 <<= 0x4
     467	67 02 00 00 03 00 00 00	r2 <<= 0x3
     468	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB5_11>
     469	79 64 00 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x0)
     470	67 01 00 00 04 00 00 00	r1 <<= 0x4
     471	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     472	b7 01 00 00 08 00 00 00	r1 = 0x8
     473	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     474	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
     475	05 00 02 00 00 00 00 00	goto +0x2 <LBB5_12>

0000000000000ee0 <LBB5_11>
     476	b7 01 00 00 00 00 00 00	r1 = 0x0
     477	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000000ef0 <LBB5_12>
     478	bf a1 00 00 00 00 00 00	r1 = r10
     479	07 01 00 00 d0 ff ff ff	r1 += -0x30
     480	bf a4 00 00 00 00 00 00	r4 = r10
     481	07 04 00 00 e8 ff ff ff	r4 += -0x18
     482	85 10 00 00 75 ff ff ff	call -0x8b ; <alloc::raw_vec::finish_grow>
     483	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     484	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
     485	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB5_15>
     486	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     487	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000000f40 <LBB5_14>
     488	95 00 00 00 00 00 00 00	exit

0000000000000f48 <LBB5_15>
     489	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
     491	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB5_14>
     492	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB5_18>

0000000000000f68 <LBB5_17>
     493	85 10 00 00 a8 1f 00 00	call 0x1fa8 ; <alloc::raw_vec::capacity_overflow>
     494	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000f78 <LBB5_18>
     495	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     496	85 10 00 00 b6 1f 00 00	call 0x1fb6 ; <alloc::alloc::handle_alloc_error>
     497	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000f90 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     498	bf 16 00 00 00 00 00 00	r6 = r1
     499	bf 24 00 00 00 00 00 00	r4 = r2
     500	0f 34 00 00 00 00 00 00	r4 += r3
     501	b7 01 00 00 01 00 00 00	r1 = 0x1
     502	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB6_2>
     503	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000fc0 <LBB6_2>
     504	57 01 00 00 01 00 00 00	r1 &= 0x1
     505	55 01 23 00 00 00 00 00	if r1 != 0x0 goto +0x23 <LBB6_15>
     506	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     507	bf 17 00 00 00 00 00 00	r7 = r1
     508	67 07 00 00 01 00 00 00	r7 <<= 0x1
     509	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB6_5>
     510	bf 47 00 00 00 00 00 00	r7 = r4

0000000000000ff8 <LBB6_5>
     511	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB6_7>
     512	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000001008 <LBB6_7>
     513	bf 72 00 00 00 00 00 00	r2 = r7
     514	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
     515	77 02 00 00 3f 00 00 00	r2 >>= 0x3f
     516	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB6_9>
     517	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
     518	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     519	b7 01 00 00 01 00 00 00	r1 = 0x1
     520	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     521	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
     522	05 00 02 00 00 00 00 00	goto +0x2 <LBB6_10>

0000000000001058 <LBB6_9>
     523	b7 01 00 00 00 00 00 00	r1 = 0x0
     524	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000001068 <LBB6_10>
     525	bf a1 00 00 00 00 00 00	r1 = r10
     526	07 01 00 00 d0 ff ff ff	r1 += -0x30
     527	bf a4 00 00 00 00 00 00	r4 = r10
     528	07 04 00 00 e8 ff ff ff	r4 += -0x18
     529	bf 73 00 00 00 00 00 00	r3 = r7
     530	85 10 00 00 45 ff ff ff	call -0xbb ; <alloc::raw_vec::finish_grow>
     531	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     532	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
     533	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB6_13>
     534	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     535	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

00000000000010c0 <LBB6_12>
     536	95 00 00 00 00 00 00 00	exit

00000000000010c8 <LBB6_13>
     537	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
     539	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB6_12>
     540	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB6_16>

00000000000010e8 <LBB6_15>
     541	85 10 00 00 78 1f 00 00	call 0x1f78 ; <alloc::raw_vec::capacity_overflow>
     542	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000010f8 <LBB6_16>
     543	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     544	85 10 00 00 86 1f 00 00	call 0x1f86 ; <alloc::alloc::handle_alloc_error>
     545	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001110 <borsh::ser::hashes::<impl borsh::ser::BorshSerialize for std::collections::hash::map::HashMap<K,V,H>>::serialize>
     546	79 16 18 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x18)
     547	7b 2a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r2
     548	15 06 4b 01 00 00 00 00	if r6 == 0x0 goto +0x14b <LBB7_35>
     549	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
     550	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
     551	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
     552	18 02 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r2 = -0x7f7f7f7f7f7f7f80 ll
     554	5f 21 00 00 00 00 00 00	r1 &= r2
     555	bf 78 00 00 00 00 00 00	r8 = r7
     556	07 08 00 00 08 00 00 00	r8 += 0x8
     557	55 01 06 00 00 00 00 00	if r1 != 0x0 goto +0x6 <LBB7_3>

0000000000001170 <LBB7_2>
     558	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
     559	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
     560	5f 21 00 00 00 00 00 00	r1 &= r2
     561	07 08 00 00 08 00 00 00	r8 += 0x8
     562	07 07 00 00 80 fe ff ff	r7 += -0x180
     563	15 01 fa ff 00 00 00 00	if r1 == 0x0 goto -0x6 <LBB7_2>

00000000000011a0 <LBB7_3>
     564	b7 02 00 00 01 00 00 00	r2 = 0x1
     565	15 06 01 00 00 00 00 00	if r6 == 0x0 goto +0x1 <LBB7_5>
     566	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000011b8 <LBB7_5>
     567	b7 03 00 00 ff ff ff ff	r3 = -0x1
     568	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB7_7>
     569	bf 63 00 00 00 00 00 00	r3 = r6

00000000000011d0 <LBB7_7>
     570	25 03 01 00 04 00 00 00	if r3 > 0x4 goto +0x1 <LBB7_9>
     571	b7 03 00 00 04 00 00 00	r3 = 0x4

00000000000011e0 <LBB7_9>
     572	b7 04 00 00 f8 ff ff ff	r4 = -0x8
     573	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 08	r2 = 0x800000000000000 ll
     575	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB7_11>
     576	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000001208 <LBB7_11>
     577	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB7_13>
     578	85 10 00 00 53 1f 00 00	call 0x1f53 ; <alloc::raw_vec::capacity_overflow>
     579	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001220 <LBB7_13>
     580	bf 32 00 00 00 00 00 00	r2 = r3
     581	67 02 00 00 04 00 00 00	r2 <<= 0x4
     582	b7 00 00 00 08 00 00 00	r0 = 0x8
     583	15 02 19 00 00 00 00 00	if r2 == 0x0 goto +0x19 <LBB7_22>
     584	7b 6a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r6
     585	18 05 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r5 = 0x300000000 ll
     587	79 55 00 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x0)
     588	18 00 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r0 = 0x300008000 ll
     590	15 05 01 00 00 00 00 00	if r5 == 0x0 goto +0x1 <LBB7_16>
     591	bf 50 00 00 00 00 00 00	r0 = r5

0000000000001280 <LBB7_16>
     592	bf 05 00 00 00 00 00 00	r5 = r0
     593	1f 25 00 00 00 00 00 00	r5 -= r2
     594	b7 09 00 00 00 00 00 00	r9 = 0x0
     595	b7 06 00 00 01 00 00 00	r6 = 0x1
     596	2d 05 01 00 00 00 00 00	if r5 > r0 goto +0x1 <LBB7_18>
     597	b7 06 00 00 00 00 00 00	r6 = 0x0

00000000000012b0 <LBB7_18>
     598	55 06 01 00 00 00 00 00	if r6 != 0x0 goto +0x1 <LBB7_20>
     599	bf 59 00 00 00 00 00 00	r9 = r5

00000000000012c0 <LBB7_20>
     600	bf 90 00 00 00 00 00 00	r0 = r9
     601	5f 40 00 00 00 00 00 00	r0 &= r4
     602	18 04 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r4 = 0x300000008 ll
     604	2d 04 88 03 00 00 00 00	if r4 > r0 goto +0x388 <LBB7_166>
     605	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
     607	7b 02 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r0
     608	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x40)

0000000000001308 <LBB7_22>
     609	bf 19 00 00 00 00 00 00	r9 = r1
     610	07 09 00 00 ff ff ff ff	r9 += -0x1
     611	bf 12 00 00 00 00 00 00	r2 = r1
     612	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
     613	5f 92 00 00 00 00 00 00	r2 &= r9
     614	bf 24 00 00 00 00 00 00	r4 = r2
     615	77 04 00 00 01 00 00 00	r4 >>= 0x1
     616	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
     618	5f 54 00 00 00 00 00 00	r4 &= r5
     619	1f 42 00 00 00 00 00 00	r2 -= r4
     620	18 04 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r4 = 0x3333333333333333 ll
     622	bf 25 00 00 00 00 00 00	r5 = r2
     623	77 05 00 00 02 00 00 00	r5 >>= 0x2
     624	5f 42 00 00 00 00 00 00	r2 &= r4
     625	5f 45 00 00 00 00 00 00	r5 &= r4
     626	0f 52 00 00 00 00 00 00	r2 += r5
     627	bf 24 00 00 00 00 00 00	r4 = r2
     628	77 04 00 00 04 00 00 00	r4 >>= 0x4
     629	0f 42 00 00 00 00 00 00	r2 += r4
     630	18 04 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r4 = 0xf0f0f0f0f0f0f0f ll
     632	5f 42 00 00 00 00 00 00	r2 &= r4
     633	18 04 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r4 = 0x101010101010101 ll
     635	2f 42 00 00 00 00 00 00	r2 *= r4
     636	77 02 00 00 3b 00 00 00	r2 >>= 0x3b
     637	87 02 00 00 00 00 00 00	r2 = -r2
     638	27 02 00 00 30 00 00 00	r2 *= 0x30
     639	bf 74 00 00 00 00 00 00	r4 = r7
     640	0f 24 00 00 00 00 00 00	r4 += r2
     641	07 06 00 00 ff ff ff ff	r6 += -0x1
     642	bf 42 00 00 00 00 00 00	r2 = r4
     643	07 02 00 00 e8 ff ff ff	r2 += -0x18
     644	07 04 00 00 d0 ff ff ff	r4 += -0x30
     645	7b 20 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r2
     646	7b 40 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r4
     647	b7 04 00 00 01 00 00 00	r4 = 0x1
     648	b7 02 00 00 01 00 00 00	r2 = 0x1
     649	7b 2a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r2
     650	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
     651	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
     652	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r0
     653	bf 03 00 00 00 00 00 00	r3 = r0
     654	15 06 e4 00 00 00 00 00	if r6 == 0x0 goto +0xe4 <LBB7_34>
     655	7b 3a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r3
     656	5f 19 00 00 00 00 00 00	r9 &= r1
     657	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll

0000000000001498 <LBB7_24>
     659	55 09 06 00 00 00 00 00	if r9 != 0x0 goto +0x6 <LBB7_26>

00000000000014a0 <LBB7_25>
     660	79 89 00 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x0)
     661	a7 09 00 00 ff ff ff ff	r9 ^= -0x1
     662	5f 19 00 00 00 00 00 00	r9 &= r1
     663	07 08 00 00 08 00 00 00	r8 += 0x8
     664	07 07 00 00 80 fe ff ff	r7 += -0x180
     665	15 09 fa ff 00 00 00 00	if r9 == 0x0 goto -0x6 <LBB7_25>

00000000000014d0 <LBB7_26>
     666	07 06 00 00 ff ff ff ff	r6 += -0x1
     667	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     668	bf 60 00 00 00 00 00 00	r0 = r6
     669	79 a6 50 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xb0)
     670	1d 16 33 00 00 00 00 00	if r6 == r1 goto +0x33 <LBB7_28>

00000000000014f8 <LBB7_27>
     671	bf 91 00 00 00 00 00 00	r1 = r9
     672	07 01 00 00 ff ff ff ff	r1 += -0x1
     673	bf 93 00 00 00 00 00 00	r3 = r9
     674	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
     675	5f 13 00 00 00 00 00 00	r3 &= r1
     676	bf 32 00 00 00 00 00 00	r2 = r3
     677	77 02 00 00 01 00 00 00	r2 >>= 0x1
     678	18 04 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r4 = 0x5555555555555555 ll
     680	5f 42 00 00 00 00 00 00	r2 &= r4
     681	1f 23 00 00 00 00 00 00	r3 -= r2
     682	bf 32 00 00 00 00 00 00	r2 = r3
     683	18 04 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r4 = 0x3333333333333333 ll
     685	5f 42 00 00 00 00 00 00	r2 &= r4
     686	77 03 00 00 02 00 00 00	r3 >>= 0x2
     687	5f 43 00 00 00 00 00 00	r3 &= r4
     688	0f 32 00 00 00 00 00 00	r2 += r3
     689	5f 91 00 00 00 00 00 00	r1 &= r9
     690	bf 23 00 00 00 00 00 00	r3 = r2
     691	77 03 00 00 04 00 00 00	r3 >>= 0x4
     692	0f 32 00 00 00 00 00 00	r2 += r3
     693	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
     695	5f 32 00 00 00 00 00 00	r2 &= r3
     696	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
     698	2f 32 00 00 00 00 00 00	r2 *= r3
     699	77 02 00 00 3b 00 00 00	r2 >>= 0x3b
     700	87 02 00 00 00 00 00 00	r2 = -r2
     701	27 02 00 00 30 00 00 00	r2 *= 0x30
     702	bf 73 00 00 00 00 00 00	r3 = r7
     703	0f 23 00 00 00 00 00 00	r3 += r2
     704	bf 32 00 00 00 00 00 00	r2 = r3
     705	07 02 00 00 e8 ff ff ff	r2 += -0x18
     706	07 03 00 00 d0 ff ff ff	r3 += -0x30
     707	bf 64 00 00 00 00 00 00	r4 = r6
     708	67 04 00 00 04 00 00 00	r4 <<= 0x4
     709	79 a5 58 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xa8)
     710	0f 45 00 00 00 00 00 00	r5 += r4
     711	7b 25 08 00 00 00 00 00	*(u64 *)(r5 + 0x8) = r2
     712	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
     713	07 06 00 00 01 00 00 00	r6 += 0x1
     714	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
     715	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r6
     716	bf 19 00 00 00 00 00 00	r9 = r1
     717	bf 06 00 00 00 00 00 00	r6 = r0
     718	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
     720	15 06 13 00 00 00 00 00	if r6 == 0x0 goto +0x13 <LBB7_33>
     721	05 00 c1 ff 00 00 00 00	goto -0x3f <LBB7_24>

0000000000001690 <LBB7_28>
     722	bf 01 00 00 00 00 00 00	r1 = r0
     723	07 01 00 00 01 00 00 00	r1 += 0x1
     724	b7 02 00 00 01 00 00 00	r2 = 0x1
     725	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB7_30>
     726	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000016b8 <LBB7_30>
     727	7b 0a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r0
     728	b7 03 00 00 ff ff ff ff	r3 = -0x1
     729	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB7_32>
     730	bf 13 00 00 00 00 00 00	r3 = r1

00000000000016d8 <LBB7_32>
     731	bf a1 00 00 00 00 00 00	r1 = r10
     732	07 01 00 00 c8 ff ff ff	r1 += -0x38
     733	79 a6 50 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xb0)
     734	bf 62 00 00 00 00 00 00	r2 = r6
     735	85 10 00 00 dd fe ff ff	call -0x123 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     736	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
     737	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
     738	79 a0 c0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x40)
     739	05 00 bb ff 00 00 00 00	goto -0x45 <LBB7_27>

0000000000001720 <LBB7_33>
     740	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
     741	b7 01 00 00 15 00 00 00	r1 = 0x15
     742	7b 3a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r3
     743	79 a7 50 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xb0)
     744	2d 71 01 00 00 00 00 00	if r1 > r7 goto +0x1 <LBB7_167>
     745	05 00 8c 00 00 00 00 00	goto +0x8c <LBB7_36>

0000000000001750 <LBB7_167>
     746	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
     747	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB7_147>
     748	05 00 0b 00 00 00 00 00	goto +0xb <LBB7_149>

0000000000001768 <LBB7_147>
     749	bf a4 00 00 00 00 00 00	r4 = r10
     750	07 04 00 00 f8 ff ff ff	r4 += -0x8
     751	bf 31 00 00 00 00 00 00	r1 = r3
     752	bf 72 00 00 00 00 00 00	r2 = r7
     753	b7 03 00 00 01 00 00 00	r3 = 0x1
     754	85 10 00 00 03 fe ff ff	call -0x1fd ; <core::slice::sort::insertion_sort_shift_left>
     755	79 a3 58 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xa8)

00000000000017a0 <LBB7_148>
     756	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xffffffff ll
     758	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
     759	2d 17 c5 02 00 00 00 00	if r7 > r1 goto +0x2c5 <LBB7_159>

00000000000017c0 <LBB7_149>
     760	bf 78 00 00 00 00 00 00	r8 = r7
     761	79 26 10 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x10)
     762	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     763	1f 61 00 00 00 00 00 00	r1 -= r6
     764	25 01 08 00 03 00 00 00	if r1 > 0x3 goto +0x8 <LBB7_151>
     765	bf 21 00 00 00 00 00 00	r1 = r2
     766	bf 62 00 00 00 00 00 00	r2 = r6
     767	bf 36 00 00 00 00 00 00	r6 = r3
     768	b7 03 00 00 04 00 00 00	r3 = 0x4
     769	85 10 00 00 f0 fe ff ff	call -0x110 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     770	bf 63 00 00 00 00 00 00	r3 = r6
     771	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
     772	79 26 10 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x10)

0000000000001828 <LBB7_151>
     773	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
     774	bf 71 00 00 00 00 00 00	r1 = r7
     775	0f 61 00 00 00 00 00 00	r1 += r6
     776	bf 84 00 00 00 00 00 00	r4 = r8
     777	63 41 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r4
     778	07 06 00 00 04 00 00 00	r6 += 0x4
     779	7b 62 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r6
     780	b7 08 00 00 00 00 00 00	r8 = 0x0
     781	15 04 b1 02 00 00 00 00	if r4 == 0x0 goto +0x2b1 <LBB7_160>
     782	67 04 00 00 04 00 00 00	r4 <<= 0x4
     783	bf 31 00 00 00 00 00 00	r1 = r3
     784	0f 41 00 00 00 00 00 00	r1 += r4
     785	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     786	05 00 1b 00 00 00 00 00	goto +0x1b <LBB7_153>

0000000000001898 <LBB7_163>
     787	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
     788	bf 72 00 00 00 00 00 00	r2 = r7
     789	0f 62 00 00 00 00 00 00	r2 += r6
     790	63 92 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r9
     791	07 06 00 00 04 00 00 00	r6 += 0x4
     792	7b 61 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r6
     793	1f 63 00 00 00 00 00 00	r3 -= r6
     794	3d 93 06 00 00 00 00 00	if r3 >= r9 goto +0x6 <LBB7_165>
     795	bf 62 00 00 00 00 00 00	r2 = r6
     796	bf 93 00 00 00 00 00 00	r3 = r9
     797	85 10 00 00 d4 fe ff ff	call -0x12c ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     798	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
     799	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
     800	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)

0000000000001908 <LBB7_165>
     801	bf 71 00 00 00 00 00 00	r1 = r7
     802	0f 61 00 00 00 00 00 00	r1 += r6
     803	bf 82 00 00 00 00 00 00	r2 = r8
     804	bf 93 00 00 00 00 00 00	r3 = r9
     805	85 10 00 00 32 2d 00 00	call 0x2d32 ; <memcpy>
     806	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
     807	0f 96 00 00 00 00 00 00	r6 += r9
     808	7b 62 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r6
     809	79 a3 58 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xa8)
     810	07 03 00 00 10 00 00 00	r3 += 0x10
     811	b7 08 00 00 00 00 00 00	r8 = 0x0
     812	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     813	1d 13 91 02 00 00 00 00	if r3 == r1 goto +0x291 <LBB7_160>

0000000000001970 <LBB7_153>
     814	18 08 00 00 03 00 00 00 00 00 00 00 15 00 00 00	r8 = 0x1500000003 ll
     816	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
     817	79 19 10 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x10)
     818	18 04 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r4 = 0xffffffff ll
     820	2d 49 8a 02 00 00 00 00	if r9 > r4 goto +0x28a <LBB7_160>
     821	7b 3a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r3
     822	79 33 08 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x8)
     823	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
     824	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x0)
     825	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     826	bf 13 00 00 00 00 00 00	r3 = r1
     827	1f 63 00 00 00 00 00 00	r3 -= r6
     828	25 03 0a 00 03 00 00 00	if r3 > 0x3 goto +0xa <LBB7_156>
     829	bf 21 00 00 00 00 00 00	r1 = r2
     830	bf 62 00 00 00 00 00 00	r2 = r6
     831	b7 03 00 00 04 00 00 00	r3 = 0x4
     832	bf 46 00 00 00 00 00 00	r6 = r4
     833	85 10 00 00 b0 fe ff ff	call -0x150 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     834	bf 64 00 00 00 00 00 00	r4 = r6
     835	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
     836	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
     837	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     838	79 26 10 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x10)

0000000000001a38 <LBB7_156>
     839	bf 73 00 00 00 00 00 00	r3 = r7
     840	0f 63 00 00 00 00 00 00	r3 += r6
     841	63 93 00 00 00 00 00 00	*(u32 *)(r3 + 0x0) = r9
     842	07 06 00 00 04 00 00 00	r6 += 0x4
     843	7b 62 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r6
     844	1f 61 00 00 00 00 00 00	r1 -= r6
     845	3d 91 09 00 00 00 00 00	if r1 >= r9 goto +0x9 <LBB7_158>
     846	bf 21 00 00 00 00 00 00	r1 = r2
     847	bf 62 00 00 00 00 00 00	r2 = r6
     848	bf 93 00 00 00 00 00 00	r3 = r9
     849	bf 46 00 00 00 00 00 00	r6 = r4
     850	85 10 00 00 9f fe ff ff	call -0x161 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     851	bf 64 00 00 00 00 00 00	r4 = r6
     852	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
     853	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
     854	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)

0000000000001ab8 <LBB7_158>
     855	0f 67 00 00 00 00 00 00	r7 += r6
     856	bf 71 00 00 00 00 00 00	r1 = r7
     857	bf 42 00 00 00 00 00 00	r2 = r4
     858	bf 93 00 00 00 00 00 00	r3 = r9
     859	85 10 00 00 fc 2c 00 00	call 0x2cfc ; <memcpy>
     860	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
     861	0f 96 00 00 00 00 00 00	r6 += r9
     862	7b 61 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r6
     863	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
     864	79 39 10 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x10)
     865	18 02 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r2 = 0xffffffff ll
     867	2d 29 5b 02 00 00 00 00	if r9 > r2 goto +0x25b <LBB7_160>
     868	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
     869	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
     870	bf 32 00 00 00 00 00 00	r2 = r3
     871	1f 62 00 00 00 00 00 00	r2 -= r6
     872	25 02 aa ff 03 00 00 00	if r2 > 0x3 goto -0x56 <LBB7_163>
     873	bf 62 00 00 00 00 00 00	r2 = r6
     874	b7 03 00 00 04 00 00 00	r3 = 0x4
     875	85 10 00 00 86 fe ff ff	call -0x17a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
     876	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
     877	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
     878	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)
     879	05 00 a3 ff 00 00 00 00	goto -0x5d <LBB7_163>

0000000000001b80 <LBB7_35>
     880	b7 03 00 00 08 00 00 00	r3 = 0x8
     881	b7 07 00 00 00 00 00 00	r7 = 0x0
     882	05 00 85 ff 00 00 00 00	goto -0x7b <LBB7_149>

0000000000001b98 <LBB7_34>
     883	b7 07 00 00 01 00 00 00	r7 = 0x1
     884	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
     885	05 00 82 ff 00 00 00 00	goto -0x7e <LBB7_149>

0000000000001bb0 <LBB7_36>
     886	bf 71 00 00 00 00 00 00	r1 = r7
     887	67 01 00 00 03 00 00 00	r1 <<= 0x3
     888	18 02 00 00 f0 ff ff ff 00 00 00 00 ff ff ff 7f	r2 = 0x7ffffffffffffff0 ll
     890	5f 21 00 00 00 00 00 00	r1 &= r2
     891	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
     893	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
     894	18 03 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r3 = 0x300008000 ll
     896	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB7_38>
     897	bf 23 00 00 00 00 00 00	r3 = r2

0000000000001c10 <LBB7_38>
     898	bf 32 00 00 00 00 00 00	r2 = r3
     899	1f 12 00 00 00 00 00 00	r2 -= r1
     900	b7 09 00 00 00 00 00 00	r9 = 0x0
     901	b7 01 00 00 01 00 00 00	r1 = 0x1
     902	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB7_40>
     903	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000001c40 <LBB7_40>
     904	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB7_42>
     905	bf 29 00 00 00 00 00 00	r9 = r2

0000000000001c50 <LBB7_42>
     906	57 09 00 00 f8 ff ff ff	r9 &= -0x8
     907	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
     909	79 a3 58 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xa8)
     910	2d 19 07 00 00 00 00 00	if r9 > r1 goto +0x7 <LBB7_44>
     911	18 01 00 00 3f 8a 01 00 00 00 00 00 00 00 00 00	r1 = 0x18a3f ll
     913	b7 02 00 00 2b 00 00 00	r2 = 0x2b
     914	18 03 00 00 f0 9d 01 00 00 00 00 00 00 00 00 00	r3 = 0x19df0 ll
     916	85 10 00 00 7c 20 00 00	call 0x207c ; <core::panicking::panic>
     917	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001cb0 <LBB7_44>
     918	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
     920	7b 92 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r9
     921	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r9
     922	07 09 00 00 00 ff ff ff	r9 += -0x100
     923	2d 19 07 00 00 00 00 00	if r9 > r1 goto +0x7 <LBB7_46>
     924	18 01 00 00 3f 8a 01 00 00 00 00 00 00 00 00 00	r1 = 0x18a3f ll
     926	b7 02 00 00 2b 00 00 00	r2 = 0x2b
     927	18 03 00 00 08 9e 01 00 00 00 00 00 00 00 00 00	r3 = 0x19e08 ll
     929	85 10 00 00 6f 20 00 00	call 0x206f ; <core::panicking::panic>
     930	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001d18 <LBB7_46>
     931	7b 92 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r9
     932	15 07 4f ff 00 00 00 00	if r7 == 0x0 goto -0xb1 <LBB7_148>
     933	b7 01 00 00 10 00 00 00	r1 = 0x10
     934	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
     935	bf 31 00 00 00 00 00 00	r1 = r3
     936	07 01 00 00 f0 ff ff ff	r1 += -0x10
     937	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
     938	bf 31 00 00 00 00 00 00	r1 = r3
     939	07 01 00 00 f8 ff ff ff	r1 += -0x8
     940	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
     941	bf 31 00 00 00 00 00 00	r1 = r3
     942	07 01 00 00 08 00 00 00	r1 += 0x8
     943	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
     944	bf 31 00 00 00 00 00 00	r1 = r3
     945	07 01 00 00 20 00 00 00	r1 += 0x20
     946	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
     947	b7 01 00 00 00 00 00 00	r1 = 0x0
     948	b7 05 00 00 00 00 00 00	r5 = 0x0
     949	05 00 04 00 00 00 00 00	goto +0x4 <LBB7_48>

0000000000001db0 <LBB7_169>
     950	79 a3 58 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xa8)
     951	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
     952	2d 17 01 00 00 00 00 00	if r7 > r1 goto +0x1 <LBB7_48>
     953	05 00 3a ff 00 00 00 00	goto -0xc6 <LBB7_148>

0000000000001dd0 <LBB7_48>
     954	7b 5a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r5
     955	7b 9a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r9
     956	bf 12 00 00 00 00 00 00	r2 = r1
     957	67 01 00 00 04 00 00 00	r1 <<= 0x4
     958	0f 13 00 00 00 00 00 00	r3 += r1
     959	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
     960	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
     961	1f 27 00 00 00 00 00 00	r7 -= r2
     962	bf 73 00 00 00 00 00 00	r3 = r7
     963	b7 01 00 00 02 00 00 00	r1 = 0x2
     964	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
     965	2d 71 35 00 00 00 00 00	if r1 > r7 goto +0x35 <LBB7_70>
     966	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     967	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
     968	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
     969	79 24 10 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x10)
     970	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)
     971	bf 63 00 00 00 00 00 00	r3 = r6
     972	2d 64 01 00 00 00 00 00	if r4 > r6 goto +0x1 <LBB7_51>
     973	bf 43 00 00 00 00 00 00	r3 = r4

0000000000001e70 <LBB7_51>
     974	bf 67 00 00 00 00 00 00	r7 = r6
     975	1f 46 00 00 00 00 00 00	r6 -= r4
     976	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
     977	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
     978	bf 18 00 00 00 00 00 00	r8 = r1
     979	85 10 00 00 0c 2d 00 00	call 0x2d0c ; <memcmp>
     980	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB7_53>
     981	bf 06 00 00 00 00 00 00	r6 = r0

0000000000001eb0 <LBB7_53>
     982	b7 01 00 00 00 00 00 00	r1 = 0x0
     983	6d 61 9c 01 00 00 00 00	if r1 s> r6 goto +0x19c <LBB7_57>
     984	b7 03 00 00 02 00 00 00	r3 = 0x2
     985	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
     986	bf 74 00 00 00 00 00 00	r4 = r7
     987	bf 82 00 00 00 00 00 00	r2 = r8
     988	15 01 1e 00 02 00 00 00	if r1 == 0x2 goto +0x1e <LBB7_70>
     989	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     990	67 01 00 00 04 00 00 00	r1 <<= 0x4
     991	79 a7 20 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xe0)
     992	0f 17 00 00 00 00 00 00	r7 += r1
     993	b7 08 00 00 02 00 00 00	r8 = 0x2
     994	05 00 0b 00 00 00 00 00	goto +0xb <LBB7_56>

0000000000001f18 <LBB7_63>
     995	bf 83 00 00 00 00 00 00	r3 = r8
     996	b7 01 00 00 00 00 00 00	r1 = 0x0
     997	6d 61 15 00 00 00 00 00	if r1 s> r6 goto +0x15 <LBB7_70>
     998	07 07 00 00 10 00 00 00	r7 += 0x10
     999	07 08 00 00 01 00 00 00	r8 += 0x1
    1000	bf 94 00 00 00 00 00 00	r4 = r9
    1001	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    1002	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    1003	bf 13 00 00 00 00 00 00	r3 = r1
    1004	2d 81 01 00 00 00 00 00	if r1 > r8 goto +0x1 <LBB7_56>
    1005	05 00 0d 00 00 00 00 00	goto +0xd <LBB7_70>

0000000000001f70 <LBB7_56>
    1006	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1007	79 19 10 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x10)
    1008	bf 93 00 00 00 00 00 00	r3 = r9
    1009	2d 94 01 00 00 00 00 00	if r4 > r9 goto +0x1 <LBB7_61>
    1010	bf 43 00 00 00 00 00 00	r3 = r4

0000000000001f98 <LBB7_61>
    1011	bf 96 00 00 00 00 00 00	r6 = r9
    1012	1f 46 00 00 00 00 00 00	r6 -= r4
    1013	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1014	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    1015	85 10 00 00 e8 2c 00 00	call 0x2ce8 ; <memcmp>
    1016	15 00 ea ff 00 00 00 00	if r0 == 0x0 goto -0x16 <LBB7_63>
    1017	bf 06 00 00 00 00 00 00	r6 = r0
    1018	05 00 e8 ff 00 00 00 00	goto -0x18 <LBB7_63>

0000000000001fd8 <LBB7_70>
    1019	bf 31 00 00 00 00 00 00	r1 = r3
    1020	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    1021	0f 21 00 00 00 00 00 00	r1 += r2
    1022	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    1023	79 a7 50 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xb0)

0000000000002000 <LBB7_71>
    1024	79 a8 38 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xc8)
    1025	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
    1026	2d 86 ca 01 00 00 00 00	if r6 > r8 goto +0x1ca <LBB7_76>
    1027	2d 78 c9 01 00 00 00 00	if r8 > r7 goto +0x1c9 <LBB7_76>
    1028	79 a9 48 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xb8)
    1029	79 a5 a0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x60)
    1030	3d 78 02 00 00 00 00 00	if r8 >= r7 goto +0x2 <LBB7_75>
    1031	b7 01 00 00 0a 00 00 00	r1 = 0xa
    1032	2d 31 04 00 00 00 00 00	if r1 > r3 goto +0x4 <LBB7_77>

0000000000002048 <LBB7_75>
    1033	1f 68 00 00 00 00 00 00	r8 -= r6
    1034	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)
    1035	5d 15 3b 00 00 00 00 00	if r5 != r1 goto +0x3b <LBB7_92>
    1036	05 00 17 00 00 00 00 00	goto +0x17 <LBB7_84>

0000000000002068 <LBB7_77>
    1037	bf 68 00 00 00 00 00 00	r8 = r6
    1038	07 08 00 00 0a 00 00 00	r8 += 0xa
    1039	2d 87 01 00 00 00 00 00	if r7 > r8 goto +0x1 <LBB7_79>
    1040	bf 78 00 00 00 00 00 00	r8 = r7

0000000000002088 <LBB7_79>
    1041	3d 68 06 00 00 00 00 00	if r8 >= r6 goto +0x6 <LBB7_81>
    1042	bf 61 00 00 00 00 00 00	r1 = r6
    1043	bf 82 00 00 00 00 00 00	r2 = r8
    1044	18 03 00 00 38 9e 01 00 00 00 00 00 00 00 00 00	r3 = 0x19e38 ll
    1046	85 10 00 00 b9 26 00 00	call 0x26b9 ; <core::slice::index::slice_index_order_fail>
    1047	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000020c0 <LBB7_81>
    1048	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB7_83>
    1049	b7 03 00 00 01 00 00 00	r3 = 0x1

00000000000020d0 <LBB7_83>
    1050	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    1051	1f 68 00 00 00 00 00 00	r8 -= r6
    1052	bf a4 00 00 00 00 00 00	r4 = r10
    1053	07 04 00 00 f8 ff ff ff	r4 += -0x8
    1054	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    1055	bf 82 00 00 00 00 00 00	r2 = r8
    1056	85 10 00 00 d5 fc ff ff	call -0x32b ; <core::slice::sort::insertion_sort_shift_left>
    1057	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)
    1058	79 a5 a0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x60)
    1059	5d 15 23 00 00 00 00 00	if r5 != r1 goto +0x23 <LBB7_92>

0000000000002120 <LBB7_84>
    1060	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    1062	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1063	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    1065	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB7_86>
    1066	bf 12 00 00 00 00 00 00	r2 = r1

0000000000002158 <LBB7_86>
    1067	bf 53 00 00 00 00 00 00	r3 = r5
    1068	67 03 00 00 05 00 00 00	r3 <<= 0x5
    1069	bf 21 00 00 00 00 00 00	r1 = r2
    1070	1f 31 00 00 00 00 00 00	r1 -= r3
    1071	b7 06 00 00 00 00 00 00	r6 = 0x0
    1072	b7 03 00 00 01 00 00 00	r3 = 0x1
    1073	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB7_88>
    1074	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000002198 <LBB7_88>
    1075	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB7_90>
    1076	bf 16 00 00 00 00 00 00	r6 = r1

00000000000021a8 <LBB7_90>
    1077	57 06 00 00 f8 ff ff ff	r6 &= -0x8
    1078	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    1080	2d 61 9b 01 00 00 00 00	if r1 > r6 goto +0x19b <LBB7_168>
    1081	bf 51 00 00 00 00 00 00	r1 = r5
    1082	67 01 00 00 01 00 00 00	r1 <<= 0x1
    1083	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1084	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    1086	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    1087	bf 53 00 00 00 00 00 00	r3 = r5
    1088	67 03 00 00 04 00 00 00	r3 <<= 0x4
    1089	bf 61 00 00 00 00 00 00	r1 = r6
    1090	bf 92 00 00 00 00 00 00	r2 = r9
    1091	85 10 00 00 14 2c 00 00	call 0x2c14 ; <memcpy>
    1092	79 a5 a0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x60)
    1093	bf 69 00 00 00 00 00 00	r9 = r6
    1094	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)

0000000000002238 <LBB7_92>
    1095	bf 51 00 00 00 00 00 00	r1 = r5
    1096	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1097	bf 92 00 00 00 00 00 00	r2 = r9
    1098	0f 12 00 00 00 00 00 00	r2 += r1
    1099	7b 62 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r6
    1100	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
    1101	07 05 00 00 01 00 00 00	r5 += 0x1
    1102	b7 01 00 00 02 00 00 00	r1 = 0x2
    1103	2d 51 66 ff 00 00 00 00	if r1 > r5 goto -0x9a <LBB7_169>
    1104	bf 50 00 00 00 00 00 00	r0 = r5
    1105	7b 9a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r9
    1106	05 00 3e 00 00 00 00 00	goto +0x3e <LBB7_94>

0000000000002298 <LBB7_144>
    1107	79 25 00 00 00 00 00 00	r5 = *(u64 *)(r2 + 0x0)
    1108	7b 57 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r5
    1109	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    1110	7b 27 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r2
    1111	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1112	0f 16 00 00 00 00 00 00	r6 += r1
    1113	07 07 00 00 10 00 00 00	r7 += 0x10
    1114	3d 36 05 00 00 00 00 00	if r6 >= r3 goto +0x5 <LBB7_146>
    1115	77 09 00 00 3b 00 00 00	r9 >>= 0x3b
    1116	57 09 00 00 10 00 00 00	r9 &= 0x10
    1117	0f 98 00 00 00 00 00 00	r8 += r9
    1118	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    1119	2d 81 1b 00 00 00 00 00	if r1 > r8 goto +0x1b <LBB7_129>

0000000000002300 <LBB7_146>
    1120	1f 63 00 00 00 00 00 00	r3 -= r6
    1121	bf 71 00 00 00 00 00 00	r1 = r7
    1122	bf 62 00 00 00 00 00 00	r2 = r6
    1123	bf 46 00 00 00 00 00 00	r6 = r4
    1124	85 10 00 00 f3 2b 00 00	call 0x2bf3 ; <memcpy>
    1125	79 a2 68 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x98)
    1126	0f 62 00 00 00 00 00 00	r2 += r6
    1127	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    1128	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1129	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    1130	79 a2 60 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xa0)
    1131	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1132	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    1133	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    1134	79 a3 90 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x70)
    1135	0f 13 00 00 00 00 00 00	r3 += r1
    1136	67 03 00 00 04 00 00 00	r3 <<= 0x4
    1137	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    1138	bf 12 00 00 00 00 00 00	r2 = r1
    1139	07 02 00 00 10 00 00 00	r2 += 0x10
    1140	85 10 00 00 05 2c 00 00	call 0x2c05 ; <memmove>
    1141	b7 05 00 00 01 00 00 00	r5 = 0x1
    1142	79 a7 50 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xb0)
    1143	79 a9 48 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xb8)
    1144	79 a0 80 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x80)
    1145	25 00 17 00 01 00 00 00	if r0 > 0x1 goto +0x17 <LBB7_94>
    1146	05 00 3b ff 00 00 00 00	goto -0xc5 <LBB7_169>

00000000000023d8 <LBB7_129>
    1147	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    1148	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1149	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    1150	79 49 10 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x10)
    1151	bf 93 00 00 00 00 00 00	r3 = r9
    1152	2d 92 01 00 00 00 00 00	if r2 > r9 goto +0x1 <LBB7_138>
    1153	bf 23 00 00 00 00 00 00	r3 = r2

0000000000002410 <LBB7_138>
    1154	1f 29 00 00 00 00 00 00	r9 -= r2
    1155	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1156	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    1157	85 10 00 00 5a 2c 00 00	call 0x2c5a ; <memcmp>
    1158	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB7_140>
    1159	bf 09 00 00 00 00 00 00	r9 = r0

0000000000002440 <LBB7_140>
    1160	b7 01 00 00 01 00 00 00	r1 = 0x1
    1161	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x58)
    1162	65 09 01 00 ff ff ff ff	if r9 s> -0x1 goto +0x1 <LBB7_142>
    1163	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000002460 <LBB7_142>
    1164	bf 62 00 00 00 00 00 00	r2 = r6
    1165	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
    1166	65 09 c4 ff ff ff ff ff	if r9 s> -0x1 goto -0x3c <LBB7_144>
    1167	bf 82 00 00 00 00 00 00	r2 = r8
    1168	05 00 c2 ff 00 00 00 00	goto -0x3e <LBB7_144>

0000000000002488 <LBB7_94>
    1169	bf 06 00 00 00 00 00 00	r6 = r0
    1170	07 00 00 00 ff ff ff ff	r0 += -0x1
    1171	bf 01 00 00 00 00 00 00	r1 = r0
    1172	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1173	bf 92 00 00 00 00 00 00	r2 = r9
    1174	0f 12 00 00 00 00 00 00	r2 += r1
    1175	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    1176	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1177	bf 12 00 00 00 00 00 00	r2 = r1
    1178	0f 32 00 00 00 00 00 00	r2 += r3
    1179	1d 72 01 00 00 00 00 00	if r2 == r7 goto +0x1 <LBB7_109>
    1180	05 00 0a 00 00 00 00 00	goto +0xa <LBB7_104>

00000000000024e8 <LBB7_109>
    1181	b7 02 00 00 03 00 00 00	r2 = 0x3
    1182	2d 62 26 00 00 00 00 00	if r2 > r6 goto +0x26 <LBB7_112>
    1183	bf 68 00 00 00 00 00 00	r8 = r6
    1184	07 08 00 00 fd ff ff ff	r8 += -0x3
    1185	bf 82 00 00 00 00 00 00	r2 = r8
    1186	67 02 00 00 04 00 00 00	r2 <<= 0x4
    1187	bf 93 00 00 00 00 00 00	r3 = r9
    1188	0f 23 00 00 00 00 00 00	r3 += r2
    1189	79 32 00 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x0)
    1190	05 00 1d 00 00 00 00 00	goto +0x1d <LBB7_111>

0000000000002538 <LBB7_104>
    1191	bf 62 00 00 00 00 00 00	r2 = r6
    1192	67 02 00 00 04 00 00 00	r2 <<= 0x4
    1193	0f 92 00 00 00 00 00 00	r2 += r9
    1194	79 23 e0 ff 00 00 00 00	r3 = *(u64 *)(r2 - 0x20)
    1195	3d 31 f1 ff 00 00 00 00	if r1 >= r3 goto -0xf <LBB7_109>
    1196	b7 05 00 00 02 00 00 00	r5 = 0x2
    1197	b7 02 00 00 03 00 00 00	r2 = 0x3
    1198	2d 62 07 ff 00 00 00 00	if r2 > r6 goto -0xf9 <LBB7_169>
    1199	bf 34 00 00 00 00 00 00	r4 = r3
    1200	0f 14 00 00 00 00 00 00	r4 += r1
    1201	bf 68 00 00 00 00 00 00	r8 = r6
    1202	07 08 00 00 fd ff ff ff	r8 += -0x3
    1203	bf 82 00 00 00 00 00 00	r2 = r8
    1204	67 02 00 00 04 00 00 00	r2 <<= 0x4
    1205	bf 95 00 00 00 00 00 00	r5 = r9
    1206	0f 25 00 00 00 00 00 00	r5 += r2
    1207	79 52 00 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x0)
    1208	3d 24 0b 00 00 00 00 00	if r4 >= r2 goto +0xb <LBB7_111>
    1209	b7 05 00 00 03 00 00 00	r5 = 0x3
    1210	b7 04 00 00 04 00 00 00	r4 = 0x4
    1211	2d 64 fa fe 00 00 00 00	if r4 > r6 goto -0x106 <LBB7_169>
    1212	bf 24 00 00 00 00 00 00	r4 = r2
    1213	0f 34 00 00 00 00 00 00	r4 += r3
    1214	bf 63 00 00 00 00 00 00	r3 = r6
    1215	67 03 00 00 04 00 00 00	r3 <<= 0x4
    1216	0f 93 00 00 00 00 00 00	r3 += r9
    1217	79 33 c0 ff 00 00 00 00	r3 = *(u64 *)(r3 - 0x40)
    1218	bf 65 00 00 00 00 00 00	r5 = r6
    1219	2d 43 f2 fe 00 00 00 00	if r3 > r4 goto -0x10e <LBB7_169>

0000000000002620 <LBB7_111>
    1220	2d 21 02 00 00 00 00 00	if r1 > r2 goto +0x2 <LBB7_113>

0000000000002628 <LBB7_112>
    1221	bf 68 00 00 00 00 00 00	r8 = r6
    1222	07 08 00 00 fe ff ff ff	r8 += -0x2

0000000000002638 <LBB7_113>
    1223	bf 03 00 00 00 00 00 00	r3 = r0
    1224	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    1225	bf 62 00 00 00 00 00 00	r2 = r6
    1226	2d 82 11 00 00 00 00 00	if r2 > r8 goto +0x11 <LBB7_115>
    1227	b7 01 00 00 01 00 00 00	r1 = 0x1
    1228	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1229	18 01 00 00 80 9d 01 00 00 00 00 00 00 00 00 00	r1 = 0x19d80 ll
    1231	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1232	b7 01 00 00 00 00 00 00	r1 = 0x0
    1233	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1234	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1235	18 01 00 00 f0 89 01 00 00 00 00 00 00 00 00 00	r1 = 0x189f0 ll
    1237	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1238	bf a1 00 00 00 00 00 00	r1 = r10
    1239	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1240	18 02 00 00 a8 9d 01 00 00 00 00 00 00 00 00 00	r2 = 0x19da8 ll
    1242	85 10 00 00 28 1f 00 00	call 0x1f28 ; <core::panicking::panic_fmt>
    1243	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000026e0 <LBB7_115>
    1244	bf 76 00 00 00 00 00 00	r6 = r7
    1245	bf 84 00 00 00 00 00 00	r4 = r8
    1246	07 04 00 00 01 00 00 00	r4 += 0x1
    1247	79 a1 58 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xa8)
    1248	bf 20 00 00 00 00 00 00	r0 = r2
    1249	2d 42 11 00 00 00 00 00	if r2 > r4 goto +0x11 <LBB7_117>
    1250	b7 01 00 00 01 00 00 00	r1 = 0x1
    1251	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1252	18 01 00 00 80 9d 01 00 00 00 00 00 00 00 00 00	r1 = 0x19d80 ll
    1254	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1255	b7 01 00 00 00 00 00 00	r1 = 0x0
    1256	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1257	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1258	18 01 00 00 f0 89 01 00 00 00 00 00 00 00 00 00	r1 = 0x189f0 ll
    1260	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1261	bf a1 00 00 00 00 00 00	r1 = r10
    1262	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1263	18 02 00 00 c0 9d 01 00 00 00 00 00 00 00 00 00	r2 = 0x19dc0 ll
    1265	85 10 00 00 11 1f 00 00	call 0x1f11 ; <core::panicking::panic_fmt>
    1266	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002798 <LBB7_117>
    1267	bf 82 00 00 00 00 00 00	r2 = r8
    1268	67 02 00 00 04 00 00 00	r2 <<= 0x4
    1269	bf 97 00 00 00 00 00 00	r7 = r9
    1270	bf 75 00 00 00 00 00 00	r5 = r7
    1271	0f 25 00 00 00 00 00 00	r5 += r2
    1272	79 52 08 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x8)
    1273	67 04 00 00 04 00 00 00	r4 <<= 0x4
    1274	0f 47 00 00 00 00 00 00	r7 += r4
    1275	79 74 00 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x0)
    1276	7b 7a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r7
    1277	79 77 08 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x8)
    1278	0f 47 00 00 00 00 00 00	r7 += r4
    1279	2d 72 c1 00 00 00 00 00	if r2 > r7 goto +0xc1 <LBB7_119>
    1280	7b 8a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r8
    1281	7b 0a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r0
    1282	2d 67 c4 00 00 00 00 00	if r7 > r6 goto +0xc4 <LBB7_120>
    1283	7b 4a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r4
    1284	7b 3a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r3
    1285	7b 5a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r5
    1286	79 55 00 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x0)
    1287	79 a4 98 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x68)
    1288	07 04 00 00 08 00 00 00	r4 += 0x8
    1289	7b 4a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r4
    1290	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
    1291	1f 27 00 00 00 00 00 00	r7 -= r2
    1292	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
    1293	67 02 00 00 04 00 00 00	r2 <<= 0x4
    1294	bf 13 00 00 00 00 00 00	r3 = r1
    1295	0f 23 00 00 00 00 00 00	r3 += r2
    1296	bf 56 00 00 00 00 00 00	r6 = r5
    1297	67 06 00 00 04 00 00 00	r6 <<= 0x4
    1298	bf 38 00 00 00 00 00 00	r8 = r3
    1299	0f 68 00 00 00 00 00 00	r8 += r6
    1300	bf 79 00 00 00 00 00 00	r9 = r7
    1301	1f 59 00 00 00 00 00 00	r9 -= r5
    1302	7b 5a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r5
    1303	7b 3a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r3
    1304	3d 59 41 00 00 00 00 00	if r9 >= r5 goto +0x41 <LBB7_126>
    1305	bf 96 00 00 00 00 00 00	r6 = r9
    1306	67 06 00 00 04 00 00 00	r6 <<= 0x4
    1307	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    1308	bf 82 00 00 00 00 00 00	r2 = r8
    1309	bf 63 00 00 00 00 00 00	r3 = r6
    1310	85 10 00 00 39 2b 00 00	call 0x2b39 ; <memcpy>
    1311	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    1312	bf 13 00 00 00 00 00 00	r3 = r1
    1313	0f 63 00 00 00 00 00 00	r3 += r6
    1314	bf 87 00 00 00 00 00 00	r7 = r8
    1315	bf 16 00 00 00 00 00 00	r6 = r1
    1316	b7 02 00 00 01 00 00 00	r2 = 0x1
    1317	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
    1318	6d 42 39 ff 00 00 00 00	if r2 s> r4 goto -0xc7 <LBB7_146>
    1319	bf 87 00 00 00 00 00 00	r7 = r8
    1320	bf 16 00 00 00 00 00 00	r6 = r1
    1321	b7 01 00 00 01 00 00 00	r1 = 0x1
    1322	6d 91 35 ff 00 00 00 00	if r1 s> r9 goto -0xcb <LBB7_146>
    1323	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    1324	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1325	79 a9 30 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xd0)
    1326	0f 19 00 00 00 00 00 00	r9 += r1
    1327	bf 87 00 00 00 00 00 00	r7 = r8
    1328	05 00 0b 00 00 00 00 00	goto +0xb <LBB7_125>

0000000000002988 <LBB7_135>
    1329	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1330	7b 29 00 00 00 00 00 00	*(u64 *)(r9 + 0x0) = r2
    1331	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1332	7b 19 08 00 00 00 00 00	*(u64 *)(r9 + 0x8) = r1
    1333	bf 56 00 00 00 00 00 00	r6 = r5
    1334	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    1335	3d 71 28 ff 00 00 00 00	if r1 >= r7 goto -0xd8 <LBB7_146>
    1336	07 09 00 00 f0 ff ff ff	r9 += -0x10
    1337	bf 56 00 00 00 00 00 00	r6 = r5
    1338	2d 53 01 00 00 00 00 00	if r3 > r5 goto +0x1 <LBB7_125>
    1339	05 00 24 ff 00 00 00 00	goto -0xdc <LBB7_146>

00000000000029e0 <LBB7_125>
    1340	79 71 f0 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x10)
    1341	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1342	bf 38 00 00 00 00 00 00	r8 = r3
    1343	79 34 f0 ff 00 00 00 00	r4 = *(u64 *)(r3 - 0x10)
    1344	79 46 10 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x10)
    1345	bf 63 00 00 00 00 00 00	r3 = r6
    1346	2d 62 01 00 00 00 00 00	if r2 > r6 goto +0x1 <LBB7_131>
    1347	bf 23 00 00 00 00 00 00	r3 = r2

0000000000002a20 <LBB7_131>
    1348	1f 26 00 00 00 00 00 00	r6 -= r2
    1349	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1350	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    1351	85 10 00 00 98 2b 00 00	call 0x2b98 ; <memcmp>
    1352	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB7_133>
    1353	bf 06 00 00 00 00 00 00	r6 = r0

0000000000002a50 <LBB7_133>
    1354	bf 61 00 00 00 00 00 00	r1 = r6
    1355	c7 01 00 00 3f 00 00 00	r1 s>>= 0x3f
    1356	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1357	0f 17 00 00 00 00 00 00	r7 += r1
    1358	bf 61 00 00 00 00 00 00	r1 = r6
    1359	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    1360	c7 01 00 00 3f 00 00 00	r1 s>>= 0x3f
    1361	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1362	bf 83 00 00 00 00 00 00	r3 = r8
    1363	0f 13 00 00 00 00 00 00	r3 += r1
    1364	bf 31 00 00 00 00 00 00	r1 = r3
    1365	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
    1366	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
    1367	65 06 d9 ff ff ff ff ff	if r6 s> -0x1 goto -0x27 <LBB7_135>
    1368	bf 71 00 00 00 00 00 00	r1 = r7
    1369	05 00 d7 ff 00 00 00 00	goto -0x29 <LBB7_135>

0000000000002ad0 <LBB7_126>
    1370	bf 79 00 00 00 00 00 00	r9 = r7
    1371	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    1372	bf 32 00 00 00 00 00 00	r2 = r3
    1373	bf 63 00 00 00 00 00 00	r3 = r6
    1374	85 10 00 00 f9 2a 00 00	call 0x2af9 ; <memcpy>
    1375	79 a5 b0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x50)
    1376	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    1377	bf 13 00 00 00 00 00 00	r3 = r1
    1378	0f 63 00 00 00 00 00 00	r3 += r6
    1379	bf 57 00 00 00 00 00 00	r7 = r5
    1380	bf 16 00 00 00 00 00 00	r6 = r1
    1381	b7 02 00 00 01 00 00 00	r2 = 0x1
    1382	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
    1383	6d 42 f8 fe 00 00 00 00	if r2 s> r4 goto -0x108 <LBB7_146>
    1384	bf 57 00 00 00 00 00 00	r7 = r5
    1385	bf 16 00 00 00 00 00 00	r6 = r1
    1386	7d 94 f5 fe 00 00 00 00	if r4 s>= r9 goto -0x10b <LBB7_146>
    1387	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    1388	67 02 00 00 04 00 00 00	r2 <<= 0x4
    1389	79 a4 58 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0xa8)
    1390	0f 24 00 00 00 00 00 00	r4 += r2
    1391	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r4
    1392	bf 16 00 00 00 00 00 00	r6 = r1
    1393	bf 57 00 00 00 00 00 00	r7 = r5
    1394	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r3
    1395	05 00 07 ff 00 00 00 00	goto -0xf9 <LBB7_129>

0000000000002ba0 <LBB7_57>
    1396	b7 05 00 00 02 00 00 00	r5 = 0x2
    1397	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    1398	bf 74 00 00 00 00 00 00	r4 = r7
    1399	bf 82 00 00 00 00 00 00	r2 = r8
    1400	15 01 1d 00 02 00 00 00	if r1 == 0x2 goto +0x1d <LBB7_95>
    1401	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    1402	67 01 00 00 04 00 00 00	r1 <<= 0x4
    1403	79 a7 20 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xe0)
    1404	0f 17 00 00 00 00 00 00	r7 += r1
    1405	b7 08 00 00 02 00 00 00	r8 = 0x2
    1406	05 00 0a 00 00 00 00 00	goto +0xa <LBB7_59>

0000000000002bf8 <LBB7_68>
    1407	bf 85 00 00 00 00 00 00	r5 = r8
    1408	65 09 15 00 ff ff ff ff	if r9 s> -0x1 goto +0x15 <LBB7_95>
    1409	07 07 00 00 10 00 00 00	r7 += 0x10
    1410	07 08 00 00 01 00 00 00	r8 += 0x1
    1411	bf 64 00 00 00 00 00 00	r4 = r6
    1412	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    1413	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    1414	bf 15 00 00 00 00 00 00	r5 = r1
    1415	2d 81 01 00 00 00 00 00	if r1 > r8 goto +0x1 <LBB7_59>
    1416	05 00 0d 00 00 00 00 00	goto +0xd <LBB7_95>

0000000000002c48 <LBB7_59>
    1417	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1418	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)
    1419	bf 63 00 00 00 00 00 00	r3 = r6
    1420	2d 64 01 00 00 00 00 00	if r4 > r6 goto +0x1 <LBB7_66>
    1421	bf 43 00 00 00 00 00 00	r3 = r4

0000000000002c70 <LBB7_66>
    1422	bf 69 00 00 00 00 00 00	r9 = r6
    1423	1f 49 00 00 00 00 00 00	r9 -= r4
    1424	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1425	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    1426	85 10 00 00 4d 2b 00 00	call 0x2b4d ; <memcmp>
    1427	15 00 eb ff 00 00 00 00	if r0 == 0x0 goto -0x15 <LBB7_68>
    1428	bf 09 00 00 00 00 00 00	r9 = r0
    1429	05 00 e9 ff 00 00 00 00	goto -0x17 <LBB7_68>

0000000000002cb0 <LBB7_95>
    1430	bf 52 00 00 00 00 00 00	r2 = r5
    1431	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    1432	0f 12 00 00 00 00 00 00	r2 += r1
    1433	b7 03 00 00 01 00 00 00	r3 = 0x1
    1434	79 a7 50 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xb0)
    1435	bf 58 00 00 00 00 00 00	r8 = r5
    1436	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB7_97>
    1437	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000002cf0 <LBB7_97>
    1438	57 03 00 00 01 00 00 00	r3 &= 0x1
    1439	55 03 3b 00 00 00 00 00	if r3 != 0x0 goto +0x3b <LBB7_99>
    1440	7b 2a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r2
    1441	2d 72 3d 00 00 00 00 00	if r2 > r7 goto +0x3d <LBB7_100>
    1442	b7 03 00 00 01 00 00 00	r3 = 0x1
    1443	b7 02 00 00 02 00 00 00	r2 = 0x2
    1444	2d 82 5b fe 00 00 00 00	if r2 > r8 goto -0x1a5 <LBB7_71>
    1445	bf 82 00 00 00 00 00 00	r2 = r8
    1446	77 02 00 00 01 00 00 00	r2 >>= 0x1
    1447	79 a3 38 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xc8)
    1448	67 03 00 00 04 00 00 00	r3 <<= 0x4
    1449	79 a4 18 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0xe8)
    1450	0f 34 00 00 00 00 00 00	r4 += r3
    1451	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x58)
    1452	67 03 00 00 04 00 00 00	r3 <<= 0x4
    1453	79 a5 10 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xf0)
    1454	0f 35 00 00 00 00 00 00	r5 += r3

0000000000002d78 <LBB7_103>
    1455	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    1456	79 40 f8 ff 00 00 00 00	r0 = *(u64 *)(r4 - 0x8)
    1457	79 46 00 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x0)
    1458	7b 65 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r6
    1459	79 56 f8 ff 00 00 00 00	r6 = *(u64 *)(r5 - 0x8)
    1460	7b 05 f8 ff 00 00 00 00	*(u64 *)(r5 - 0x8) = r0
    1461	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    1462	7b 64 f8 ff 00 00 00 00	*(u64 *)(r4 - 0x8) = r6
    1463	07 04 00 00 f0 ff ff ff	r4 += -0x10
    1464	07 05 00 00 10 00 00 00	r5 += 0x10
    1465	07 02 00 00 ff ff ff ff	r2 += -0x1
    1466	bf 83 00 00 00 00 00 00	r3 = r8
    1467	15 02 44 fe 00 00 00 00	if r2 == 0x0 goto -0x1bc <LBB7_71>
    1468	05 00 f2 ff 00 00 00 00	goto -0xe <LBB7_103>

0000000000002de8 <LBB7_159>
    1469	18 08 00 00 03 00 00 00 00 00 00 00 15 00 00 00	r8 = 0x1500000003 ll

0000000000002df8 <LBB7_160>
    1471	bf 80 00 00 00 00 00 00	r0 = r8
    1472	95 00 00 00 00 00 00 00	exit

0000000000002e08 <LBB7_119>
    1473	bf 21 00 00 00 00 00 00	r1 = r2
    1474	bf 72 00 00 00 00 00 00	r2 = r7
    1475	18 03 00 00 d8 9d 01 00 00 00 00 00 00 00 00 00	r3 = 0x19dd8 ll
    1477	85 10 00 00 0a 25 00 00	call 0x250a ; <core::slice::index::slice_index_order_fail>
    1478	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002e38 <LBB7_120>
    1479	bf 71 00 00 00 00 00 00	r1 = r7
    1480	79 a2 50 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xb0)
    1481	18 03 00 00 d8 9d 01 00 00 00 00 00 00 00 00 00	r3 = 0x19dd8 ll
    1483	85 10 00 00 e8 24 00 00	call 0x24e8 ; <core::slice::index::slice_end_index_len_fail>
    1484	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002e68 <LBB7_76>
    1485	18 01 00 00 6a 8a 01 00 00 00 00 00 00 00 00 00	r1 = 0x18a6a ll
    1487	b7 02 00 00 2c 00 00 00	r2 = 0x2c
    1488	18 03 00 00 50 9e 01 00 00 00 00 00 00 00 00 00	r3 = 0x19e50 ll
    1490	85 10 00 00 3e 1e 00 00	call 0x1e3e ; <core::panicking::panic>
    1491	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002ea0 <LBB7_168>
    1492	18 01 00 00 3f 8a 01 00 00 00 00 00 00 00 00 00	r1 = 0x18a3f ll
    1494	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    1495	18 03 00 00 20 9e 01 00 00 00 00 00 00 00 00 00	r3 = 0x19e20 ll
    1497	85 10 00 00 37 1e 00 00	call 0x1e37 ; <core::panicking::panic>
    1498	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002ed8 <LBB7_99>
    1499	18 03 00 00 90 9d 01 00 00 00 00 00 00 00 00 00	r3 = 0x19d90 ll
    1501	85 10 00 00 f2 24 00 00	call 0x24f2 ; <core::slice::index::slice_index_order_fail>
    1502	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002ef8 <LBB7_100>
    1503	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
    1504	bf 72 00 00 00 00 00 00	r2 = r7
    1505	18 03 00 00 90 9d 01 00 00 00 00 00 00 00 00 00	r3 = 0x19d90 ll
    1507	85 10 00 00 d0 24 00 00	call 0x24d0 ; <core::slice::index::slice_end_index_len_fail>
    1508	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002f28 <LBB7_166>
    1509	b7 01 00 00 08 00 00 00	r1 = 0x8
    1510	85 10 00 00 c0 1b 00 00	call 0x1bc0 ; <alloc::alloc::handle_alloc_error>
    1511	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002f40 <<core::hash::sip::Hasher<S> as core::hash::Hasher>::write>
    1512	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    1513	79 12 30 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x30)
    1514	0f 32 00 00 00 00 00 00	r2 += r3
    1515	7b 21 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r2
    1516	b7 02 00 00 00 00 00 00	r2 = 0x0
    1517	79 18 40 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x40)
    1518	15 08 4e 00 00 00 00 00	if r8 == 0x0 goto +0x4e <LBB8_11>
    1519	b7 02 00 00 08 00 00 00	r2 = 0x8
    1520	1f 82 00 00 00 00 00 00	r2 -= r8
    1521	bf 37 00 00 00 00 00 00	r7 = r3
    1522	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB8_3>
    1523	bf 27 00 00 00 00 00 00	r7 = r2

0000000000002fa0 <LBB8_3>
    1524	b7 06 00 00 00 00 00 00	r6 = 0x0
    1525	b7 00 00 00 00 00 00 00	r0 = 0x0
    1526	25 07 98 00 03 00 00 00	if r7 > 0x3 goto +0x98 <LBB8_5>

0000000000002fb8 <LBB8_4>
    1527	bf 04 00 00 00 00 00 00	r4 = r0
    1528	47 04 00 00 01 00 00 00	r4 |= 0x1
    1529	2d 47 99 00 00 00 00 00	if r7 > r4 goto +0x99 <LBB8_6>
    1530	2d 07 01 00 00 00 00 00	if r7 > r0 goto +0x1 <LBB8_8>
    1531	05 00 07 00 00 00 00 00	goto +0x7 <LBB8_9>

0000000000002fe0 <LBB8_8>
    1532	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    1533	0f 04 00 00 00 00 00 00	r4 += r0
    1534	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    1535	67 00 00 00 03 00 00 00	r0 <<= 0x3
    1536	6f 04 00 00 00 00 00 00	r4 <<= r0
    1537	4f 64 00 00 00 00 00 00	r4 |= r6
    1538	bf 46 00 00 00 00 00 00	r6 = r4

0000000000003018 <LBB8_9>
    1539	bf 84 00 00 00 00 00 00	r4 = r8
    1540	67 04 00 00 03 00 00 00	r4 <<= 0x3
    1541	57 04 00 00 38 00 00 00	r4 &= 0x38
    1542	6f 46 00 00 00 00 00 00	r6 <<= r4
    1543	79 10 38 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x38)
    1544	4f 60 00 00 00 00 00 00	r0 |= r6
    1545	7b 01 38 00 00 00 00 00	*(u64 *)(r1 + 0x38) = r0
    1546	2d 32 93 00 00 00 00 00	if r2 > r3 goto +0x93 <LBB8_22>
    1547	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x0)
    1548	79 17 10 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x10)
    1549	bf 75 00 00 00 00 00 00	r5 = r7
    1550	0f 45 00 00 00 00 00 00	r5 += r4
    1551	bf 74 00 00 00 00 00 00	r4 = r7
    1552	77 04 00 00 33 00 00 00	r4 >>= 0x33
    1553	67 07 00 00 0d 00 00 00	r7 <<= 0xd
    1554	4f 47 00 00 00 00 00 00	r7 |= r4
    1555	af 57 00 00 00 00 00 00	r7 ^= r5
    1556	bf 74 00 00 00 00 00 00	r4 = r7
    1557	77 04 00 00 2f 00 00 00	r4 >>= 0x2f
    1558	bf 79 00 00 00 00 00 00	r9 = r7
    1559	67 09 00 00 11 00 00 00	r9 <<= 0x11
    1560	4f 49 00 00 00 00 00 00	r9 |= r4
    1561	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    1562	af 04 00 00 00 00 00 00	r4 ^= r0
    1563	79 16 08 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x8)
    1564	0f 46 00 00 00 00 00 00	r6 += r4
    1565	bf 68 00 00 00 00 00 00	r8 = r6
    1566	0f 78 00 00 00 00 00 00	r8 += r7
    1567	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r0
    1568	bf 80 00 00 00 00 00 00	r0 = r8
    1569	77 00 00 00 20 00 00 00	r0 >>= 0x20
    1570	bf 87 00 00 00 00 00 00	r7 = r8
    1571	67 07 00 00 20 00 00 00	r7 <<= 0x20
    1572	4f 07 00 00 00 00 00 00	r7 |= r0
    1573	af 98 00 00 00 00 00 00	r8 ^= r9
    1574	bf 50 00 00 00 00 00 00	r0 = r5
    1575	77 00 00 00 20 00 00 00	r0 >>= 0x20
    1576	67 05 00 00 20 00 00 00	r5 <<= 0x20
    1577	4f 05 00 00 00 00 00 00	r5 |= r0
    1578	bf 40 00 00 00 00 00 00	r0 = r4
    1579	77 00 00 00 30 00 00 00	r0 >>= 0x30
    1580	67 04 00 00 10 00 00 00	r4 <<= 0x10
    1581	4f 04 00 00 00 00 00 00	r4 |= r0
    1582	af 46 00 00 00 00 00 00	r6 ^= r4
    1583	7b 81 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r8
    1584	7b 71 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r7
    1585	bf 64 00 00 00 00 00 00	r4 = r6
    1586	0f 54 00 00 00 00 00 00	r4 += r5
    1587	bf 45 00 00 00 00 00 00	r5 = r4
    1588	79 a0 f0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x10)
    1589	af 05 00 00 00 00 00 00	r5 ^= r0
    1590	7b 51 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r5
    1591	bf 65 00 00 00 00 00 00	r5 = r6
    1592	77 05 00 00 2b 00 00 00	r5 >>= 0x2b
    1593	67 06 00 00 15 00 00 00	r6 <<= 0x15
    1594	4f 56 00 00 00 00 00 00	r6 |= r5
    1595	af 46 00 00 00 00 00 00	r6 ^= r4
    1596	7b 61 18 00 00 00 00 00	*(u64 *)(r1 + 0x18) = r6

00000000000031e8 <LBB8_11>
    1597	1f 23 00 00 00 00 00 00	r3 -= r2
    1598	bf 38 00 00 00 00 00 00	r8 = r3
    1599	57 08 00 00 07 00 00 00	r8 &= 0x7
    1600	57 03 00 00 f8 ff ff ff	r3 &= -0x8
    1601	3d 32 3a 00 00 00 00 00	if r2 >= r3 goto +0x3a <LBB8_15>
    1602	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    1603	79 15 08 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x8)
    1604	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)
    1605	79 17 18 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x18)
    1606	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1607	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    1608	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)

0000000000003248 <LBB8_13>
    1609	bf 68 00 00 00 00 00 00	r8 = r6
    1610	0f 98 00 00 00 00 00 00	r8 += r9
    1611	bf 64 00 00 00 00 00 00	r4 = r6
    1612	77 04 00 00 33 00 00 00	r4 >>= 0x33
    1613	67 06 00 00 0d 00 00 00	r6 <<= 0xd
    1614	4f 46 00 00 00 00 00 00	r6 |= r4
    1615	af 86 00 00 00 00 00 00	r6 ^= r8
    1616	bf 64 00 00 00 00 00 00	r4 = r6
    1617	77 04 00 00 2f 00 00 00	r4 >>= 0x2f
    1618	bf 69 00 00 00 00 00 00	r9 = r6
    1619	67 09 00 00 11 00 00 00	r9 <<= 0x11
    1620	4f 49 00 00 00 00 00 00	r9 |= r4
    1621	bf 84 00 00 00 00 00 00	r4 = r8
    1622	77 04 00 00 20 00 00 00	r4 >>= 0x20
    1623	67 08 00 00 20 00 00 00	r8 <<= 0x20
    1624	4f 48 00 00 00 00 00 00	r8 |= r4
    1625	bf 14 00 00 00 00 00 00	r4 = r1
    1626	0f 24 00 00 00 00 00 00	r4 += r2
    1627	79 44 00 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x0)
    1628	af 47 00 00 00 00 00 00	r7 ^= r4
    1629	bf 70 00 00 00 00 00 00	r0 = r7
    1630	77 00 00 00 30 00 00 00	r0 >>= 0x30
    1631	0f 75 00 00 00 00 00 00	r5 += r7
    1632	67 07 00 00 10 00 00 00	r7 <<= 0x10
    1633	4f 07 00 00 00 00 00 00	r7 |= r0
    1634	bf 50 00 00 00 00 00 00	r0 = r5
    1635	af 70 00 00 00 00 00 00	r0 ^= r7
    1636	0f 65 00 00 00 00 00 00	r5 += r6
    1637	bf 56 00 00 00 00 00 00	r6 = r5
    1638	af 96 00 00 00 00 00 00	r6 ^= r9
    1639	bf 57 00 00 00 00 00 00	r7 = r5
    1640	77 07 00 00 20 00 00 00	r7 >>= 0x20
    1641	67 05 00 00 20 00 00 00	r5 <<= 0x20
    1642	4f 75 00 00 00 00 00 00	r5 |= r7
    1643	bf 09 00 00 00 00 00 00	r9 = r0
    1644	0f 89 00 00 00 00 00 00	r9 += r8
    1645	bf 07 00 00 00 00 00 00	r7 = r0
    1646	77 07 00 00 2b 00 00 00	r7 >>= 0x2b
    1647	67 00 00 00 15 00 00 00	r0 <<= 0x15
    1648	4f 70 00 00 00 00 00 00	r0 |= r7
    1649	af 90 00 00 00 00 00 00	r0 ^= r9
    1650	af 49 00 00 00 00 00 00	r9 ^= r4
    1651	07 02 00 00 08 00 00 00	r2 += 0x8
    1652	bf 07 00 00 00 00 00 00	r7 = r0
    1653	2d 23 d3 ff 00 00 00 00	if r3 > r2 goto -0x2d <LBB8_13>
    1654	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    1655	7b 61 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r6
    1656	7b 01 18 00 00 00 00 00	*(u64 *)(r1 + 0x18) = r0
    1657	7b 51 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r5
    1658	7b 91 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r9
    1659	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)

00000000000033e0 <LBB8_15>
    1660	b7 03 00 00 00 00 00 00	r3 = 0x0
    1661	b7 00 00 00 00 00 00 00	r0 = 0x0
    1662	25 08 22 00 03 00 00 00	if r8 > 0x3 goto +0x22 <LBB8_17>

00000000000033f8 <LBB8_16>
    1663	bf 04 00 00 00 00 00 00	r4 = r0
    1664	47 04 00 00 01 00 00 00	r4 |= 0x1
    1665	2d 48 24 00 00 00 00 00	if r8 > r4 goto +0x24 <LBB8_18>
    1666	2d 08 01 00 00 00 00 00	if r8 > r0 goto +0x1 <LBB8_20>
    1667	05 00 09 00 00 00 00 00	goto +0x9 <LBB8_21>

0000000000003420 <LBB8_20>
    1668	bf 04 00 00 00 00 00 00	r4 = r0
    1669	0f 24 00 00 00 00 00 00	r4 += r2
    1670	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    1671	0f 42 00 00 00 00 00 00	r2 += r4
    1672	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    1673	67 00 00 00 03 00 00 00	r0 <<= 0x3
    1674	6f 02 00 00 00 00 00 00	r2 <<= r0
    1675	4f 32 00 00 00 00 00 00	r2 |= r3
    1676	bf 23 00 00 00 00 00 00	r3 = r2

0000000000003468 <LBB8_21>
    1677	7b 31 38 00 00 00 00 00	*(u64 *)(r1 + 0x38) = r3
    1678	05 00 10 00 00 00 00 00	goto +0x10 <LBB8_23>

0000000000003478 <LBB8_5>
    1679	b7 00 00 00 04 00 00 00	r0 = 0x4
    1680	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    1681	61 46 00 00 00 00 00 00	r6 = *(u32 *)(r4 + 0x0)
    1682	05 00 64 ff 00 00 00 00	goto -0x9c <LBB8_4>

0000000000003498 <LBB8_6>
    1683	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    1684	0f 04 00 00 00 00 00 00	r4 += r0
    1685	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    1686	bf 05 00 00 00 00 00 00	r5 = r0
    1687	67 05 00 00 03 00 00 00	r5 <<= 0x3
    1688	6f 54 00 00 00 00 00 00	r4 <<= r5
    1689	4f 64 00 00 00 00 00 00	r4 |= r6
    1690	47 00 00 00 02 00 00 00	r0 |= 0x2
    1691	bf 46 00 00 00 00 00 00	r6 = r4
    1692	2d 07 5f ff 00 00 00 00	if r7 > r0 goto -0xa1 <LBB8_8>
    1693	05 00 65 ff 00 00 00 00	goto -0x9b <LBB8_9>

00000000000034f0 <LBB8_22>
    1694	0f 38 00 00 00 00 00 00	r8 += r3

00000000000034f8 <LBB8_23>
    1695	7b 81 40 00 00 00 00 00	*(u64 *)(r1 + 0x40) = r8
    1696	95 00 00 00 00 00 00 00	exit

0000000000003508 <LBB8_17>
    1697	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
    1698	0f 23 00 00 00 00 00 00	r3 += r2
    1699	b7 00 00 00 04 00 00 00	r0 = 0x4
    1700	61 33 00 00 00 00 00 00	r3 = *(u32 *)(r3 + 0x0)
    1701	05 00 d9 ff 00 00 00 00	goto -0x27 <LBB8_16>

0000000000003530 <LBB8_18>
    1702	bf 04 00 00 00 00 00 00	r4 = r0
    1703	0f 24 00 00 00 00 00 00	r4 += r2
    1704	79 a5 f8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x8)
    1705	0f 45 00 00 00 00 00 00	r5 += r4
    1706	69 54 00 00 00 00 00 00	r4 = *(u16 *)(r5 + 0x0)
    1707	bf 05 00 00 00 00 00 00	r5 = r0
    1708	67 05 00 00 03 00 00 00	r5 <<= 0x3
    1709	6f 54 00 00 00 00 00 00	r4 <<= r5
    1710	4f 34 00 00 00 00 00 00	r4 |= r3
    1711	47 00 00 00 02 00 00 00	r0 |= 0x2
    1712	bf 43 00 00 00 00 00 00	r3 = r4
    1713	2d 08 d2 ff 00 00 00 00	if r8 > r0 goto -0x2e <LBB8_20>
    1714	05 00 da ff 00 00 00 00	goto -0x26 <LBB8_21>

0000000000003598 <hashbrown::map::HashMap<K,V,S,A>::insert>
    1715	7b 4a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r4
    1716	bf 37 00 00 00 00 00 00	r7 = r3
    1717	bf 26 00 00 00 00 00 00	r6 = r2
    1718	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    1719	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    1720	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    1721	85 10 00 00 78 f9 ff ff	call -0x688 ; <core::hash::BuildHasher::hash_one>
    1722	bf 08 00 00 00 00 00 00	r8 = r0
    1723	79 61 10 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x10)
    1724	55 01 04 00 00 00 00 00	if r1 != 0x0 goto +0x4 <LBB9_2>
    1725	bf 62 00 00 00 00 00 00	r2 = r6
    1726	07 02 00 00 20 00 00 00	r2 += 0x20
    1727	bf 61 00 00 00 00 00 00	r1 = r6
    1728	85 10 00 00 fa 00 00 00	call 0xfa ; <hashbrown::raw::RawTable<T,A>::reserve_rehash>

0000000000003608 <LBB9_2>
    1729	b7 01 00 00 00 00 00 00	r1 = 0x0
    1730	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1731	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1732	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    1733	7b 7a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r7
    1734	79 73 10 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x10)
    1735	bf 81 00 00 00 00 00 00	r1 = r8
    1736	77 01 00 00 39 00 00 00	r1 >>= 0x39
    1737	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    1739	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    1740	2f 21 00 00 00 00 00 00	r1 *= r2
    1741	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    1742	79 65 08 00 00 00 00 00	r5 = *(u64 *)(r6 + 0x8)
    1743	7b 6a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r6
    1744	79 64 00 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x0)
    1745	bf 41 00 00 00 00 00 00	r1 = r4
    1746	07 01 00 00 d0 ff ff ff	r1 += -0x30
    1747	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    1748	18 00 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r0 = -0x7f7f7f7f7f7f7f80 ll
    1750	b7 01 00 00 00 00 00 00	r1 = 0x0
    1751	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    1752	bf 87 00 00 00 00 00 00	r7 = r8
    1753	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    1754	7b 4a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r4

00000000000036d8 <LBB9_3>
    1755	5f 57 00 00 00 00 00 00	r7 &= r5
    1756	0f 74 00 00 00 00 00 00	r4 += r7
    1757	79 46 00 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x0)
    1758	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
    1759	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    1760	af 16 00 00 00 00 00 00	r6 ^= r1
    1761	bf 61 00 00 00 00 00 00	r1 = r6
    1762	18 02 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r2 = -0x101010101010101 ll
    1764	0f 21 00 00 00 00 00 00	r1 += r2
    1765	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
    1766	5f 16 00 00 00 00 00 00	r6 &= r1
    1767	5f 06 00 00 00 00 00 00	r6 &= r0
    1768	15 06 32 00 00 00 00 00	if r6 == 0x0 goto +0x32 <LBB9_22>
    1769	bf 69 00 00 00 00 00 00	r9 = r6
    1770	7b 7a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r7

0000000000003758 <LBB9_5>
    1771	07 09 00 00 ff ff ff ff	r9 += -0x1
    1772	bf 61 00 00 00 00 00 00	r1 = r6
    1773	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    1774	5f 91 00 00 00 00 00 00	r1 &= r9
    1775	bf 12 00 00 00 00 00 00	r2 = r1
    1776	77 02 00 00 01 00 00 00	r2 >>= 0x1
    1777	18 04 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r4 = 0x5555555555555555 ll
    1779	5f 42 00 00 00 00 00 00	r2 &= r4
    1780	1f 21 00 00 00 00 00 00	r1 -= r2
    1781	bf 18 00 00 00 00 00 00	r8 = r1
    1782	18 02 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r2 = 0x3333333333333333 ll
    1784	5f 28 00 00 00 00 00 00	r8 &= r2
    1785	77 01 00 00 02 00 00 00	r1 >>= 0x2
    1786	5f 21 00 00 00 00 00 00	r1 &= r2
    1787	0f 18 00 00 00 00 00 00	r8 += r1
    1788	bf 81 00 00 00 00 00 00	r1 = r8
    1789	77 01 00 00 04 00 00 00	r1 >>= 0x4
    1790	0f 18 00 00 00 00 00 00	r8 += r1
    1791	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    1793	5f 18 00 00 00 00 00 00	r8 &= r1
    1794	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    1796	2f 18 00 00 00 00 00 00	r8 *= r1
    1797	77 08 00 00 3b 00 00 00	r8 >>= 0x3b
    1798	0f 78 00 00 00 00 00 00	r8 += r7
    1799	5f 58 00 00 00 00 00 00	r8 &= r5
    1800	87 08 00 00 00 00 00 00	r8 = -r8
    1801	27 08 00 00 30 00 00 00	r8 *= 0x30
    1802	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    1803	0f 81 00 00 00 00 00 00	r1 += r8
    1804	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1805	5d 23 09 00 00 00 00 00	if r3 != r2 goto +0x9 <LBB9_7>
    1806	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1807	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    1808	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1809	bf 57 00 00 00 00 00 00	r7 = r5
    1810	85 10 00 00 cd 29 00 00	call 0x29cd ; <memcmp>
    1811	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1812	bf 75 00 00 00 00 00 00	r5 = r7
    1813	79 a7 b8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x48)
    1814	15 00 3b 00 00 00 00 00	if r0 == 0x0 goto +0x3b <LBB9_21>

00000000000038b8 <LBB9_7>
    1815	5f 69 00 00 00 00 00 00	r9 &= r6
    1816	bf 96 00 00 00 00 00 00	r6 = r9
    1817	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB9_22>
    1818	05 00 d0 ff 00 00 00 00	goto -0x30 <LBB9_5>

00000000000038d8 <LBB9_22>
    1819	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
    1820	bf 61 00 00 00 00 00 00	r1 = r6
    1821	18 00 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r0 = -0x7f7f7f7f7f7f7f80 ll
    1823	5f 01 00 00 00 00 00 00	r1 &= r0
    1824	b7 02 00 00 01 00 00 00	r2 = 0x1
    1825	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x60)
    1826	15 04 24 00 01 00 00 00	if r4 == 0x1 goto +0x24 <LBB9_13>
    1827	15 01 1d 00 00 00 00 00	if r1 == 0x0 goto +0x1d <LBB9_10>
    1828	bf 12 00 00 00 00 00 00	r2 = r1
    1829	07 02 00 00 ff ff ff ff	r2 += -0x1
    1830	bf 13 00 00 00 00 00 00	r3 = r1
    1831	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    1832	5f 23 00 00 00 00 00 00	r3 &= r2
    1833	bf 32 00 00 00 00 00 00	r2 = r3
    1834	77 02 00 00 01 00 00 00	r2 >>= 0x1
    1835	18 04 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r4 = 0x5555555555555555 ll
    1837	5f 42 00 00 00 00 00 00	r2 &= r4
    1838	1f 23 00 00 00 00 00 00	r3 -= r2
    1839	bf 34 00 00 00 00 00 00	r4 = r3
    1840	18 02 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r2 = 0x3333333333333333 ll
    1842	5f 24 00 00 00 00 00 00	r4 &= r2
    1843	77 03 00 00 02 00 00 00	r3 >>= 0x2
    1844	5f 23 00 00 00 00 00 00	r3 &= r2
    1845	0f 34 00 00 00 00 00 00	r4 += r3
    1846	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1847	bf 42 00 00 00 00 00 00	r2 = r4
    1848	77 02 00 00 04 00 00 00	r2 >>= 0x4
    1849	0f 24 00 00 00 00 00 00	r4 += r2
    1850	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    1852	5f 24 00 00 00 00 00 00	r4 &= r2
    1853	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    1855	2f 24 00 00 00 00 00 00	r4 *= r2
    1856	77 04 00 00 3b 00 00 00	r4 >>= 0x3b

0000000000003a08 <LBB9_10>
    1857	b7 02 00 00 01 00 00 00	r2 = 0x1
    1858	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB9_12>
    1859	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000003a20 <LBB9_12>
    1860	0f 74 00 00 00 00 00 00	r4 += r7
    1861	5f 54 00 00 00 00 00 00	r4 &= r5
    1862	7b 4a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r4

0000000000003a38 <LBB9_13>
    1863	67 06 00 00 01 00 00 00	r6 <<= 0x1
    1864	5f 61 00 00 00 00 00 00	r1 &= r6
    1865	79 a4 88 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x78)
    1866	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB9_14>
    1867	05 00 17 00 00 00 00 00	goto +0x17 <LBB9_15>

0000000000003a60 <LBB9_14>
    1868	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    1869	07 01 00 00 08 00 00 00	r1 += 0x8
    1870	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1871	0f 17 00 00 00 00 00 00	r7 += r1
    1872	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    1873	05 00 89 ff 00 00 00 00	goto -0x77 <LBB9_3>

0000000000003a90 <LBB9_21>
    1874	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)
    1875	0f 83 00 00 00 00 00 00	r3 += r8
    1876	79 31 f8 ff 00 00 00 00	r1 = *(u64 *)(r3 - 0x8)
    1877	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    1878	7b 12 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r1
    1879	79 31 f0 ff 00 00 00 00	r1 = *(u64 *)(r3 - 0x10)
    1880	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    1881	79 31 e8 ff 00 00 00 00	r1 = *(u64 *)(r3 - 0x18)
    1882	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1883	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    1884	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1885	7b 13 e8 ff 00 00 00 00	*(u64 *)(r3 - 0x18) = r1
    1886	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    1887	7b 13 f0 ff 00 00 00 00	*(u64 *)(r3 - 0x10) = r1
    1888	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
    1889	7b 13 f8 ff 00 00 00 00	*(u64 *)(r3 - 0x8) = r1

0000000000003b10 <LBB9_20>
    1890	95 00 00 00 00 00 00 00	exit

0000000000003b18 <LBB9_15>
    1891	bf 50 00 00 00 00 00 00	r0 = r5
    1892	bf 41 00 00 00 00 00 00	r1 = r4
    1893	79 a7 70 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x90)
    1894	0f 71 00 00 00 00 00 00	r1 += r7
    1895	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    1896	67 01 00 00 38 00 00 00	r1 <<= 0x38
    1897	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    1898	b7 06 00 00 00 00 00 00	r6 = 0x0
    1899	79 a5 60 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xa0)
    1900	6d 16 24 00 00 00 00 00	if r6 s> r1 goto +0x24 <LBB9_19>
    1901	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    1902	18 02 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r2 = -0x7f7f7f7f7f7f7f80 ll
    1904	5f 21 00 00 00 00 00 00	r1 &= r2
    1905	15 01 1c 00 00 00 00 00	if r1 == 0x0 goto +0x1c <LBB9_18>
    1906	bf 12 00 00 00 00 00 00	r2 = r1
    1907	07 02 00 00 ff ff ff ff	r2 += -0x1
    1908	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    1909	5f 21 00 00 00 00 00 00	r1 &= r2
    1910	bf 12 00 00 00 00 00 00	r2 = r1
    1911	77 02 00 00 01 00 00 00	r2 >>= 0x1
    1912	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    1914	5f 32 00 00 00 00 00 00	r2 &= r3
    1915	1f 21 00 00 00 00 00 00	r1 -= r2
    1916	18 02 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r2 = 0x3333333333333333 ll
    1918	bf 13 00 00 00 00 00 00	r3 = r1
    1919	5f 23 00 00 00 00 00 00	r3 &= r2
    1920	77 01 00 00 02 00 00 00	r1 >>= 0x2
    1921	5f 21 00 00 00 00 00 00	r1 &= r2
    1922	bf 37 00 00 00 00 00 00	r7 = r3
    1923	0f 17 00 00 00 00 00 00	r7 += r1
    1924	bf 71 00 00 00 00 00 00	r1 = r7
    1925	77 01 00 00 04 00 00 00	r1 >>= 0x4
    1926	0f 17 00 00 00 00 00 00	r7 += r1
    1927	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    1929	5f 17 00 00 00 00 00 00	r7 &= r1
    1930	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    1932	2f 17 00 00 00 00 00 00	r7 *= r1
    1933	77 07 00 00 3b 00 00 00	r7 >>= 0x3b

0000000000003c70 <LBB9_18>
    1934	bf 41 00 00 00 00 00 00	r1 = r4
    1935	0f 71 00 00 00 00 00 00	r1 += r7
    1936	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)

0000000000003c88 <LBB9_19>
    1937	79 52 10 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x10)
    1938	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    1939	79 52 08 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x8)
    1940	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    1941	79 52 00 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x0)
    1942	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    1943	79 a3 78 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x88)
    1944	79 32 00 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x0)
    1945	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    1946	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    1947	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    1948	79 32 10 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x10)
    1949	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    1950	57 01 00 00 01 00 00 00	r1 &= 0x1
    1951	79 a3 68 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x98)
    1952	79 32 10 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x10)
    1953	1f 12 00 00 00 00 00 00	r2 -= r1
    1954	7b 23 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r2
    1955	bf 41 00 00 00 00 00 00	r1 = r4
    1956	0f 71 00 00 00 00 00 00	r1 += r7
    1957	79 a2 58 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xa8)
    1958	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r2
    1959	bf 71 00 00 00 00 00 00	r1 = r7
    1960	07 01 00 00 f8 ff ff ff	r1 += -0x8
    1961	5f 10 00 00 00 00 00 00	r0 &= r1
    1962	0f 40 00 00 00 00 00 00	r0 += r4
    1963	73 20 08 00 00 00 00 00	*(u8 *)(r0 + 0x8) = r2
    1964	79 31 18 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x18)
    1965	07 01 00 00 01 00 00 00	r1 += 0x1
    1966	7b 13 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r1
    1967	87 07 00 00 00 00 00 00	r7 = -r7
    1968	27 07 00 00 30 00 00 00	r7 *= 0x30
    1969	0f 74 00 00 00 00 00 00	r4 += r7
    1970	07 04 00 00 d0 ff ff ff	r4 += -0x30
    1971	bf a2 00 00 00 00 00 00	r2 = r10
    1972	07 02 00 00 d0 ff ff ff	r2 += -0x30
    1973	bf 41 00 00 00 00 00 00	r1 = r4
    1974	b7 03 00 00 30 00 00 00	r3 = 0x30
    1975	85 10 00 00 a0 28 00 00	call 0x28a0 ; <memcpy>
    1976	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    1977	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    1978	05 00 a7 ff 00 00 00 00	goto -0x59 <LBB9_20>

0000000000003dd8 <hashbrown::raw::RawTable<T,A>::reserve_rehash>
    1979	bf 27 00 00 00 00 00 00	r7 = r2
    1980	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    1981	bf 34 00 00 00 00 00 00	r4 = r3
    1982	07 04 00 00 01 00 00 00	r4 += 0x1
    1983	b7 02 00 00 01 00 00 00	r2 = 0x1
    1984	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB10_2>
    1985	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000003e10 <LBB10_2>
    1986	55 02 06 00 01 00 00 00	if r2 != 0x1 goto +0x6 <LBB10_4>
    1987	bf a1 00 00 00 00 00 00	r1 = r10
    1988	07 01 00 00 b0 ff ff ff	r1 += -0x50
    1989	b7 02 00 00 01 00 00 00	r2 = 0x1
    1990	85 10 00 00 fd 18 00 00	call 0x18fd ; <hashbrown::raw::Fallibility::capacity_overflow>
    1991	79 a0 b0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x50)
    1992	05 00 6f 03 00 00 00 00	goto +0x36f <LBB10_87>

0000000000003e48 <LBB10_4>
    1993	7b 3a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r3
    1994	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1995	79 19 08 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x8)
    1996	bf 96 00 00 00 00 00 00	r6 = r9
    1997	07 06 00 00 01 00 00 00	r6 += 0x1
    1998	bf 62 00 00 00 00 00 00	r2 = r6
    1999	77 02 00 00 03 00 00 00	r2 >>= 0x3
    2000	b7 03 00 00 08 00 00 00	r3 = 0x8
    2001	bf 91 00 00 00 00 00 00	r1 = r9
    2002	2d 93 02 00 00 00 00 00	if r3 > r9 goto +0x2 <LBB10_6>
    2003	bf 21 00 00 00 00 00 00	r1 = r2
    2004	27 01 00 00 07 00 00 00	r1 *= 0x7

0000000000003ea8 <LBB10_6>
    2005	bf 13 00 00 00 00 00 00	r3 = r1
    2006	77 03 00 00 01 00 00 00	r3 >>= 0x1
    2007	3d 43 3d 00 00 00 00 00	if r3 >= r4 goto +0x3d <LBB10_49>
    2008	07 01 00 00 01 00 00 00	r1 += 0x1
    2009	2d 14 01 00 00 00 00 00	if r4 > r1 goto +0x1 <LBB10_9>
    2010	bf 14 00 00 00 00 00 00	r4 = r1

0000000000003ed8 <LBB10_9>
    2011	b7 02 00 00 08 00 00 00	r2 = 0x8
    2012	2d 42 68 02 00 00 00 00	if r2 > r4 goto +0x268 <LBB10_11>
    2013	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 20	r2 = 0x2000000000000000 ll
    2015	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB10_13>
    2016	05 00 6d 02 00 00 00 00	goto +0x26d <LBB10_15>

0000000000003f08 <LBB10_13>
    2017	67 04 00 00 03 00 00 00	r4 <<= 0x3
    2018	b7 08 00 00 01 00 00 00	r8 = 0x1
    2019	b7 02 00 00 0e 00 00 00	r2 = 0xe
    2020	2d 42 72 02 00 00 00 00	if r2 > r4 goto +0x272 <LBB10_16>
    2021	37 04 00 00 07 00 00 00	r4 /= 0x7
    2022	07 04 00 00 ff ff ff ff	r4 += -0x1
    2023	bf 42 00 00 00 00 00 00	r2 = r4
    2024	77 02 00 00 01 00 00 00	r2 >>= 0x1
    2025	4f 24 00 00 00 00 00 00	r4 |= r2
    2026	bf 42 00 00 00 00 00 00	r2 = r4
    2027	77 02 00 00 02 00 00 00	r2 >>= 0x2
    2028	4f 24 00 00 00 00 00 00	r4 |= r2
    2029	bf 42 00 00 00 00 00 00	r2 = r4
    2030	77 02 00 00 04 00 00 00	r2 >>= 0x4
    2031	4f 24 00 00 00 00 00 00	r4 |= r2
    2032	bf 42 00 00 00 00 00 00	r2 = r4
    2033	77 02 00 00 08 00 00 00	r2 >>= 0x8
    2034	4f 24 00 00 00 00 00 00	r4 |= r2
    2035	bf 42 00 00 00 00 00 00	r2 = r4
    2036	77 02 00 00 10 00 00 00	r2 >>= 0x10
    2037	4f 24 00 00 00 00 00 00	r4 |= r2
    2038	bf 42 00 00 00 00 00 00	r2 = r4
    2039	77 02 00 00 20 00 00 00	r2 >>= 0x20
    2040	4f 24 00 00 00 00 00 00	r4 |= r2
    2041	a7 04 00 00 ff ff ff ff	r4 ^= -0x1
    2042	18 02 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r2 = 0x5555555555555555 ll
    2044	bf 43 00 00 00 00 00 00	r3 = r4
    2045	77 03 00 00 01 00 00 00	r3 >>= 0x1
    2046	5f 23 00 00 00 00 00 00	r3 &= r2
    2047	1f 34 00 00 00 00 00 00	r4 -= r3
    2048	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    2050	bf 42 00 00 00 00 00 00	r2 = r4
    2051	5f 32 00 00 00 00 00 00	r2 &= r3
    2052	77 04 00 00 02 00 00 00	r4 >>= 0x2
    2053	5f 34 00 00 00 00 00 00	r4 &= r3
    2054	0f 42 00 00 00 00 00 00	r2 += r4
    2055	bf 21 00 00 00 00 00 00	r1 = r2
    2056	77 01 00 00 04 00 00 00	r1 >>= 0x4
    2057	0f 12 00 00 00 00 00 00	r2 += r1
    2058	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    2060	5f 12 00 00 00 00 00 00	r2 &= r1
    2061	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    2063	2f 12 00 00 00 00 00 00	r2 *= r1
    2064	77 02 00 00 38 00 00 00	r2 >>= 0x38
    2065	b7 08 00 00 ff ff ff ff	r8 = -0x1
    2066	7f 28 00 00 00 00 00 00	r8 >>= r2
    2067	07 08 00 00 01 00 00 00	r8 += 0x1
    2068	05 00 42 02 00 00 00 00	goto +0x242 <LBB10_16>

00000000000040a8 <LBB10_49>
    2069	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    2070	bf 63 00 00 00 00 00 00	r3 = r6
    2071	57 03 00 00 07 00 00 00	r3 &= 0x7
    2072	b7 01 00 00 01 00 00 00	r1 = 0x1
    2073	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB10_51>
    2074	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000040d8 <LBB10_51>
    2075	0f 12 00 00 00 00 00 00	r2 += r1
    2076	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)
    2077	79 18 00 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x0)
    2078	15 02 11 00 00 00 00 00	if r2 == 0x0 goto +0x11 <LBB10_89>
    2079	18 01 00 00 7f 7f 7f 7f 00 00 00 00 7f 7f 7f 7f	r1 = 0x7f7f7f7f7f7f7f7f ll
    2081	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    2083	bf 84 00 00 00 00 00 00	r4 = r8

0000000000004120 <LBB10_53>
    2084	79 45 00 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x0)
    2085	bf 50 00 00 00 00 00 00	r0 = r5
    2086	4f 10 00 00 00 00 00 00	r0 |= r1
    2087	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    2088	77 05 00 00 07 00 00 00	r5 >>= 0x7
    2089	5f 35 00 00 00 00 00 00	r5 &= r3
    2090	0f 05 00 00 00 00 00 00	r5 += r0
    2091	7b 54 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r5
    2092	07 04 00 00 08 00 00 00	r4 += 0x8
    2093	07 02 00 00 ff ff ff ff	r2 += -0x1
    2094	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB10_89>
    2095	05 00 f4 ff 00 00 00 00	goto -0xc <LBB10_53>

0000000000004180 <LBB10_89>
    2096	b7 01 00 00 08 00 00 00	r1 = 0x8
    2097	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB10_55>
    2098	05 00 16 02 00 00 00 00	goto +0x216 <LBB10_54>

0000000000004198 <LBB10_55>
    2099	bf 81 00 00 00 00 00 00	r1 = r8
    2100	07 01 00 00 08 00 00 00	r1 += 0x8
    2101	bf 82 00 00 00 00 00 00	r2 = r8
    2102	bf 63 00 00 00 00 00 00	r3 = r6
    2103	85 10 00 00 42 28 00 00	call 0x2842 ; <memmove>
    2104	15 06 28 00 00 00 00 00	if r6 == 0x0 goto +0x28 <LBB10_85>

00000000000041c8 <LBB10_56>
    2105	79 72 08 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x8)
    2106	18 01 00 00 73 65 74 79 00 00 00 00 62 64 65 74	r1 = 0x7465646279746573 ll
    2108	bf 23 00 00 00 00 00 00	r3 = r2
    2109	af 13 00 00 00 00 00 00	r3 ^= r1
    2110	7b 3a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r3
    2111	18 01 00 00 6d 6f 64 6e 00 00 00 00 61 72 6f 64	r1 = 0x646f72616e646f6d ll
    2113	af 12 00 00 00 00 00 00	r2 ^= r1
    2114	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    2115	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    2116	18 01 00 00 61 72 65 6e 00 00 00 00 65 67 79 6c	r1 = 0x6c7967656e657261 ll
    2118	bf 23 00 00 00 00 00 00	r3 = r2
    2119	af 13 00 00 00 00 00 00	r3 ^= r1
    2120	7b 3a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r3
    2121	18 01 00 00 75 65 73 70 00 00 00 00 65 6d 6f 73	r1 = 0x736f6d6570736575 ll
    2123	af 12 00 00 00 00 00 00	r2 ^= r1
    2124	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
    2125	bf 81 00 00 00 00 00 00	r1 = r8
    2126	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2127	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    2128	bf 86 00 00 00 00 00 00	r6 = r8
    2129	b7 01 00 00 00 00 00 00	r1 = 0x0
    2130	7b 9a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r9
    2131	7b 8a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r8
    2132	05 00 12 00 00 00 00 00	goto +0x12 <LBB10_57>

00000000000042a8 <LBB10_90>
    2133	77 02 00 00 39 00 00 00	r2 >>= 0x39
    2134	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    2135	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r2
    2136	bf 71 00 00 00 00 00 00	r1 = r7
    2137	07 01 00 00 f8 ff ff ff	r1 += -0x8
    2138	5f 91 00 00 00 00 00 00	r1 &= r9
    2139	0f 81 00 00 00 00 00 00	r1 += r8
    2140	73 21 08 00 00 00 00 00	*(u8 *)(r1 + 0x8) = r2

00000000000042e8 <LBB10_84>
    2141	bf 71 00 00 00 00 00 00	r1 = r7
    2142	07 01 00 00 01 00 00 00	r1 += 0x1
    2143	07 06 00 00 d0 ff ff ff	r6 += -0x30
    2144	5d 97 06 00 00 00 00 00	if r7 != r9 goto +0x6 <LBB10_57>

0000000000004308 <LBB10_85>
    2145	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
    2146	79 a2 18 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xe8)
    2147	1f 12 00 00 00 00 00 00	r2 -= r1
    2148	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)
    2149	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    2150	05 00 cf 02 00 00 00 00	goto +0x2cf <LBB10_86>

0000000000004338 <LBB10_57>
    2151	bf 17 00 00 00 00 00 00	r7 = r1
    2152	bf 82 00 00 00 00 00 00	r2 = r8
    2153	0f 72 00 00 00 00 00 00	r2 += r7
    2154	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    2155	55 01 f1 ff 80 00 00 00	if r1 != 0x80 goto -0xf <LBB10_84>
    2156	7b 2a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r2
    2157	bf 71 00 00 00 00 00 00	r1 = r7
    2158	87 01 00 00 00 00 00 00	r1 = -r1
    2159	27 01 00 00 30 00 00 00	r1 *= 0x30
    2160	79 a2 30 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd0)
    2161	0f 12 00 00 00 00 00 00	r2 += r1
    2162	7b 2a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r2
    2163	bf 71 00 00 00 00 00 00	r1 = r7
    2164	27 01 00 00 d0 ff ff ff	r1 *= -0x30
    2165	0f 81 00 00 00 00 00 00	r1 += r8
    2166	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2167	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    2168	7b 6a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r6
    2169	7b 7a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r7

00000000000043d0 <LBB10_59>
    2170	79 a1 50 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xb0)
    2171	79 10 00 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x0)
    2172	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
    2173	bf 12 00 00 00 00 00 00	r2 = r1
    2174	57 02 00 00 07 00 00 00	r2 &= 0x7
    2175	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    2176	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    2177	bf 16 00 00 00 00 00 00	r6 = r1
    2178	57 06 00 00 f8 ff ff ff	r6 &= -0x8
    2179	79 a5 78 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x88)
    2180	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    2181	79 a7 68 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x98)
    2182	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    2183	b7 08 00 00 00 00 00 00	r8 = 0x0
    2184	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
    2185	15 06 37 00 00 00 00 00	if r6 == 0x0 goto +0x37 <LBB10_62>
    2186	79 a2 68 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x98)
    2187	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    2188	79 a5 78 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x88)
    2189	79 a3 70 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x90)
    2190	7b 6a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r6

0000000000004478 <LBB10_61>
    2191	0f 43 00 00 00 00 00 00	r3 += r4
    2192	bf 41 00 00 00 00 00 00	r1 = r4
    2193	77 01 00 00 33 00 00 00	r1 >>= 0x33
    2194	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    2195	4f 14 00 00 00 00 00 00	r4 |= r1
    2196	bf 39 00 00 00 00 00 00	r9 = r3
    2197	af 49 00 00 00 00 00 00	r9 ^= r4
    2198	bf 94 00 00 00 00 00 00	r4 = r9
    2199	77 04 00 00 2f 00 00 00	r4 >>= 0x2f
    2200	bf 91 00 00 00 00 00 00	r1 = r9
    2201	67 01 00 00 11 00 00 00	r1 <<= 0x11
    2202	4f 41 00 00 00 00 00 00	r1 |= r4
    2203	bf 34 00 00 00 00 00 00	r4 = r3
    2204	77 04 00 00 20 00 00 00	r4 >>= 0x20
    2205	67 03 00 00 20 00 00 00	r3 <<= 0x20
    2206	4f 43 00 00 00 00 00 00	r3 |= r4
    2207	bf 04 00 00 00 00 00 00	r4 = r0
    2208	0f 84 00 00 00 00 00 00	r4 += r8
    2209	79 46 00 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x0)
    2210	bf 67 00 00 00 00 00 00	r7 = r6
    2211	af 57 00 00 00 00 00 00	r7 ^= r5
    2212	bf 74 00 00 00 00 00 00	r4 = r7
    2213	77 04 00 00 30 00 00 00	r4 >>= 0x30
    2214	bf 70 00 00 00 00 00 00	r0 = r7
    2215	67 00 00 00 10 00 00 00	r0 <<= 0x10
    2216	4f 40 00 00 00 00 00 00	r0 |= r4
    2217	0f 27 00 00 00 00 00 00	r7 += r2
    2218	bf 75 00 00 00 00 00 00	r5 = r7
    2219	af 05 00 00 00 00 00 00	r5 ^= r0
    2220	79 a0 a8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x58)
    2221	0f 97 00 00 00 00 00 00	r7 += r9
    2222	bf 74 00 00 00 00 00 00	r4 = r7
    2223	af 14 00 00 00 00 00 00	r4 ^= r1
    2224	bf 71 00 00 00 00 00 00	r1 = r7
    2225	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2226	67 07 00 00 20 00 00 00	r7 <<= 0x20
    2227	4f 17 00 00 00 00 00 00	r7 |= r1
    2228	bf 51 00 00 00 00 00 00	r1 = r5
    2229	0f 31 00 00 00 00 00 00	r1 += r3
    2230	bf 52 00 00 00 00 00 00	r2 = r5
    2231	77 02 00 00 2b 00 00 00	r2 >>= 0x2b
    2232	67 05 00 00 15 00 00 00	r5 <<= 0x15
    2233	4f 25 00 00 00 00 00 00	r5 |= r2
    2234	af 15 00 00 00 00 00 00	r5 ^= r1
    2235	af 61 00 00 00 00 00 00	r1 ^= r6
    2236	79 a6 a0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x60)
    2237	07 08 00 00 08 00 00 00	r8 += 0x8
    2238	bf 72 00 00 00 00 00 00	r2 = r7
    2239	bf 13 00 00 00 00 00 00	r3 = r1
    2240	2d 86 ce ff 00 00 00 00	if r6 > r8 goto -0x32 <LBB10_61>

0000000000004608 <LBB10_62>
    2241	b7 02 00 00 00 00 00 00	r2 = 0x0
    2242	b7 09 00 00 00 00 00 00	r9 = 0x0
    2243	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
    2244	25 06 21 00 03 00 00 00	if r6 > 0x3 goto +0x21 <LBB10_64>

0000000000004628 <LBB10_63>
    2245	bf 23 00 00 00 00 00 00	r3 = r2
    2246	47 03 00 00 01 00 00 00	r3 |= 0x1
    2247	79 a0 88 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x78)
    2248	2d 36 01 00 00 00 00 00	if r6 > r3 goto +0x1 <LBB10_65>
    2249	05 00 0c 00 00 00 00 00	goto +0xc <LBB10_66>

0000000000004650 <LBB10_65>
    2250	bf 23 00 00 00 00 00 00	r3 = r2
    2251	0f 83 00 00 00 00 00 00	r3 += r8
    2252	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
    2253	0f 36 00 00 00 00 00 00	r6 += r3
    2254	69 63 00 00 00 00 00 00	r3 = *(u16 *)(r6 + 0x0)
    2255	bf 26 00 00 00 00 00 00	r6 = r2
    2256	67 06 00 00 03 00 00 00	r6 <<= 0x3
    2257	6f 63 00 00 00 00 00 00	r3 <<= r6
    2258	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
    2259	4f 93 00 00 00 00 00 00	r3 |= r9
    2260	47 02 00 00 02 00 00 00	r2 |= 0x2
    2261	bf 39 00 00 00 00 00 00	r9 = r3

00000000000046b0 <LBB10_66>
    2262	2d 26 01 00 00 00 00 00	if r6 > r2 goto +0x1 <LBB10_67>
    2263	05 00 13 00 00 00 00 00	goto +0x13 <LBB10_68>

00000000000046c0 <LBB10_67>
    2264	bf 23 00 00 00 00 00 00	r3 = r2
    2265	0f 83 00 00 00 00 00 00	r3 += r8
    2266	79 a0 a8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x58)
    2267	0f 30 00 00 00 00 00 00	r0 += r3
    2268	71 03 00 00 00 00 00 00	r3 = *(u8 *)(r0 + 0x0)
    2269	67 02 00 00 03 00 00 00	r2 <<= 0x3
    2270	6f 23 00 00 00 00 00 00	r3 <<= r2
    2271	4f 93 00 00 00 00 00 00	r3 |= r9
    2272	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    2273	07 02 00 00 01 00 00 00	r2 += 0x1
    2274	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    2275	bf 39 00 00 00 00 00 00	r9 = r3
    2276	79 a8 48 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xb8)
    2277	05 00 0b 00 00 00 00 00	goto +0xb <LBB10_69>

0000000000004730 <LBB10_64>
    2278	bf 03 00 00 00 00 00 00	r3 = r0
    2279	0f 83 00 00 00 00 00 00	r3 += r8
    2280	b7 02 00 00 04 00 00 00	r2 = 0x4
    2281	61 39 00 00 00 00 00 00	r9 = *(u32 *)(r3 + 0x0)
    2282	05 00 da ff 00 00 00 00	goto -0x26 <LBB10_63>

0000000000004758 <LBB10_68>
    2283	b7 02 00 00 ff 00 00 00	r2 = 0xff
    2284	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    2285	07 03 00 00 01 00 00 00	r3 += 0x1
    2286	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    2287	79 a8 48 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xb8)
    2288	15 06 32 00 00 00 00 00	if r6 == 0x0 goto +0x32 <LBB10_71>

0000000000004788 <LBB10_69>
    2289	bf 62 00 00 00 00 00 00	r2 = r6
    2290	67 02 00 00 03 00 00 00	r2 <<= 0x3
    2291	b7 03 00 00 ff 00 00 00	r3 = 0xff
    2292	6f 23 00 00 00 00 00 00	r3 <<= r2
    2293	4f 39 00 00 00 00 00 00	r9 |= r3
    2294	bf 92 00 00 00 00 00 00	r2 = r9
    2295	55 06 2b 00 07 00 00 00	if r6 != 0x7 goto +0x2b <LBB10_71>
    2296	0f 41 00 00 00 00 00 00	r1 += r4
    2297	bf 12 00 00 00 00 00 00	r2 = r1
    2298	77 02 00 00 20 00 00 00	r2 >>= 0x20
    2299	bf 10 00 00 00 00 00 00	r0 = r1
    2300	67 00 00 00 20 00 00 00	r0 <<= 0x20
    2301	4f 20 00 00 00 00 00 00	r0 |= r2
    2302	bf 93 00 00 00 00 00 00	r3 = r9
    2303	af 53 00 00 00 00 00 00	r3 ^= r5
    2304	bf 32 00 00 00 00 00 00	r2 = r3
    2305	77 02 00 00 30 00 00 00	r2 >>= 0x30
    2306	bf 36 00 00 00 00 00 00	r6 = r3
    2307	67 06 00 00 10 00 00 00	r6 <<= 0x10
    2308	4f 26 00 00 00 00 00 00	r6 |= r2
    2309	0f 73 00 00 00 00 00 00	r3 += r7
    2310	bf 35 00 00 00 00 00 00	r5 = r3
    2311	af 65 00 00 00 00 00 00	r5 ^= r6
    2312	bf 56 00 00 00 00 00 00	r6 = r5
    2313	0f 06 00 00 00 00 00 00	r6 += r0
    2314	bf 52 00 00 00 00 00 00	r2 = r5
    2315	77 02 00 00 2b 00 00 00	r2 >>= 0x2b
    2316	67 05 00 00 15 00 00 00	r5 <<= 0x15
    2317	4f 25 00 00 00 00 00 00	r5 |= r2
    2318	bf 42 00 00 00 00 00 00	r2 = r4
    2319	77 02 00 00 33 00 00 00	r2 >>= 0x33
    2320	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    2321	4f 24 00 00 00 00 00 00	r4 |= r2
    2322	af 41 00 00 00 00 00 00	r1 ^= r4
    2323	af 65 00 00 00 00 00 00	r5 ^= r6
    2324	af 96 00 00 00 00 00 00	r6 ^= r9
    2325	0f 13 00 00 00 00 00 00	r3 += r1
    2326	bf 32 00 00 00 00 00 00	r2 = r3
    2327	77 02 00 00 20 00 00 00	r2 >>= 0x20
    2328	bf 37 00 00 00 00 00 00	r7 = r3
    2329	67 07 00 00 20 00 00 00	r7 <<= 0x20
    2330	4f 27 00 00 00 00 00 00	r7 |= r2
    2331	bf 12 00 00 00 00 00 00	r2 = r1
    2332	77 02 00 00 2f 00 00 00	r2 >>= 0x2f
    2333	67 01 00 00 11 00 00 00	r1 <<= 0x11
    2334	4f 21 00 00 00 00 00 00	r1 |= r2
    2335	af 13 00 00 00 00 00 00	r3 ^= r1
    2336	b7 02 00 00 00 00 00 00	r2 = 0x0
    2337	bf 34 00 00 00 00 00 00	r4 = r3
    2338	bf 61 00 00 00 00 00 00	r1 = r6

0000000000004918 <LBB10_71>
    2339	0f 41 00 00 00 00 00 00	r1 += r4
    2340	bf 43 00 00 00 00 00 00	r3 = r4
    2341	77 03 00 00 33 00 00 00	r3 >>= 0x33
    2342	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    2343	4f 34 00 00 00 00 00 00	r4 |= r3
    2344	bf 16 00 00 00 00 00 00	r6 = r1
    2345	af 46 00 00 00 00 00 00	r6 ^= r4
    2346	bf 63 00 00 00 00 00 00	r3 = r6
    2347	77 03 00 00 2f 00 00 00	r3 >>= 0x2f
    2348	bf 60 00 00 00 00 00 00	r0 = r6
    2349	67 00 00 00 11 00 00 00	r0 <<= 0x11
    2350	4f 30 00 00 00 00 00 00	r0 |= r3
    2351	79 a9 98 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x68)
    2352	67 09 00 00 38 00 00 00	r9 <<= 0x38
    2353	4f 29 00 00 00 00 00 00	r9 |= r2
    2354	bf 93 00 00 00 00 00 00	r3 = r9
    2355	af 53 00 00 00 00 00 00	r3 ^= r5
    2356	0f 37 00 00 00 00 00 00	r7 += r3
    2357	0f 76 00 00 00 00 00 00	r6 += r7
    2358	bf 64 00 00 00 00 00 00	r4 = r6
    2359	af 04 00 00 00 00 00 00	r4 ^= r0
    2360	bf 45 00 00 00 00 00 00	r5 = r4
    2361	77 05 00 00 33 00 00 00	r5 >>= 0x33
    2362	bf 42 00 00 00 00 00 00	r2 = r4
    2363	67 02 00 00 0d 00 00 00	r2 <<= 0xd
    2364	4f 52 00 00 00 00 00 00	r2 |= r5
    2365	bf 15 00 00 00 00 00 00	r5 = r1
    2366	77 05 00 00 20 00 00 00	r5 >>= 0x20
    2367	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2368	4f 51 00 00 00 00 00 00	r1 |= r5
    2369	bf 35 00 00 00 00 00 00	r5 = r3
    2370	77 05 00 00 30 00 00 00	r5 >>= 0x30
    2371	67 03 00 00 10 00 00 00	r3 <<= 0x10
    2372	4f 53 00 00 00 00 00 00	r3 |= r5
    2373	af 37 00 00 00 00 00 00	r7 ^= r3
    2374	0f 71 00 00 00 00 00 00	r1 += r7
    2375	bf 13 00 00 00 00 00 00	r3 = r1
    2376	af 93 00 00 00 00 00 00	r3 ^= r9
    2377	0f 43 00 00 00 00 00 00	r3 += r4
    2378	bf 74 00 00 00 00 00 00	r4 = r7
    2379	77 04 00 00 2b 00 00 00	r4 >>= 0x2b
    2380	67 07 00 00 15 00 00 00	r7 <<= 0x15
    2381	4f 47 00 00 00 00 00 00	r7 |= r4
    2382	bf 35 00 00 00 00 00 00	r5 = r3
    2383	af 25 00 00 00 00 00 00	r5 ^= r2
    2384	bf 52 00 00 00 00 00 00	r2 = r5
    2385	77 02 00 00 2f 00 00 00	r2 >>= 0x2f
    2386	bf 54 00 00 00 00 00 00	r4 = r5
    2387	67 04 00 00 11 00 00 00	r4 <<= 0x11
    2388	4f 24 00 00 00 00 00 00	r4 |= r2
    2389	af 71 00 00 00 00 00 00	r1 ^= r7
    2390	bf 62 00 00 00 00 00 00	r2 = r6
    2391	77 02 00 00 20 00 00 00	r2 >>= 0x20
    2392	67 06 00 00 20 00 00 00	r6 <<= 0x20
    2393	4f 26 00 00 00 00 00 00	r6 |= r2
    2394	a7 06 00 00 ff 00 00 00	r6 ^= 0xff
    2395	0f 16 00 00 00 00 00 00	r6 += r1
    2396	0f 65 00 00 00 00 00 00	r5 += r6
    2397	bf 52 00 00 00 00 00 00	r2 = r5
    2398	af 42 00 00 00 00 00 00	r2 ^= r4
    2399	bf 20 00 00 00 00 00 00	r0 = r2
    2400	77 00 00 00 33 00 00 00	r0 >>= 0x33
    2401	bf 24 00 00 00 00 00 00	r4 = r2
    2402	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    2403	4f 04 00 00 00 00 00 00	r4 |= r0
    2404	bf 30 00 00 00 00 00 00	r0 = r3
    2405	77 00 00 00 20 00 00 00	r0 >>= 0x20
    2406	67 03 00 00 20 00 00 00	r3 <<= 0x20
    2407	4f 03 00 00 00 00 00 00	r3 |= r0
    2408	bf 10 00 00 00 00 00 00	r0 = r1
    2409	77 00 00 00 30 00 00 00	r0 >>= 0x30
    2410	67 01 00 00 10 00 00 00	r1 <<= 0x10
    2411	4f 01 00 00 00 00 00 00	r1 |= r0
    2412	af 16 00 00 00 00 00 00	r6 ^= r1
    2413	bf 60 00 00 00 00 00 00	r0 = r6
    2414	0f 30 00 00 00 00 00 00	r0 += r3
    2415	0f 02 00 00 00 00 00 00	r2 += r0
    2416	af 24 00 00 00 00 00 00	r4 ^= r2
    2417	bf 43 00 00 00 00 00 00	r3 = r4
    2418	77 03 00 00 2f 00 00 00	r3 >>= 0x2f
    2419	bf 41 00 00 00 00 00 00	r1 = r4
    2420	67 01 00 00 11 00 00 00	r1 <<= 0x11
    2421	4f 31 00 00 00 00 00 00	r1 |= r3
    2422	bf 63 00 00 00 00 00 00	r3 = r6
    2423	77 03 00 00 2b 00 00 00	r3 >>= 0x2b
    2424	67 06 00 00 15 00 00 00	r6 <<= 0x15
    2425	4f 36 00 00 00 00 00 00	r6 |= r3
    2426	af 06 00 00 00 00 00 00	r6 ^= r0
    2427	bf 53 00 00 00 00 00 00	r3 = r5
    2428	77 03 00 00 20 00 00 00	r3 >>= 0x20
    2429	67 05 00 00 20 00 00 00	r5 <<= 0x20
    2430	4f 35 00 00 00 00 00 00	r5 |= r3
    2431	bf 60 00 00 00 00 00 00	r0 = r6
    2432	0f 50 00 00 00 00 00 00	r0 += r5
    2433	0f 04 00 00 00 00 00 00	r4 += r0
    2434	af 41 00 00 00 00 00 00	r1 ^= r4
    2435	bf 15 00 00 00 00 00 00	r5 = r1
    2436	77 05 00 00 33 00 00 00	r5 >>= 0x33
    2437	bf 13 00 00 00 00 00 00	r3 = r1
    2438	67 03 00 00 0d 00 00 00	r3 <<= 0xd
    2439	4f 53 00 00 00 00 00 00	r3 |= r5
    2440	bf 25 00 00 00 00 00 00	r5 = r2
    2441	77 05 00 00 20 00 00 00	r5 >>= 0x20
    2442	67 02 00 00 20 00 00 00	r2 <<= 0x20
    2443	4f 52 00 00 00 00 00 00	r2 |= r5
    2444	bf 65 00 00 00 00 00 00	r5 = r6
    2445	77 05 00 00 30 00 00 00	r5 >>= 0x30
    2446	67 06 00 00 10 00 00 00	r6 <<= 0x10
    2447	4f 56 00 00 00 00 00 00	r6 |= r5
    2448	af 06 00 00 00 00 00 00	r6 ^= r0
    2449	bf 65 00 00 00 00 00 00	r5 = r6
    2450	0f 25 00 00 00 00 00 00	r5 += r2
    2451	0f 51 00 00 00 00 00 00	r1 += r5
    2452	af 13 00 00 00 00 00 00	r3 ^= r1
    2453	bf 61 00 00 00 00 00 00	r1 = r6
    2454	77 01 00 00 2b 00 00 00	r1 >>= 0x2b
    2455	67 06 00 00 15 00 00 00	r6 <<= 0x15
    2456	4f 16 00 00 00 00 00 00	r6 |= r1
    2457	af 56 00 00 00 00 00 00	r6 ^= r5
    2458	bf 31 00 00 00 00 00 00	r1 = r3
    2459	77 01 00 00 2f 00 00 00	r1 >>= 0x2f
    2460	bf 32 00 00 00 00 00 00	r2 = r3
    2461	67 02 00 00 11 00 00 00	r2 <<= 0x11
    2462	4f 12 00 00 00 00 00 00	r2 |= r1
    2463	bf 65 00 00 00 00 00 00	r5 = r6
    2464	77 05 00 00 30 00 00 00	r5 >>= 0x30
    2465	bf 61 00 00 00 00 00 00	r1 = r6
    2466	67 01 00 00 10 00 00 00	r1 <<= 0x10
    2467	4f 51 00 00 00 00 00 00	r1 |= r5
    2468	bf 45 00 00 00 00 00 00	r5 = r4
    2469	77 05 00 00 20 00 00 00	r5 >>= 0x20
    2470	67 04 00 00 20 00 00 00	r4 <<= 0x20
    2471	4f 54 00 00 00 00 00 00	r4 |= r5
    2472	0f 46 00 00 00 00 00 00	r6 += r4
    2473	af 61 00 00 00 00 00 00	r1 ^= r6
    2474	bf 14 00 00 00 00 00 00	r4 = r1
    2475	77 04 00 00 2b 00 00 00	r4 >>= 0x2b
    2476	67 01 00 00 15 00 00 00	r1 <<= 0x15
    2477	4f 41 00 00 00 00 00 00	r1 |= r4
    2478	af 12 00 00 00 00 00 00	r2 ^= r1
    2479	0f 63 00 00 00 00 00 00	r3 += r6
    2480	bf 31 00 00 00 00 00 00	r1 = r3
    2481	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2482	bf 34 00 00 00 00 00 00	r4 = r3
    2483	67 04 00 00 20 00 00 00	r4 <<= 0x20
    2484	4f 14 00 00 00 00 00 00	r4 |= r1
    2485	af 42 00 00 00 00 00 00	r2 ^= r4
    2486	af 32 00 00 00 00 00 00	r2 ^= r3
    2487	bf 23 00 00 00 00 00 00	r3 = r2
    2488	79 a9 88 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x78)
    2489	5f 93 00 00 00 00 00 00	r3 &= r9
    2490	bf 81 00 00 00 00 00 00	r1 = r8
    2491	0f 31 00 00 00 00 00 00	r1 += r3
    2492	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    2493	18 00 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r0 = -0x7f7f7f7f7f7f7f80 ll
    2495	5f 05 00 00 00 00 00 00	r5 &= r0
    2496	bf 34 00 00 00 00 00 00	r4 = r3
    2497	55 05 0a 00 00 00 00 00	if r5 != 0x0 goto +0xa <LBB10_74>
    2498	b7 01 00 00 08 00 00 00	r1 = 0x8
    2499	bf 34 00 00 00 00 00 00	r4 = r3

0000000000004e20 <LBB10_73>
    2500	0f 14 00 00 00 00 00 00	r4 += r1
    2501	5f 94 00 00 00 00 00 00	r4 &= r9
    2502	bf 85 00 00 00 00 00 00	r5 = r8
    2503	0f 45 00 00 00 00 00 00	r5 += r4
    2504	79 55 00 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x0)
    2505	5f 05 00 00 00 00 00 00	r5 &= r0
    2506	07 01 00 00 08 00 00 00	r1 += 0x8
    2507	15 05 f8 ff 00 00 00 00	if r5 == 0x0 goto -0x8 <LBB10_73>

0000000000004e60 <LBB10_74>
    2508	bf 51 00 00 00 00 00 00	r1 = r5
    2509	07 01 00 00 ff ff ff ff	r1 += -0x1
    2510	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    2511	5f 15 00 00 00 00 00 00	r5 &= r1
    2512	bf 51 00 00 00 00 00 00	r1 = r5
    2513	77 01 00 00 01 00 00 00	r1 >>= 0x1
    2514	18 06 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r6 = 0x5555555555555555 ll
    2516	5f 61 00 00 00 00 00 00	r1 &= r6
    2517	1f 15 00 00 00 00 00 00	r5 -= r1
    2518	bf 51 00 00 00 00 00 00	r1 = r5
    2519	18 06 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r6 = 0x3333333333333333 ll
    2521	5f 61 00 00 00 00 00 00	r1 &= r6
    2522	77 05 00 00 02 00 00 00	r5 >>= 0x2
    2523	5f 65 00 00 00 00 00 00	r5 &= r6
    2524	0f 51 00 00 00 00 00 00	r1 += r5
    2525	bf 15 00 00 00 00 00 00	r5 = r1
    2526	77 05 00 00 04 00 00 00	r5 >>= 0x4
    2527	0f 51 00 00 00 00 00 00	r1 += r5
    2528	18 05 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r5 = 0xf0f0f0f0f0f0f0f ll
    2530	5f 51 00 00 00 00 00 00	r1 &= r5
    2531	18 05 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r5 = 0x101010101010101 ll
    2533	2f 51 00 00 00 00 00 00	r1 *= r5
    2534	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    2535	0f 41 00 00 00 00 00 00	r1 += r4
    2536	5f 91 00 00 00 00 00 00	r1 &= r9
    2537	bf 84 00 00 00 00 00 00	r4 = r8
    2538	0f 14 00 00 00 00 00 00	r4 += r1
    2539	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    2540	67 04 00 00 38 00 00 00	r4 <<= 0x38
    2541	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    2542	b7 05 00 00 00 00 00 00	r5 = 0x0
    2543	79 a7 58 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xa8)
    2544	6d 45 1e 00 00 00 00 00	if r5 s> r4 goto +0x1e <LBB10_77>
    2545	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    2546	5f 04 00 00 00 00 00 00	r4 &= r0
    2547	15 04 1b 00 00 00 00 00	if r4 == 0x0 goto +0x1b <LBB10_77>
    2548	bf 41 00 00 00 00 00 00	r1 = r4
    2549	07 01 00 00 ff ff ff ff	r1 += -0x1
    2550	a7 04 00 00 ff ff ff ff	r4 ^= -0x1
    2551	5f 14 00 00 00 00 00 00	r4 &= r1
    2552	bf 41 00 00 00 00 00 00	r1 = r4
    2553	77 01 00 00 01 00 00 00	r1 >>= 0x1
    2554	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    2556	5f 51 00 00 00 00 00 00	r1 &= r5
    2557	1f 14 00 00 00 00 00 00	r4 -= r1
    2558	bf 41 00 00 00 00 00 00	r1 = r4
    2559	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    2561	5f 51 00 00 00 00 00 00	r1 &= r5
    2562	77 04 00 00 02 00 00 00	r4 >>= 0x2
    2563	5f 54 00 00 00 00 00 00	r4 &= r5
    2564	0f 41 00 00 00 00 00 00	r1 += r4
    2565	bf 14 00 00 00 00 00 00	r4 = r1
    2566	77 04 00 00 04 00 00 00	r4 >>= 0x4
    2567	0f 41 00 00 00 00 00 00	r1 += r4
    2568	18 04 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r4 = 0xf0f0f0f0f0f0f0f ll
    2570	5f 41 00 00 00 00 00 00	r1 &= r4
    2571	18 04 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r4 = 0x101010101010101 ll
    2573	2f 41 00 00 00 00 00 00	r1 *= r4
    2574	77 01 00 00 3b 00 00 00	r1 >>= 0x3b

0000000000005078 <LBB10_77>
    2575	bf 74 00 00 00 00 00 00	r4 = r7
    2576	1f 34 00 00 00 00 00 00	r4 -= r3
    2577	bf 15 00 00 00 00 00 00	r5 = r1
    2578	1f 35 00 00 00 00 00 00	r5 -= r3
    2579	af 45 00 00 00 00 00 00	r5 ^= r4
    2580	5f 95 00 00 00 00 00 00	r5 &= r9
    2581	b7 03 00 00 08 00 00 00	r3 = 0x8
    2582	79 a6 60 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xa0)
    2583	2d 53 3d fe 00 00 00 00	if r3 > r5 goto -0x1c3 <LBB10_90>
    2584	77 02 00 00 39 00 00 00	r2 >>= 0x39
    2585	bf 83 00 00 00 00 00 00	r3 = r8
    2586	0f 13 00 00 00 00 00 00	r3 += r1
    2587	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    2588	73 23 00 00 00 00 00 00	*(u8 *)(r3 + 0x0) = r2
    2589	bf 13 00 00 00 00 00 00	r3 = r1
    2590	07 03 00 00 f8 ff ff ff	r3 += -0x8
    2591	5f 93 00 00 00 00 00 00	r3 &= r9
    2592	0f 83 00 00 00 00 00 00	r3 += r8
    2593	73 23 08 00 00 00 00 00	*(u8 *)(r3 + 0x8) = r2
    2594	27 01 00 00 d0 ff ff ff	r1 *= -0x30
    2595	15 04 13 00 ff 00 00 00	if r4 == 0xff goto +0x13 <LBB10_83>
    2596	bf 82 00 00 00 00 00 00	r2 = r8
    2597	0f 12 00 00 00 00 00 00	r2 += r1
    2598	b7 01 00 00 d0 ff ff ff	r1 = -0x30
    2599	05 00 02 00 00 00 00 00	goto +0x2 <LBB10_80>

0000000000005140 <LBB10_82>
    2600	57 03 00 00 01 00 00 00	r3 &= 0x1
    2601	55 03 50 fe 00 00 00 00	if r3 != 0x0 goto -0x1b0 <LBB10_59>

0000000000005150 <LBB10_80>
    2602	bf 23 00 00 00 00 00 00	r3 = r2
    2603	0f 13 00 00 00 00 00 00	r3 += r1
    2604	bf 64 00 00 00 00 00 00	r4 = r6
    2605	0f 14 00 00 00 00 00 00	r4 += r1
    2606	71 45 00 00 00 00 00 00	r5 = *(u8 *)(r4 + 0x0)
    2607	71 30 00 00 00 00 00 00	r0 = *(u8 *)(r3 + 0x0)
    2608	73 04 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r0
    2609	73 53 00 00 00 00 00 00	*(u8 *)(r3 + 0x0) = r5
    2610	07 01 00 00 01 00 00 00	r1 += 0x1
    2611	b7 03 00 00 01 00 00 00	r3 = 0x1
    2612	15 01 f3 ff 00 00 00 00	if r1 == 0x0 goto -0xd <LBB10_82>
    2613	b7 03 00 00 00 00 00 00	r3 = 0x0
    2614	05 00 f1 ff 00 00 00 00	goto -0xf <LBB10_82>

00000000000051b8 <LBB10_83>
    2615	0f 81 00 00 00 00 00 00	r1 += r8
    2616	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2617	b7 03 00 00 ff 00 00 00	r3 = 0xff
    2618	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
    2619	73 32 00 00 00 00 00 00	*(u8 *)(r2 + 0x0) = r3
    2620	bf 72 00 00 00 00 00 00	r2 = r7
    2621	07 02 00 00 f8 ff ff ff	r2 += -0x8
    2622	5f 92 00 00 00 00 00 00	r2 &= r9
    2623	0f 82 00 00 00 00 00 00	r2 += r8
    2624	73 32 08 00 00 00 00 00	*(u8 *)(r2 + 0x8) = r3
    2625	79 a2 38 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc8)
    2626	b7 03 00 00 30 00 00 00	r3 = 0x30
    2627	85 10 00 00 14 26 00 00	call 0x2614 ; <memcpy>
    2628	05 00 18 fe 00 00 00 00	goto -0x1e8 <LBB10_84>

0000000000005228 <LBB10_11>
    2629	b7 08 00 00 04 00 00 00	r8 = 0x4
    2630	2d 48 10 00 00 00 00 00	if r8 > r4 goto +0x10 <LBB10_16>
    2631	b7 08 00 00 08 00 00 00	r8 = 0x8
    2632	05 00 0e 00 00 00 00 00	goto +0xe <LBB10_16>

0000000000005248 <LBB10_54>
    2633	bf 81 00 00 00 00 00 00	r1 = r8
    2634	0f 61 00 00 00 00 00 00	r1 += r6
    2635	79 82 00 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x0)
    2636	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2637	05 00 eb fd 00 00 00 00	goto -0x215 <LBB10_56>

0000000000005270 <LBB10_15>
    2638	bf a1 00 00 00 00 00 00	r1 = r10
    2639	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2640	b7 02 00 00 01 00 00 00	r2 = 0x1
    2641	85 10 00 00 72 16 00 00	call 0x1672 ; <hashbrown::raw::Fallibility::capacity_overflow>
    2642	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)
    2643	79 a0 f0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x10)
    2644	18 01 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x7fffffffffffffff ll
    2646	5d 10 e1 00 00 00 00 00	if r0 != r1 goto +0xe1 <LBB10_87>

00000000000052b8 <LBB10_16>
    2647	bf a1 00 00 00 00 00 00	r1 = r10
    2648	07 01 00 00 e0 ff ff ff	r1 += -0x20
    2649	bf 82 00 00 00 00 00 00	r2 = r8
    2650	b7 03 00 00 00 00 00 00	r3 = 0x0
    2651	b7 04 00 00 30 00 00 00	r4 = 0x30
    2652	b7 05 00 00 00 00 00 00	r5 = 0x0
    2653	85 10 00 00 ae 26 00 00	call 0x26ae ; <__multi3>
    2654	b7 01 00 00 01 00 00 00	r1 = 0x1
    2655	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    2656	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB10_18>
    2657	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000005310 <LBB10_18>
    2658	57 01 00 00 01 00 00 00	r1 &= 0x1
    2659	55 01 0d 00 00 00 00 00	if r1 != 0x0 goto +0xd <LBB10_23>
    2660	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    2661	bf 83 00 00 00 00 00 00	r3 = r8
    2662	07 03 00 00 08 00 00 00	r3 += 0x8
    2663	bf 14 00 00 00 00 00 00	r4 = r1
    2664	0f 34 00 00 00 00 00 00	r4 += r3
    2665	b7 02 00 00 01 00 00 00	r2 = 0x1
    2666	2d 41 01 00 00 00 00 00	if r1 > r4 goto +0x1 <LBB10_21>
    2667	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000005360 <LBB10_21>
    2668	57 02 00 00 01 00 00 00	r2 &= 0x1
    2669	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB10_23>
    2670	18 02 00 00 f9 ff ff ff 00 00 00 00 ff ff ff 7f	r2 = 0x7ffffffffffffff9 ll
    2672	2d 42 06 00 00 00 00 00	if r2 > r4 goto +0x6 <LBB10_24>

0000000000005388 <LBB10_23>
    2673	bf a1 00 00 00 00 00 00	r1 = r10
    2674	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2675	b7 02 00 00 01 00 00 00	r2 = 0x1
    2676	85 10 00 00 4f 16 00 00	call 0x164f ; <hashbrown::raw::Fallibility::capacity_overflow>
    2677	79 a0 c0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x40)
    2678	05 00 c1 00 00 00 00 00	goto +0xc1 <LBB10_87>

00000000000053b8 <LBB10_24>
    2679	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
    2680	b7 07 00 00 08 00 00 00	r7 = 0x8
    2681	15 04 16 00 00 00 00 00	if r4 == 0x0 goto +0x16 <LBB10_33>
    2682	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    2684	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    2685	18 05 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r5 = 0x300008000 ll
    2687	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB10_27>
    2688	bf 25 00 00 00 00 00 00	r5 = r2

0000000000005408 <LBB10_27>
    2689	bf 52 00 00 00 00 00 00	r2 = r5
    2690	1f 42 00 00 00 00 00 00	r2 -= r4
    2691	b7 07 00 00 00 00 00 00	r7 = 0x0
    2692	b7 00 00 00 01 00 00 00	r0 = 0x1
    2693	2d 52 01 00 00 00 00 00	if r2 > r5 goto +0x1 <LBB10_29>
    2694	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000005438 <LBB10_29>
    2695	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB10_31>
    2696	bf 27 00 00 00 00 00 00	r7 = r2

0000000000005448 <LBB10_31>
    2697	57 07 00 00 f8 ff ff ff	r7 &= -0x8
    2698	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
    2700	2d 72 9e 00 00 00 00 00	if r2 > r7 goto +0x9e <LBB10_88>
    2701	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    2703	7b 72 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r7

0000000000005480 <LBB10_33>
    2704	0f 17 00 00 00 00 00 00	r7 += r1
    2705	bf 71 00 00 00 00 00 00	r1 = r7
    2706	b7 02 00 00 ff 00 00 00	r2 = 0xff
    2707	85 10 00 00 29 26 00 00	call 0x2629 ; <memset>
    2708	b7 01 00 00 08 00 00 00	r1 = 0x8
    2709	bf 86 00 00 00 00 00 00	r6 = r8
    2710	07 06 00 00 ff ff ff ff	r6 += -0x1
    2711	bf 62 00 00 00 00 00 00	r2 = r6
    2712	2d 61 03 00 00 00 00 00	if r1 > r6 goto +0x3 <LBB10_35>
    2713	77 08 00 00 03 00 00 00	r8 >>= 0x3
    2714	27 08 00 00 07 00 00 00	r8 *= 0x7
    2715	bf 82 00 00 00 00 00 00	r2 = r8

00000000000054e0 <LBB10_35>
    2716	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
    2717	1f 12 00 00 00 00 00 00	r2 -= r1
    2718	7b 9a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r9
    2719	15 09 92 00 ff ff ff ff	if r9 == -0x1 goto +0x92 <LBB10_38>
    2720	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    2721	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    2722	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2723	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    2724	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2725	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    2726	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)
    2727	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2728	bf 19 00 00 00 00 00 00	r9 = r1
    2729	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2730	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    2731	b7 01 00 00 00 00 00 00	r1 = 0x0
    2732	05 00 16 00 00 00 00 00	goto +0x16 <LBB10_37>

0000000000005568 <LBB10_47>
    2733	77 00 00 00 39 00 00 00	r0 >>= 0x39
    2734	bf 72 00 00 00 00 00 00	r2 = r7
    2735	0f 12 00 00 00 00 00 00	r2 += r1
    2736	73 02 00 00 00 00 00 00	*(u8 *)(r2 + 0x0) = r0
    2737	bf 12 00 00 00 00 00 00	r2 = r1
    2738	07 02 00 00 f8 ff ff ff	r2 += -0x8
    2739	5f 62 00 00 00 00 00 00	r2 &= r6
    2740	0f 72 00 00 00 00 00 00	r2 += r7
    2741	73 02 08 00 00 00 00 00	*(u8 *)(r2 + 0x8) = r0
    2742	bf 82 00 00 00 00 00 00	r2 = r8
    2743	27 02 00 00 d0 ff ff ff	r2 *= -0x30
    2744	0f 92 00 00 00 00 00 00	r2 += r9
    2745	27 01 00 00 d0 ff ff ff	r1 *= -0x30
    2746	0f 71 00 00 00 00 00 00	r1 += r7
    2747	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2748	07 02 00 00 d0 ff ff ff	r2 += -0x30
    2749	b7 03 00 00 30 00 00 00	r3 = 0x30
    2750	85 10 00 00 99 25 00 00	call 0x2599 ; <memcpy>

00000000000055f8 <LBB10_48>
    2751	bf 81 00 00 00 00 00 00	r1 = r8
    2752	07 01 00 00 01 00 00 00	r1 += 0x1
    2753	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    2754	1d 28 65 00 00 00 00 00	if r8 == r2 goto +0x65 <LBB10_40>

0000000000005618 <LBB10_37>
    2755	bf 18 00 00 00 00 00 00	r8 = r1
    2756	bf 91 00 00 00 00 00 00	r1 = r9
    2757	0f 81 00 00 00 00 00 00	r1 += r8
    2758	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    2759	67 01 00 00 38 00 00 00	r1 <<= 0x38
    2760	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    2761	b7 02 00 00 00 00 00 00	r2 = 0x0
    2762	6d 12 f4 ff 00 00 00 00	if r2 s> r1 goto -0xc <LBB10_48>
    2763	bf 81 00 00 00 00 00 00	r1 = r8
    2764	87 01 00 00 00 00 00 00	r1 = -r1
    2765	27 01 00 00 30 00 00 00	r1 *= 0x30
    2766	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    2767	0f 13 00 00 00 00 00 00	r3 += r1
    2768	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    2769	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    2770	85 10 00 00 5f f5 ff ff	call -0xaa1 ; <core::hash::BuildHasher::hash_one>
    2771	18 04 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r4 = -0x7f7f7f7f7f7f7f80 ll
    2773	bf 02 00 00 00 00 00 00	r2 = r0
    2774	5f 62 00 00 00 00 00 00	r2 &= r6
    2775	bf 71 00 00 00 00 00 00	r1 = r7
    2776	0f 21 00 00 00 00 00 00	r1 += r2
    2777	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    2778	5f 43 00 00 00 00 00 00	r3 &= r4
    2779	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB10_44>
    2780	b7 01 00 00 08 00 00 00	r1 = 0x8

00000000000056e8 <LBB10_43>
    2781	0f 12 00 00 00 00 00 00	r2 += r1
    2782	5f 62 00 00 00 00 00 00	r2 &= r6
    2783	bf 73 00 00 00 00 00 00	r3 = r7
    2784	0f 23 00 00 00 00 00 00	r3 += r2
    2785	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    2786	5f 43 00 00 00 00 00 00	r3 &= r4
    2787	07 01 00 00 08 00 00 00	r1 += 0x8
    2788	15 03 f8 ff 00 00 00 00	if r3 == 0x0 goto -0x8 <LBB10_43>

0000000000005728 <LBB10_44>
    2789	bf 31 00 00 00 00 00 00	r1 = r3
    2790	07 01 00 00 ff ff ff ff	r1 += -0x1
    2791	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    2792	5f 13 00 00 00 00 00 00	r3 &= r1
    2793	bf 31 00 00 00 00 00 00	r1 = r3
    2794	77 01 00 00 01 00 00 00	r1 >>= 0x1
    2795	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    2797	5f 51 00 00 00 00 00 00	r1 &= r5
    2798	1f 13 00 00 00 00 00 00	r3 -= r1
    2799	bf 31 00 00 00 00 00 00	r1 = r3
    2800	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    2802	5f 51 00 00 00 00 00 00	r1 &= r5
    2803	77 03 00 00 02 00 00 00	r3 >>= 0x2
    2804	5f 53 00 00 00 00 00 00	r3 &= r5
    2805	0f 31 00 00 00 00 00 00	r1 += r3
    2806	bf 13 00 00 00 00 00 00	r3 = r1
    2807	77 03 00 00 04 00 00 00	r3 >>= 0x4
    2808	0f 31 00 00 00 00 00 00	r1 += r3
    2809	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
    2811	5f 31 00 00 00 00 00 00	r1 &= r3
    2812	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    2814	2f 31 00 00 00 00 00 00	r1 *= r3
    2815	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    2816	0f 21 00 00 00 00 00 00	r1 += r2
    2817	5f 61 00 00 00 00 00 00	r1 &= r6
    2818	bf 72 00 00 00 00 00 00	r2 = r7
    2819	0f 12 00 00 00 00 00 00	r2 += r1
    2820	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    2821	67 02 00 00 38 00 00 00	r2 <<= 0x38
    2822	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    2823	b7 03 00 00 00 00 00 00	r3 = 0x0
    2824	6d 23 a4 ff 00 00 00 00	if r3 s> r2 goto -0x5c <LBB10_47>
    2825	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    2826	5f 42 00 00 00 00 00 00	r2 &= r4
    2827	15 02 a1 ff 00 00 00 00	if r2 == 0x0 goto -0x5f <LBB10_47>
    2828	bf 21 00 00 00 00 00 00	r1 = r2
    2829	07 01 00 00 ff ff ff ff	r1 += -0x1
    2830	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    2831	5f 12 00 00 00 00 00 00	r2 &= r1
    2832	bf 21 00 00 00 00 00 00	r1 = r2
    2833	77 01 00 00 01 00 00 00	r1 >>= 0x1
    2834	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    2836	5f 31 00 00 00 00 00 00	r1 &= r3
    2837	1f 12 00 00 00 00 00 00	r2 -= r1
    2838	bf 21 00 00 00 00 00 00	r1 = r2
    2839	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    2841	5f 31 00 00 00 00 00 00	r1 &= r3
    2842	77 02 00 00 02 00 00 00	r2 >>= 0x2
    2843	5f 32 00 00 00 00 00 00	r2 &= r3
    2844	0f 21 00 00 00 00 00 00	r1 += r2
    2845	bf 12 00 00 00 00 00 00	r2 = r1
    2846	77 02 00 00 04 00 00 00	r2 >>= 0x4
    2847	0f 21 00 00 00 00 00 00	r1 += r2
    2848	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    2850	5f 21 00 00 00 00 00 00	r1 &= r2
    2851	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    2853	2f 21 00 00 00 00 00 00	r1 *= r2
    2854	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    2855	05 00 85 ff 00 00 00 00	goto -0x7b <LBB10_47>

0000000000005940 <LBB10_40>
    2856	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)
    2857	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
    2858	05 00 08 00 00 00 00 00	goto +0x8 <LBB10_39>

0000000000005958 <LBB10_88>
    2859	bf a1 00 00 00 00 00 00	r1 = r10
    2860	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2861	b7 02 00 00 01 00 00 00	r2 = 0x1
    2862	b7 03 00 00 08 00 00 00	r3 = 0x8
    2863	85 10 00 00 a9 15 00 00	call 0x15a9 ; <hashbrown::raw::Fallibility::alloc_err>
    2864	79 a0 d0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x30)
    2865	05 00 06 00 00 00 00 00	goto +0x6 <LBB10_87>

0000000000005990 <LBB10_38>
    2866	79 a1 28 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd8)

0000000000005998 <LBB10_39>
    2867	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    2868	7b 61 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r6
    2869	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7

00000000000059b0 <LBB10_86>
    2870	18 00 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r0 = -0x7fffffffffffffff ll

00000000000059c0 <LBB10_87>
    2872	95 00 00 00 00 00 00 00	exit

00000000000059c8 <entrypoint>
    2873	bf 16 00 00 00 00 00 00	r6 = r1
    2874	bf a1 00 00 00 00 00 00	r1 = r10
    2875	07 01 00 00 38 ff ff ff	r1 += -0xc8
    2876	bf 62 00 00 00 00 00 00	r2 = r6
    2877	85 10 00 00 a5 0e 00 00	call 0xea5 ; <tester::entrypoint::deserialize>
    2878	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2880	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2881	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    2883	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_2>
    2884	bf 12 00 00 00 00 00 00	r2 = r1

0000000000005a28 <LBB11_2>
    2885	b7 05 00 00 00 00 00 00	r5 = 0x0
    2886	b7 03 00 00 01 00 00 00	r3 = 0x1
    2887	bf 21 00 00 00 00 00 00	r1 = r2
    2888	07 01 00 00 fa ff ff ff	r1 += -0x6
    2889	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_4>
    2890	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000005a58 <LBB11_4>
    2891	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_6>
    2892	bf 15 00 00 00 00 00 00	r5 = r1

0000000000005a68 <LBB11_6>
    2893	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
    2895	2d 15 04 00 00 00 00 00	if r5 > r1 goto +0x4 <LBB11_8>
    2896	b7 01 00 00 01 00 00 00	r1 = 0x1
    2897	b7 02 00 00 06 00 00 00	r2 = 0x6
    2898	85 10 00 00 54 16 00 00	call 0x1654 ; <alloc::alloc::handle_alloc_error>
    2899	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005aa0 <LBB11_8>
    2900	79 a4 60 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0xa0)
    2901	79 a7 50 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xb0)
    2902	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2904	7b 51 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r5
    2905	b7 02 00 00 65 66 00 00	r2 = 0x6665
    2906	6b 25 04 00 00 00 00 00	*(u16 *)(r5 + 0x4) = r2
    2907	b7 02 00 00 61 62 63 64	r2 = 0x64636261
    2908	63 25 00 00 00 00 00 00	*(u32 *)(r5 + 0x0) = r2
    2909	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2910	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    2912	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_10>
    2913	bf 12 00 00 00 00 00 00	r2 = r1

0000000000005b10 <LBB11_10>
    2914	bf 21 00 00 00 00 00 00	r1 = r2
    2915	07 01 00 00 e0 ff ff ff	r1 += -0x20
    2916	b7 00 00 00 00 00 00 00	r0 = 0x0
    2917	b7 03 00 00 01 00 00 00	r3 = 0x1
    2918	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_12>
    2919	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000005b40 <LBB11_12>
    2920	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_14>
    2921	bf 10 00 00 00 00 00 00	r0 = r1

0000000000005b50 <LBB11_14>
    2922	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
    2924	2d 10 02 00 00 00 00 00	if r0 > r1 goto +0x2 <LBB11_16>

0000000000005b68 <LBB11_15>
    2925	b7 01 00 00 01 00 00 00	r1 = 0x1
    2926	05 00 ac 00 00 00 00 00	goto +0xac <LBB11_58>

0000000000005b78 <LBB11_16>
    2927	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2929	7b 01 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r0
    2930	18 02 00 00 0c 0c 0c 0c 00 00 00 00 0c 0c 0c 0c	r2 = 0xc0c0c0c0c0c0c0c ll
    2932	7b 20 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r2
    2933	7b 20 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r2
    2934	7b 20 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r2
    2935	7b 20 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r2
    2936	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2937	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    2939	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_18>
    2940	bf 12 00 00 00 00 00 00	r2 = r1

0000000000005be8 <LBB11_18>
    2941	bf 21 00 00 00 00 00 00	r1 = r2
    2942	07 01 00 00 d0 ff ff ff	r1 += -0x30
    2943	b7 09 00 00 00 00 00 00	r9 = 0x0
    2944	b7 03 00 00 01 00 00 00	r3 = 0x1
    2945	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_20>
    2946	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000005c18 <LBB11_20>
    2947	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_22>
    2948	bf 19 00 00 00 00 00 00	r9 = r1

0000000000005c28 <LBB11_22>
    2949	57 09 00 00 f8 ff ff ff	r9 &= -0x8
    2950	18 02 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000007 ll
    2952	2d 29 04 00 00 00 00 00	if r9 > r2 goto +0x4 <LBB11_24>
    2953	b7 01 00 00 08 00 00 00	r1 = 0x8
    2954	b7 02 00 00 30 00 00 00	r2 = 0x30
    2955	85 10 00 00 1b 16 00 00	call 0x161b ; <alloc::alloc::handle_alloc_error>
    2956	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005c68 <LBB11_24>
    2957	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2959	7b 91 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r9
    2960	bf 98 00 00 00 00 00 00	r8 = r9
    2961	07 08 00 00 e0 ff ff ff	r8 += -0x20
    2962	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB11_26>
    2963	05 00 d9 ff 00 00 00 00	goto -0x27 <LBB11_15>

0000000000005ca0 <LBB11_26>
    2964	7b 6a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r6
    2965	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    2966	18 02 00 00 0c 0c 0c 0c 00 00 00 00 0c 0c 0c 0c	r2 = 0xc0c0c0c0c0c0c0c ll
    2968	7b 28 18 00 00 00 00 00	*(u64 *)(r8 + 0x18) = r2
    2969	7b 28 10 00 00 00 00 00	*(u64 *)(r8 + 0x10) = r2
    2970	7b 28 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r2
    2971	7b 28 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r2
    2972	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2973	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    2975	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_28>
    2976	bf 12 00 00 00 00 00 00	r2 = r1

0000000000005d08 <LBB11_28>
    2977	bf 21 00 00 00 00 00 00	r1 = r2
    2978	07 01 00 00 de ff ff ff	r1 += -0x22
    2979	b7 06 00 00 00 00 00 00	r6 = 0x0
    2980	b7 03 00 00 01 00 00 00	r3 = 0x1
    2981	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_30>
    2982	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000005d38 <LBB11_30>
    2983	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_32>
    2984	bf 16 00 00 00 00 00 00	r6 = r1

0000000000005d48 <LBB11_32>
    2985	7b 0a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r0
    2986	7b 5a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r5
    2987	7b 4a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r4
    2988	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
    2990	2d 16 04 00 00 00 00 00	if r6 > r1 goto +0x4 <LBB11_34>
    2991	b7 01 00 00 01 00 00 00	r1 = 0x1
    2992	b7 02 00 00 22 00 00 00	r2 = 0x22
    2993	85 10 00 00 f5 15 00 00	call 0x15f5 ; <alloc::alloc::handle_alloc_error>
    2994	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005d98 <LBB11_34>
    2995	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2997	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    2998	bf 61 00 00 00 00 00 00	r1 = r6
    2999	b7 02 00 00 16 00 00 00	r2 = 0x16
    3000	b7 03 00 00 22 00 00 00	r3 = 0x22
    3001	85 10 00 00 03 25 00 00	call 0x2503 ; <memset>
    3002	b7 01 00 00 22 00 00 00	r1 = 0x22
    3003	7b 19 28 00 00 00 00 00	*(u64 *)(r9 + 0x28) = r1
    3004	7b 19 20 00 00 00 00 00	*(u64 *)(r9 + 0x20) = r1
    3005	7b 69 18 00 00 00 00 00	*(u64 *)(r9 + 0x18) = r6
    3006	b7 01 00 00 20 00 00 00	r1 = 0x20
    3007	7b 19 10 00 00 00 00 00	*(u64 *)(r9 + 0x10) = r1
    3008	7b 19 08 00 00 00 00 00	*(u64 *)(r9 + 0x8) = r1
    3009	7b 89 00 00 00 00 00 00	*(u64 *)(r9 + 0x0) = r8
    3010	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3012	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3013	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    3015	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_36>
    3016	bf 12 00 00 00 00 00 00	r2 = r1

0000000000005e48 <LBB11_36>
    3017	b7 08 00 00 00 00 00 00	r8 = 0x0
    3018	b7 03 00 00 01 00 00 00	r3 = 0x1
    3019	bf 21 00 00 00 00 00 00	r1 = r2
    3020	07 01 00 00 c0 ff ff ff	r1 += -0x40
    3021	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_38>
    3022	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000005e78 <LBB11_38>
    3023	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_40>
    3024	bf 18 00 00 00 00 00 00	r8 = r1

0000000000005e88 <LBB11_40>
    3025	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
    3027	2d 18 04 00 00 00 00 00	if r8 > r1 goto +0x4 <LBB11_42>
    3028	b7 01 00 00 01 00 00 00	r1 = 0x1
    3029	b7 02 00 00 40 00 00 00	r2 = 0x40
    3030	85 10 00 00 d0 15 00 00	call 0x15d0 ; <alloc::alloc::handle_alloc_error>
    3031	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005ec0 <LBB11_42>
    3032	18 06 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r6 = 0x300000000 ll
    3034	7b 86 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r8
    3035	bf 81 00 00 00 00 00 00	r1 = r8
    3036	b7 02 00 00 7a 00 00 00	r2 = 0x7a
    3037	b7 03 00 00 40 00 00 00	r3 = 0x40
    3038	85 10 00 00 de 24 00 00	call 0x24de ; <memset>
    3039	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3040	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    3042	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_44>
    3043	bf 12 00 00 00 00 00 00	r2 = r1

0000000000005f20 <LBB11_44>
    3044	bf 21 00 00 00 00 00 00	r1 = r2
    3045	07 01 00 00 b0 ff ff ff	r1 += -0x50
    3046	b7 04 00 00 00 00 00 00	r4 = 0x0
    3047	b7 03 00 00 01 00 00 00	r3 = 0x1
    3048	79 a5 c8 fe 00 00 00 00	r5 = *(u64 *)(r10 - 0x138)
    3049	79 a0 d0 fe 00 00 00 00	r0 = *(u64 *)(r10 - 0x130)
    3050	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_46>
    3051	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000005f60 <LBB11_46>
    3052	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_48>
    3053	bf 14 00 00 00 00 00 00	r4 = r1

0000000000005f70 <LBB11_48>
    3054	57 04 00 00 f8 ff ff ff	r4 &= -0x8
    3055	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
    3057	2d 14 04 00 00 00 00 00	if r4 > r1 goto +0x4 <LBB11_50>
    3058	b7 01 00 00 08 00 00 00	r1 = 0x8
    3059	b7 02 00 00 50 00 00 00	r2 = 0x50
    3060	85 10 00 00 b2 15 00 00	call 0x15b2 ; <alloc::alloc::handle_alloc_error>
    3061	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005fb0 <LBB11_50>
    3062	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3064	7b 41 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r4
    3065	18 02 00 00 01 00 00 00 00 00 00 00 05 00 00 00	r2 = 0x500000001 ll
    3067	7b 24 48 00 00 00 00 00	*(u64 *)(r4 + 0x48) = r2
    3068	b7 02 00 00 02 00 00 00	r2 = 0x2
    3069	7b 24 40 00 00 00 00 00	*(u64 *)(r4 + 0x40) = r2
    3070	7b 24 38 00 00 00 00 00	*(u64 *)(r4 + 0x38) = r2
    3071	7b 94 30 00 00 00 00 00	*(u64 *)(r4 + 0x30) = r9
    3072	b7 02 00 00 20 00 00 00	r2 = 0x20
    3073	7b 24 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r2
    3074	7b 24 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r2
    3075	7b 04 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r0
    3076	b7 02 00 00 06 00 00 00	r2 = 0x6
    3077	7b 24 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r2
    3078	7b 24 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r2
    3079	7b 4a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r4
    3080	7b 54 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r5
    3081	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3082	18 02 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r2 = 0x300008000 ll
    3084	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_52>
    3085	bf 12 00 00 00 00 00 00	r2 = r1

0000000000006070 <LBB11_52>
    3086	bf 21 00 00 00 00 00 00	r1 = r2
    3087	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3088	b7 04 00 00 00 00 00 00	r4 = 0x0
    3089	b7 03 00 00 01 00 00 00	r3 = 0x1
    3090	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB11_54>
    3091	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000060a0 <LBB11_54>
    3092	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB11_56>
    3093	bf 14 00 00 00 00 00 00	r4 = r1

00000000000060b0 <LBB11_56>
    3094	57 04 00 00 f8 ff ff ff	r4 &= -0x8
    3095	18 01 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000007 ll
    3097	2d 14 04 00 00 00 00 00	if r4 > r1 goto +0x4 <LBB11_59>
    3098	b7 01 00 00 08 00 00 00	r1 = 0x8

00000000000060d8 <LBB11_58>
    3099	b7 02 00 00 20 00 00 00	r2 = 0x20
    3100	85 10 00 00 8a 15 00 00	call 0x158a ; <alloc::alloc::handle_alloc_error>
    3101	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000060f0 <LBB11_59>
    3102	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3104	7b 41 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r4
    3105	b7 01 00 00 00 28 00 00	r1 = 0x2800
    3106	7b 14 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r1
    3107	b7 01 00 00 40 00 00 00	r1 = 0x40
    3108	7b 14 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r1
    3109	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    3110	7b 4a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r4
    3111	7b 84 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r8
    3112	18 06 00 00 00 8b 01 00 00 00 00 00 00 00 00 00	r6 = 0x18b00 ll
    3114	7b 6a d8 fe 00 00 00 00	*(u64 *)(r10 - 0x128) = r6
    3115	bf a1 00 00 00 00 00 00	r1 = r10
    3116	07 01 00 00 e0 fe ff ff	r1 += -0x120
    3117	b7 02 00 00 00 00 00 00	r2 = 0x0
    3118	b7 03 00 00 28 00 00 00	r3 = 0x28
    3119	85 10 00 00 8d 24 00 00	call 0x248d ; <memset>
    3120	7b 6a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r6
    3121	bf a1 00 00 00 00 00 00	r1 = r10
    3122	07 01 00 00 10 ff ff ff	r1 += -0xf0
    3123	b7 02 00 00 00 00 00 00	r2 = 0x0
    3124	b7 03 00 00 28 00 00 00	r3 = 0x28
    3125	85 10 00 00 87 24 00 00	call 0x2487 ; <memset>
    3126	79 a1 c0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x140)
    3127	15 01 77 00 00 00 00 00	if r1 == 0x0 goto +0x77 <LBB11_86>
    3128	27 01 00 00 60 00 00 00	r1 *= 0x60
    3129	bf 79 00 00 00 00 00 00	r9 = r7
    3130	0f 19 00 00 00 00 00 00	r9 += r1
    3131	05 00 1b 00 00 00 00 00	goto +0x1b <LBB11_64>

00000000000061e0 <LBB11_61>
    3132	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    3134	2d 81 52 02 00 00 00 00	if r1 > r8 goto +0x252 <LBB11_154>
    3135	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3137	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8

0000000000006210 <LBB11_63>
    3138	bf 81 00 00 00 00 00 00	r1 = r8
    3139	bf 63 00 00 00 00 00 00	r3 = r6
    3140	85 10 00 00 13 24 00 00	call 0x2413 ; <memcpy>
    3141	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    3142	07 01 00 00 ff ff ff ff	r1 += -0x1
    3143	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 0x38) = r1
    3144	7b 6a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r6
    3145	7b 6a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r6
    3146	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    3147	bf a1 00 00 00 00 00 00	r1 = r10
    3148	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3149	bf a2 00 00 00 00 00 00	r2 = r10
    3150	07 02 00 00 08 ff ff ff	r2 += -0xf8
    3151	bf a3 00 00 00 00 00 00	r3 = r10
    3152	07 03 00 00 e8 ff ff ff	r3 += -0x18
    3153	bf a4 00 00 00 00 00 00	r4 = r10
    3154	07 04 00 00 38 ff ff ff	r4 += -0xc8
    3155	85 10 00 00 5f fa ff ff	call -0x5a1 ; <hashbrown::map::HashMap<K,V,S,A>::insert>
    3156	07 07 00 00 60 00 00 00	r7 += 0x60
    3157	5d 97 01 00 00 00 00 00	if r7 != r9 goto +0x1 <LBB11_64>
    3158	05 00 58 00 00 00 00 00	goto +0x58 <LBB11_86>

00000000000062b8 <LBB11_64>
    3159	bf a1 00 00 00 00 00 00	r1 = r10
    3160	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3161	bf 72 00 00 00 00 00 00	r2 = r7
    3162	85 10 00 00 6f 0d 00 00	call 0xd6f ; <tester::types::UtxoInfo::id>
    3163	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    3164	18 02 00 00 fe ff ff ff 00 00 00 00 ff ff ff 7f	r2 = 0x7ffffffffffffffe ll
    3166	2d 21 1d 02 00 00 00 00	if r1 > r2 goto +0x21d <LBB11_150>
    3167	07 01 00 00 01 00 00 00	r1 += 0x1
    3168	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 0x18) = r1
    3169	b7 08 00 00 01 00 00 00	r8 = 0x1
    3170	79 72 20 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x20)
    3171	79 76 30 00 00 00 00 00	r6 = *(u64 *)(r7 + 0x30)
    3172	15 06 18 00 00 00 00 00	if r6 == 0x0 goto +0x18 <LBB11_76>
    3173	65 06 02 00 ff ff ff ff	if r6 s> -0x1 goto +0x2 <LBB11_68>

0000000000006330 <LBB11_67>
    3174	85 10 00 00 2f 15 00 00	call 0x152f ; <alloc::raw_vec::capacity_overflow>
    3175	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006340 <LBB11_68>
    3176	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3178	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3179	18 03 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r3 = 0x300008000 ll
    3181	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_70>
    3182	bf 13 00 00 00 00 00 00	r3 = r1

0000000000006378 <LBB11_70>
    3183	bf 31 00 00 00 00 00 00	r1 = r3
    3184	1f 61 00 00 00 00 00 00	r1 -= r6
    3185	b7 08 00 00 00 00 00 00	r8 = 0x0
    3186	b7 04 00 00 01 00 00 00	r4 = 0x1
    3187	2d 31 01 00 00 00 00 00	if r1 > r3 goto +0x1 <LBB11_72>
    3188	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000063a8 <LBB11_72>
    3189	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB11_74>
    3190	bf 18 00 00 00 00 00 00	r8 = r1

00000000000063b8 <LBB11_74>
    3191	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    3193	2d 81 17 02 00 00 00 00	if r1 > r8 goto +0x217 <LBB11_154>
    3194	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3196	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8

00000000000063e8 <LBB11_76>
    3197	bf 81 00 00 00 00 00 00	r1 = r8
    3198	bf 63 00 00 00 00 00 00	r3 = r6
    3199	85 10 00 00 d8 23 00 00	call 0x23d8 ; <memcpy>
    3200	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    3201	07 01 00 00 ff ff ff ff	r1 += -0x1
    3202	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 0x18) = r1
    3203	7b 6a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r6
    3204	7b 6a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r6
    3205	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    3206	bf a1 00 00 00 00 00 00	r1 = r10
    3207	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3208	bf a2 00 00 00 00 00 00	r2 = r10
    3209	07 02 00 00 d8 fe ff ff	r2 += -0x128
    3210	bf a3 00 00 00 00 00 00	r3 = r10
    3211	07 03 00 00 e8 ff ff ff	r3 += -0x18
    3212	bf a4 00 00 00 00 00 00	r4 = r10
    3213	07 04 00 00 38 ff ff ff	r4 += -0xc8
    3214	85 10 00 00 24 fa ff ff	call -0x5dc ; <hashbrown::map::HashMap<K,V,S,A>::insert>
    3215	bf a1 00 00 00 00 00 00	r1 = r10
    3216	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3217	bf 72 00 00 00 00 00 00	r2 = r7
    3218	85 10 00 00 37 0d 00 00	call 0xd37 ; <tester::types::UtxoInfo::id>
    3219	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    3220	18 02 00 00 fe ff ff ff 00 00 00 00 ff ff ff 7f	r2 = 0x7ffffffffffffffe ll
    3222	2d 21 e5 01 00 00 00 00	if r1 > r2 goto +0x1e5 <LBB11_150>
    3223	07 01 00 00 01 00 00 00	r1 += 0x1
    3224	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 0x38) = r1
    3225	b7 08 00 00 01 00 00 00	r8 = 0x1
    3226	79 72 40 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x40)
    3227	79 76 50 00 00 00 00 00	r6 = *(u64 *)(r7 + 0x50)
    3228	15 06 a5 ff 00 00 00 00	if r6 == 0x0 goto -0x5b <LBB11_63>
    3229	65 06 01 00 ff ff ff ff	if r6 s> -0x1 goto +0x1 <LBB11_80>
    3230	05 00 c7 ff 00 00 00 00	goto -0x39 <LBB11_67>

00000000000064f8 <LBB11_80>
    3231	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3233	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3234	18 03 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r3 = 0x300008000 ll
    3236	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_82>
    3237	bf 13 00 00 00 00 00 00	r3 = r1

0000000000006530 <LBB11_82>
    3238	bf 31 00 00 00 00 00 00	r1 = r3
    3239	1f 61 00 00 00 00 00 00	r1 -= r6
    3240	b7 08 00 00 00 00 00 00	r8 = 0x0
    3241	b7 04 00 00 01 00 00 00	r4 = 0x1
    3242	2d 31 01 00 00 00 00 00	if r1 > r3 goto +0x1 <LBB11_84>
    3243	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006560 <LBB11_84>
    3244	55 04 8f ff 00 00 00 00	if r4 != 0x0 goto -0x71 <LBB11_61>
    3245	bf 18 00 00 00 00 00 00	r8 = r1
    3246	05 00 8d ff 00 00 00 00	goto -0x73 <LBB11_61>

0000000000006578 <LBB11_86>
    3247	bf a1 00 00 00 00 00 00	r1 = r10
    3248	07 01 00 00 38 ff ff ff	r1 += -0xc8
    3249	bf a2 00 00 00 00 00 00	r2 = r10
    3250	07 02 00 00 d8 fe ff ff	r2 += -0x128
    3251	b7 03 00 00 30 00 00 00	r3 = 0x30
    3252	85 10 00 00 a3 23 00 00	call 0x23a3 ; <memcpy>
    3253	bf a7 00 00 00 00 00 00	r7 = r10
    3254	07 07 00 00 68 ff ff ff	r7 += -0x98
    3255	bf a2 00 00 00 00 00 00	r2 = r10
    3256	07 02 00 00 08 ff ff ff	r2 += -0xf8
    3257	bf 71 00 00 00 00 00 00	r1 = r7
    3258	b7 03 00 00 30 00 00 00	r3 = 0x30
    3259	85 10 00 00 9c 23 00 00	call 0x239c ; <memcpy>
    3260	18 01 00 00 01 00 00 00 00 00 00 00 0f 00 00 00	r1 = 0xf00000001 ll
    3262	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3263	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    3264	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3265	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    3266	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    3267	b7 02 00 00 01 00 00 00	r2 = 0x1
    3268	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    3269	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    3270	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    3271	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    3272	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3274	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3275	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    3277	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB11_88>
    3278	bf 14 00 00 00 00 00 00	r4 = r1

0000000000006678 <LBB11_88>
    3279	b7 01 00 00 00 00 00 00	r1 = 0x0
    3280	bf 43 00 00 00 00 00 00	r3 = r4
    3281	07 03 00 00 00 fc ff ff	r3 += -0x400
    3282	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB11_90>
    3283	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000066a0 <LBB11_90>
    3284	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB11_92>
    3285	bf 31 00 00 00 00 00 00	r1 = r3

00000000000066b0 <LBB11_92>
    3286	18 02 00 00 07 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000007 ll
    3288	2d 21 04 00 00 00 00 00	if r1 > r2 goto +0x4 <LBB11_94>
    3289	b7 01 00 00 01 00 00 00	r1 = 0x1
    3290	b7 02 00 00 00 04 00 00	r2 = 0x400
    3291	85 10 00 00 cb 14 00 00	call 0x14cb ; <alloc::alloc::handle_alloc_error>
    3292	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000066e8 <LBB11_94>
    3293	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    3295	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    3296	b7 02 00 00 00 00 00 00	r2 = 0x0
    3297	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3298	b7 02 00 00 00 04 00 00	r2 = 0x400
    3299	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3300	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3301	bf a1 00 00 00 00 00 00	r1 = r10
    3302	07 01 00 00 38 ff ff ff	r1 += -0xc8
    3303	bf a2 00 00 00 00 00 00	r2 = r10
    3304	07 02 00 00 e8 ff ff ff	r2 += -0x18
    3305	85 10 00 00 38 f5 ff ff	call -0xac8 ; <borsh::ser::hashes::<impl borsh::ser::BorshSerialize for std::collections::hash::map::HashMap<K,V,H>>::serialize>
    3306	7b 0a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r0
    3307	55 00 98 01 00 00 00 00	if r0 != 0x0 goto +0x198 <LBB11_151>
    3308	bf a2 00 00 00 00 00 00	r2 = r10
    3309	07 02 00 00 e8 ff ff ff	r2 += -0x18
    3310	bf 71 00 00 00 00 00 00	r1 = r7
    3311	85 10 00 00 32 f5 ff ff	call -0xace ; <borsh::ser::hashes::<impl borsh::ser::BorshSerialize for std::collections::hash::map::HashMap<K,V,H>>::serialize>
    3312	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3313	7b 0a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r0
    3314	55 00 91 01 00 00 00 00	if r0 != 0x0 goto +0x191 <LBB11_151>
    3315	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)
    3316	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3317	1f 71 00 00 00 00 00 00	r1 -= r7
    3318	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB11_98>
    3319	bf a1 00 00 00 00 00 00	r1 = r10
    3320	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3321	bf 72 00 00 00 00 00 00	r2 = r7
    3322	b7 03 00 00 04 00 00 00	r3 = 0x4
    3323	85 10 00 00 f6 f4 ff ff	call -0xb0a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3324	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3325	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

00000000000067f0 <LBB11_98>
    3326	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3327	bf 31 00 00 00 00 00 00	r1 = r3
    3328	0f 71 00 00 00 00 00 00	r1 += r7
    3329	b7 06 00 00 01 00 00 00	r6 = 0x1
    3330	63 61 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r6
    3331	07 07 00 00 04 00 00 00	r7 += 0x4
    3332	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3333	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3334	1f 71 00 00 00 00 00 00	r1 -= r7
    3335	25 01 08 00 03 00 00 00	if r1 > 0x3 goto +0x8 <LBB11_100>
    3336	bf a1 00 00 00 00 00 00	r1 = r10
    3337	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3338	bf 72 00 00 00 00 00 00	r2 = r7
    3339	b7 03 00 00 04 00 00 00	r3 = 0x4
    3340	85 10 00 00 e5 f4 ff ff	call -0xb1b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3341	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3342	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3343	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006880 <LBB11_100>
    3344	bf 31 00 00 00 00 00 00	r1 = r3
    3345	0f 71 00 00 00 00 00 00	r1 += r7
    3346	63 61 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r6
    3347	18 01 00 00 03 00 00 00 00 00 00 00 15 00 00 00	r1 = 0x1500000003 ll
    3349	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    3350	07 07 00 00 04 00 00 00	r7 += 0x4
    3351	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3352	79 29 10 00 00 00 00 00	r9 = *(u64 *)(r2 + 0x10)
    3353	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xffffffff ll
    3355	2d 19 68 01 00 00 00 00	if r9 > r1 goto +0x168 <LBB11_151>
    3356	79 26 00 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x0)
    3357	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    3358	bf 81 00 00 00 00 00 00	r1 = r8
    3359	1f 71 00 00 00 00 00 00	r1 -= r7
    3360	25 01 08 00 03 00 00 00	if r1 > 0x3 goto +0x8 <LBB11_103>
    3361	bf a1 00 00 00 00 00 00	r1 = r10
    3362	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3363	bf 72 00 00 00 00 00 00	r2 = r7
    3364	b7 03 00 00 04 00 00 00	r3 = 0x4
    3365	85 10 00 00 cc f4 ff ff	call -0xb34 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3366	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3367	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    3368	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006948 <LBB11_103>
    3369	bf 31 00 00 00 00 00 00	r1 = r3
    3370	0f 71 00 00 00 00 00 00	r1 += r7
    3371	63 91 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r9
    3372	07 07 00 00 04 00 00 00	r7 += 0x4
    3373	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3374	bf 81 00 00 00 00 00 00	r1 = r8
    3375	1f 71 00 00 00 00 00 00	r1 -= r7
    3376	3d 91 08 00 00 00 00 00	if r1 >= r9 goto +0x8 <LBB11_105>
    3377	bf a1 00 00 00 00 00 00	r1 = r10
    3378	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3379	bf 72 00 00 00 00 00 00	r2 = r7
    3380	bf 93 00 00 00 00 00 00	r3 = r9
    3381	85 10 00 00 bc f4 ff ff	call -0xb44 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3382	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    3383	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3384	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

00000000000069c8 <LBB11_105>
    3385	bf 31 00 00 00 00 00 00	r1 = r3
    3386	0f 71 00 00 00 00 00 00	r1 += r7
    3387	bf 62 00 00 00 00 00 00	r2 = r6
    3388	bf 36 00 00 00 00 00 00	r6 = r3
    3389	bf 93 00 00 00 00 00 00	r3 = r9
    3390	85 10 00 00 19 23 00 00	call 0x2319 ; <memcpy>
    3391	bf 63 00 00 00 00 00 00	r3 = r6
    3392	0f 97 00 00 00 00 00 00	r7 += r9
    3393	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3394	1f 78 00 00 00 00 00 00	r8 -= r7
    3395	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3396	61 26 48 00 00 00 00 00	r6 = *(u32 *)(r2 + 0x48)
    3397	25 08 08 00 03 00 00 00	if r8 > 0x3 goto +0x8 <LBB11_107>
    3398	bf a1 00 00 00 00 00 00	r1 = r10
    3399	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3400	bf 72 00 00 00 00 00 00	r2 = r7
    3401	b7 03 00 00 04 00 00 00	r3 = 0x4
    3402	85 10 00 00 a7 f4 ff ff	call -0xb59 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3403	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3404	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3405	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006a70 <LBB11_107>
    3406	bf 31 00 00 00 00 00 00	r1 = r3
    3407	0f 71 00 00 00 00 00 00	r1 += r7
    3408	63 61 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r6
    3409	07 07 00 00 04 00 00 00	r7 += 0x4
    3410	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3411	79 29 28 00 00 00 00 00	r9 = *(u64 *)(r2 + 0x28)
    3412	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xffffffff ll
    3414	2d 19 2d 01 00 00 00 00	if r9 > r1 goto +0x12d <LBB11_151>
    3415	79 26 18 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x18)
    3416	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    3417	bf 81 00 00 00 00 00 00	r1 = r8
    3418	1f 71 00 00 00 00 00 00	r1 -= r7
    3419	25 01 08 00 03 00 00 00	if r1 > 0x3 goto +0x8 <LBB11_110>
    3420	bf a1 00 00 00 00 00 00	r1 = r10
    3421	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3422	bf 72 00 00 00 00 00 00	r2 = r7
    3423	b7 03 00 00 04 00 00 00	r3 = 0x4
    3424	85 10 00 00 91 f4 ff ff	call -0xb6f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3425	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3426	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    3427	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006b20 <LBB11_110>
    3428	bf 31 00 00 00 00 00 00	r1 = r3
    3429	0f 71 00 00 00 00 00 00	r1 += r7
    3430	63 91 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r9
    3431	07 07 00 00 04 00 00 00	r7 += 0x4
    3432	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3433	bf 81 00 00 00 00 00 00	r1 = r8
    3434	1f 71 00 00 00 00 00 00	r1 -= r7
    3435	3d 91 08 00 00 00 00 00	if r1 >= r9 goto +0x8 <LBB11_112>
    3436	bf a1 00 00 00 00 00 00	r1 = r10
    3437	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3438	bf 72 00 00 00 00 00 00	r2 = r7
    3439	bf 93 00 00 00 00 00 00	r3 = r9
    3440	85 10 00 00 81 f4 ff ff	call -0xb7f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3441	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    3442	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3443	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006ba0 <LBB11_112>
    3444	bf 31 00 00 00 00 00 00	r1 = r3
    3445	0f 71 00 00 00 00 00 00	r1 += r7
    3446	bf 62 00 00 00 00 00 00	r2 = r6
    3447	bf 36 00 00 00 00 00 00	r6 = r3
    3448	bf 93 00 00 00 00 00 00	r3 = r9
    3449	85 10 00 00 de 22 00 00	call 0x22de ; <memcpy>
    3450	bf 63 00 00 00 00 00 00	r3 = r6
    3451	0f 97 00 00 00 00 00 00	r7 += r9
    3452	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3453	1f 78 00 00 00 00 00 00	r8 -= r7
    3454	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3455	61 26 4c 00 00 00 00 00	r6 = *(u32 *)(r2 + 0x4c)
    3456	25 08 08 00 03 00 00 00	if r8 > 0x3 goto +0x8 <LBB11_114>
    3457	bf a1 00 00 00 00 00 00	r1 = r10
    3458	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3459	bf 72 00 00 00 00 00 00	r2 = r7
    3460	b7 03 00 00 04 00 00 00	r3 = 0x4
    3461	85 10 00 00 6c f4 ff ff	call -0xb94 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3462	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    3463	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3464	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006c48 <LBB11_114>
    3465	bf 31 00 00 00 00 00 00	r1 = r3
    3466	0f 71 00 00 00 00 00 00	r1 += r7
    3467	63 61 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r6
    3468	07 07 00 00 04 00 00 00	r7 += 0x4
    3469	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3470	79 26 40 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x40)
    3471	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xffffffff ll
    3473	2d 16 f2 00 00 00 00 00	if r6 > r1 goto +0xf2 <LBB11_151>
    3474	79 28 30 00 00 00 00 00	r8 = *(u64 *)(r2 + 0x30)
    3475	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3476	1f 71 00 00 00 00 00 00	r1 -= r7
    3477	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB11_117>
    3478	bf a1 00 00 00 00 00 00	r1 = r10
    3479	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3480	bf 72 00 00 00 00 00 00	r2 = r7
    3481	b7 03 00 00 04 00 00 00	r3 = 0x4
    3482	85 10 00 00 57 f4 ff ff	call -0xba9 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3483	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3484	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006ce8 <LBB11_117>
    3485	bf 31 00 00 00 00 00 00	r1 = r3
    3486	0f 71 00 00 00 00 00 00	r1 += r7
    3487	63 61 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r6
    3488	07 07 00 00 04 00 00 00	r7 += 0x4
    3489	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3490	15 06 2f 00 00 00 00 00	if r6 == 0x0 goto +0x2f <LBB11_125>
    3491	27 06 00 00 18 00 00 00	r6 *= 0x18
    3492	bf 81 00 00 00 00 00 00	r1 = r8
    3493	0f 61 00 00 00 00 00 00	r1 += r6
    3494	7b 1a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r1

0000000000006d38 <LBB11_119>
    3495	79 89 10 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x10)
    3496	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xffffffff ll
    3498	2d 19 d9 00 00 00 00 00	if r9 > r1 goto +0xd9 <LBB11_151>
    3499	79 86 00 00 00 00 00 00	r6 = *(u64 *)(r8 + 0x0)
    3500	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3501	bf 12 00 00 00 00 00 00	r2 = r1
    3502	1f 72 00 00 00 00 00 00	r2 -= r7
    3503	25 02 08 00 03 00 00 00	if r2 > 0x3 goto +0x8 <LBB11_122>
    3504	bf a1 00 00 00 00 00 00	r1 = r10
    3505	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3506	bf 72 00 00 00 00 00 00	r2 = r7
    3507	b7 03 00 00 04 00 00 00	r3 = 0x4
    3508	85 10 00 00 3d f4 ff ff	call -0xbc3 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3509	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3510	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3511	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006dc0 <LBB11_122>
    3512	bf 32 00 00 00 00 00 00	r2 = r3
    3513	0f 72 00 00 00 00 00 00	r2 += r7
    3514	63 92 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r9
    3515	07 07 00 00 04 00 00 00	r7 += 0x4
    3516	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3517	1f 71 00 00 00 00 00 00	r1 -= r7
    3518	3d 91 07 00 00 00 00 00	if r1 >= r9 goto +0x7 <LBB11_124>
    3519	bf a1 00 00 00 00 00 00	r1 = r10
    3520	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3521	bf 72 00 00 00 00 00 00	r2 = r7
    3522	bf 93 00 00 00 00 00 00	r3 = r9
    3523	85 10 00 00 2e f4 ff ff	call -0xbd2 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3524	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    3525	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006e30 <LBB11_124>
    3526	bf 31 00 00 00 00 00 00	r1 = r3
    3527	0f 71 00 00 00 00 00 00	r1 += r7
    3528	bf 62 00 00 00 00 00 00	r2 = r6
    3529	bf 36 00 00 00 00 00 00	r6 = r3
    3530	bf 93 00 00 00 00 00 00	r3 = r9
    3531	85 10 00 00 8c 22 00 00	call 0x228c ; <memcpy>
    3532	bf 63 00 00 00 00 00 00	r3 = r6
    3533	0f 97 00 00 00 00 00 00	r7 += r9
    3534	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3535	07 08 00 00 18 00 00 00	r8 += 0x18
    3536	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    3537	5d 18 d5 ff 00 00 00 00	if r8 != r1 goto -0x2b <LBB11_119>

0000000000006e90 <LBB11_125>
    3538	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3539	1f 71 00 00 00 00 00 00	r1 -= r7
    3540	25 01 06 00 03 00 00 00	if r1 > 0x3 goto +0x6 <LBB11_127>
    3541	bf a1 00 00 00 00 00 00	r1 = r10
    3542	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3543	bf 72 00 00 00 00 00 00	r2 = r7
    3544	b7 03 00 00 04 00 00 00	r3 = 0x4
    3545	85 10 00 00 18 f4 ff ff	call -0xbe8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3546	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006ed8 <LBB11_127>
    3547	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    3548	bf 81 00 00 00 00 00 00	r1 = r8
    3549	0f 71 00 00 00 00 00 00	r1 += r7
    3550	b7 02 00 00 01 00 00 00	r2 = 0x1
    3551	63 21 00 00 00 00 00 00	*(u32 *)(r1 + 0x0) = r2
    3552	07 07 00 00 04 00 00 00	r7 += 0x4
    3553	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3554	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3555	1f 71 00 00 00 00 00 00	r1 -= r7
    3556	79 a9 c8 fe 00 00 00 00	r9 = *(u64 *)(r10 - 0x138)
    3557	79 96 18 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x18)
    3558	25 01 07 00 07 00 00 00	if r1 > 0x7 goto +0x7 <LBB11_129>
    3559	bf a1 00 00 00 00 00 00	r1 = r10
    3560	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3561	bf 72 00 00 00 00 00 00	r2 = r7
    3562	b7 03 00 00 08 00 00 00	r3 = 0x8
    3563	85 10 00 00 06 f4 ff ff	call -0xbfa ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3564	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    3565	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000006f70 <LBB11_129>
    3566	bf 81 00 00 00 00 00 00	r1 = r8
    3567	0f 71 00 00 00 00 00 00	r1 += r7
    3568	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3569	07 07 00 00 08 00 00 00	r7 += 0x8
    3570	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3571	79 99 10 00 00 00 00 00	r9 = *(u64 *)(r9 + 0x10)
    3572	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xffffffff ll
    3574	2d 19 8d 00 00 00 00 00	if r9 > r1 goto +0x8d <LBB11_151>
    3575	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    3576	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    3577	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3578	bf 12 00 00 00 00 00 00	r2 = r1
    3579	1f 72 00 00 00 00 00 00	r2 -= r7
    3580	25 02 08 00 03 00 00 00	if r2 > 0x3 goto +0x8 <LBB11_132>
    3581	bf a1 00 00 00 00 00 00	r1 = r10
    3582	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3583	bf 72 00 00 00 00 00 00	r2 = r7
    3584	b7 03 00 00 04 00 00 00	r3 = 0x4
    3585	85 10 00 00 f0 f3 ff ff	call -0xc10 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3586	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    3587	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3588	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000007028 <LBB11_132>
    3589	bf 82 00 00 00 00 00 00	r2 = r8
    3590	0f 72 00 00 00 00 00 00	r2 += r7
    3591	63 92 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r9
    3592	07 07 00 00 04 00 00 00	r7 += 0x4
    3593	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3594	1f 71 00 00 00 00 00 00	r1 -= r7
    3595	3d 91 07 00 00 00 00 00	if r1 >= r9 goto +0x7 <LBB11_134>
    3596	bf a1 00 00 00 00 00 00	r1 = r10
    3597	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3598	bf 72 00 00 00 00 00 00	r2 = r7
    3599	bf 93 00 00 00 00 00 00	r3 = r9
    3600	85 10 00 00 e1 f3 ff ff	call -0xc1f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3601	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    3602	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000007098 <LBB11_134>
    3603	bf 81 00 00 00 00 00 00	r1 = r8
    3604	0f 71 00 00 00 00 00 00	r1 += r7
    3605	bf 62 00 00 00 00 00 00	r2 = r6
    3606	bf 93 00 00 00 00 00 00	r3 = r9
    3607	85 10 00 00 40 22 00 00	call 0x2240 ; <memcpy>
    3608	0f 97 00 00 00 00 00 00	r7 += r9
    3609	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    3610	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3611	1f 71 00 00 00 00 00 00	r1 -= r7
    3612	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB11_136>
    3613	bf a1 00 00 00 00 00 00	r1 = r10
    3614	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3615	bf 72 00 00 00 00 00 00	r2 = r7
    3616	b7 03 00 00 04 00 00 00	r3 = 0x4
    3617	85 10 00 00 d0 f3 ff ff	call -0xc30 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3618	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    3619	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)

0000000000007120 <LBB11_136>
    3620	0f 78 00 00 00 00 00 00	r8 += r7
    3621	b7 01 00 00 0f 00 00 00	r1 = 0xf
    3622	63 18 00 00 00 00 00 00	*(u32 *)(r8 + 0x0) = r1
    3623	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3624	79 a9 e8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x18)
    3625	79 a6 b8 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x148)
    3626	15 09 5a 00 00 00 00 00	if r9 == 0x0 goto +0x5a <LBB11_152>
    3627	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    3628	15 01 17 00 00 00 00 00	if r1 == 0x0 goto +0x17 <LBB11_143>
    3629	79 a1 50 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xb0)
    3630	15 01 15 00 00 00 00 00	if r1 == 0x0 goto +0x15 <LBB11_143>
    3631	79 a2 38 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc8)
    3632	79 25 00 00 00 00 00 00	r5 = *(u64 *)(r2 + 0x0)
    3633	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    3634	18 03 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r3 = -0x7f7f7f7f7f7f7f80 ll
    3636	5f 35 00 00 00 00 00 00	r5 &= r3
    3637	bf 24 00 00 00 00 00 00	r4 = r2
    3638	07 04 00 00 08 00 00 00	r4 += 0x8

00000000000071b8 <LBB11_140>
    3639	55 05 06 00 00 00 00 00	if r5 != 0x0 goto +0x6 <LBB11_142>

00000000000071c0 <LBB11_141>
    3640	79 45 00 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x0)
    3641	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    3642	5f 35 00 00 00 00 00 00	r5 &= r3
    3643	07 04 00 00 08 00 00 00	r4 += 0x8
    3644	07 02 00 00 80 fe ff ff	r2 += -0x180
    3645	15 05 fa ff 00 00 00 00	if r5 == 0x0 goto -0x6 <LBB11_141>

00000000000071f0 <LBB11_142>
    3646	bf 50 00 00 00 00 00 00	r0 = r5
    3647	07 00 00 00 ff ff ff ff	r0 += -0x1
    3648	5f 50 00 00 00 00 00 00	r0 &= r5
    3649	07 01 00 00 ff ff ff ff	r1 += -0x1
    3650	bf 05 00 00 00 00 00 00	r5 = r0
    3651	55 01 f3 ff 00 00 00 00	if r1 != 0x0 goto -0xd <LBB11_140>

0000000000007220 <LBB11_143>
    3652	07 07 00 00 04 00 00 00	r7 += 0x4
    3653	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    3654	15 01 17 00 00 00 00 00	if r1 == 0x0 goto +0x17 <LBB11_149>
    3655	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    3656	15 01 15 00 00 00 00 00	if r1 == 0x0 goto +0x15 <LBB11_149>
    3657	79 a2 68 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x98)
    3658	79 25 00 00 00 00 00 00	r5 = *(u64 *)(r2 + 0x0)
    3659	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    3660	18 03 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r3 = -0x7f7f7f7f7f7f7f80 ll
    3662	5f 35 00 00 00 00 00 00	r5 &= r3
    3663	bf 24 00 00 00 00 00 00	r4 = r2
    3664	07 04 00 00 08 00 00 00	r4 += 0x8

0000000000007288 <LBB11_146>
    3665	55 05 06 00 00 00 00 00	if r5 != 0x0 goto +0x6 <LBB11_148>

0000000000007290 <LBB11_147>
    3666	79 45 00 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x0)
    3667	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    3668	5f 35 00 00 00 00 00 00	r5 &= r3
    3669	07 04 00 00 08 00 00 00	r4 += 0x8
    3670	07 02 00 00 80 fe ff ff	r2 += -0x180
    3671	15 05 fa ff 00 00 00 00	if r5 == 0x0 goto -0x6 <LBB11_147>

00000000000072c0 <LBB11_148>
    3672	bf 50 00 00 00 00 00 00	r0 = r5
    3673	07 00 00 00 ff ff ff ff	r0 += -0x1
    3674	5f 50 00 00 00 00 00 00	r0 &= r5
    3675	07 01 00 00 ff ff ff ff	r1 += -0x1
    3676	bf 05 00 00 00 00 00 00	r5 = r0
    3677	55 01 f3 ff 00 00 00 00	if r1 != 0x0 goto -0xd <LBB11_146>

00000000000072f0 <LBB11_149>
    3678	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    3679	b7 01 00 00 02 00 00 00	r1 = 0x2
    3680	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    3681	18 01 00 00 a0 9e 01 00 00 00 00 00 00 00 00 00	r1 = 0x19ea0 ll
    3683	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    3684	b7 01 00 00 01 00 00 00	r1 = 0x1
    3685	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    3686	bf a1 00 00 00 00 00 00	r1 = r10
    3687	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3688	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    3689	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
    3691	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3692	bf a1 00 00 00 00 00 00	r1 = r10
    3693	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3694	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3695	b7 01 00 00 00 00 00 00	r1 = 0x0
    3696	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    3697	bf a1 00 00 00 00 00 00	r1 = r10
    3698	07 01 00 00 38 ff ff ff	r1 += -0xc8
    3699	85 10 00 00 6e 11 00 00	call 0x116e ; <std::io::stdio::_eprint>
    3700	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    3701	63 36 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r3
    3702	07 06 00 00 04 00 00 00	r6 += 0x4
    3703	bf 61 00 00 00 00 00 00	r1 = r6
    3704	bf 92 00 00 00 00 00 00	r2 = r9
    3705	85 10 00 00 de 21 00 00	call 0x21de ; <memcpy>
    3706	b7 00 00 00 00 00 00 00	r0 = 0x0
    3707	95 00 00 00 00 00 00 00	exit

00000000000073e0 <LBB11_150>
    3708	bf a3 00 00 00 00 00 00	r3 = r10
    3709	07 03 00 00 d0 ff ff ff	r3 += -0x30
    3710	18 01 00 00 c4 8a 01 00 00 00 00 00 00 00 00 00	r1 = 0x18ac4 ll
    3712	b7 02 00 00 18 00 00 00	r2 = 0x18
    3713	18 04 00 00 80 9e 01 00 00 00 00 00 00 00 00 00	r4 = 0x19e80 ll
    3715	05 00 09 00 00 00 00 00	goto +0x9 <LBB11_153>

0000000000007420 <LBB11_151>
    3716	79 a1 c0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x140)

0000000000007428 <LBB11_152>
    3717	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3718	bf a3 00 00 00 00 00 00	r3 = r10
    3719	07 03 00 00 e8 ff ff ff	r3 += -0x18
    3720	18 01 00 00 1a 8b 01 00 00 00 00 00 00 00 00 00	r1 = 0x18b1a ll
    3722	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    3723	18 04 00 00 c0 9e 01 00 00 00 00 00 00 00 00 00	r4 = 0x19ec0 ll

0000000000007468 <LBB11_153>
    3725	18 05 00 00 e0 9e 01 00 00 00 00 00 00 00 00 00	r5 = 0x19ee0 ll
    3727	85 10 00 00 af 15 00 00	call 0x15af ; <core::result::unwrap_failed>
    3728	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000007488 <LBB11_154>
    3729	b7 01 00 00 01 00 00 00	r1 = 0x1
    3730	bf 62 00 00 00 00 00 00	r2 = r6
    3731	85 10 00 00 13 13 00 00	call 0x1313 ; <alloc::alloc::handle_alloc_error>
    3732	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000074a8 <__rust_alloc>
    3733	18 03 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000000 ll
    3735	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    3736	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    3738	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB12_2>
    3739	bf 34 00 00 00 00 00 00	r4 = r3

00000000000074e0 <LBB12_2>
    3740	bf 43 00 00 00 00 00 00	r3 = r4
    3741	1f 13 00 00 00 00 00 00	r3 -= r1
    3742	b7 00 00 00 00 00 00 00	r0 = 0x0
    3743	b7 05 00 00 01 00 00 00	r5 = 0x1
    3744	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB12_4>
    3745	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000007510 <LBB12_4>
    3746	b7 01 00 00 00 00 00 00	r1 = 0x0
    3747	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB12_6>
    3748	bf 31 00 00 00 00 00 00	r1 = r3

0000000000007528 <LBB12_6>
    3749	87 02 00 00 00 00 00 00	r2 = -r2
    3750	5f 21 00 00 00 00 00 00	r1 &= r2
    3751	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
    3753	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB12_8>
    3754	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    3756	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    3757	bf 10 00 00 00 00 00 00	r0 = r1

0000000000007570 <LBB12_8>
    3758	95 00 00 00 00 00 00 00	exit

0000000000007578 <__rust_dealloc>
    3759	95 00 00 00 00 00 00 00	exit

0000000000007580 <__rust_realloc>
    3760	bf 25 00 00 00 00 00 00	r5 = r2
    3761	bf 12 00 00 00 00 00 00	r2 = r1
    3762	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3764	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3765	18 06 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r6 = 0x300008000 ll
    3767	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB14_2>
    3768	bf 16 00 00 00 00 00 00	r6 = r1

00000000000075c8 <LBB14_2>
    3769	bf 61 00 00 00 00 00 00	r1 = r6
    3770	1f 41 00 00 00 00 00 00	r1 -= r4
    3771	b7 00 00 00 00 00 00 00	r0 = 0x0
    3772	b7 07 00 00 01 00 00 00	r7 = 0x1
    3773	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB14_4>
    3774	b7 07 00 00 00 00 00 00	r7 = 0x0

00000000000075f8 <LBB14_4>
    3775	b7 06 00 00 00 00 00 00	r6 = 0x0
    3776	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB14_6>
    3777	bf 16 00 00 00 00 00 00	r6 = r1

0000000000007610 <LBB14_6>
    3778	87 03 00 00 00 00 00 00	r3 = -r3
    3779	5f 36 00 00 00 00 00 00	r6 &= r3
    3780	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    3782	2d 61 09 00 00 00 00 00	if r1 > r6 goto +0x9 <LBB14_10>
    3783	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3785	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3786	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB14_9>
    3787	bf 45 00 00 00 00 00 00	r5 = r4

0000000000007660 <LBB14_9>
    3788	bf 61 00 00 00 00 00 00	r1 = r6
    3789	bf 53 00 00 00 00 00 00	r3 = r5
    3790	85 10 00 00 89 21 00 00	call 0x2189 ; <memcpy>
    3791	bf 60 00 00 00 00 00 00	r0 = r6

0000000000007680 <LBB14_10>
    3792	95 00 00 00 00 00 00 00	exit

0000000000007688 <__rust_alloc_zeroed>
    3793	bf 13 00 00 00 00 00 00	r3 = r1
    3794	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3796	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3797	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    3799	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB15_2>
    3800	bf 14 00 00 00 00 00 00	r4 = r1

00000000000076c8 <LBB15_2>
    3801	bf 41 00 00 00 00 00 00	r1 = r4
    3802	1f 31 00 00 00 00 00 00	r1 -= r3
    3803	b7 00 00 00 00 00 00 00	r0 = 0x0
    3804	b7 05 00 00 01 00 00 00	r5 = 0x1
    3805	2d 41 01 00 00 00 00 00	if r1 > r4 goto +0x1 <LBB15_4>
    3806	b7 05 00 00 00 00 00 00	r5 = 0x0

00000000000076f8 <LBB15_4>
    3807	b7 06 00 00 00 00 00 00	r6 = 0x0
    3808	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB15_6>
    3809	bf 16 00 00 00 00 00 00	r6 = r1

0000000000007710 <LBB15_6>
    3810	87 02 00 00 00 00 00 00	r2 = -r2
    3811	5f 26 00 00 00 00 00 00	r6 &= r2
    3812	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    3814	2d 61 07 00 00 00 00 00	if r1 > r6 goto +0x7 <LBB15_8>
    3815	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    3817	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3818	bf 61 00 00 00 00 00 00	r1 = r6
    3819	b7 02 00 00 00 00 00 00	r2 = 0x0
    3820	85 10 00 00 d0 21 00 00	call 0x21d0 ; <memset>
    3821	bf 60 00 00 00 00 00 00	r0 = r6

0000000000007770 <LBB15_8>
    3822	95 00 00 00 00 00 00 00	exit

0000000000007778 <custom_panic>
    3823	b7 01 00 00 01 00 00 00	r1 = 0x1
    3824	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    3825	18 01 00 00 f8 9e 01 00 00 00 00 00 00 00 00 00	r1 = 0x19ef8 ll
    3827	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3828	b7 01 00 00 00 00 00 00	r1 = 0x0
    3829	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3830	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3831	18 01 00 00 f0 89 01 00 00 00 00 00 00 00 00 00	r1 = 0x189f0 ll
    3833	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    3834	bf a1 00 00 00 00 00 00	r1 = r10
    3835	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3836	85 10 00 00 e5 10 00 00	call 0x10e5 ; <std::io::stdio::_eprint>
    3837	95 00 00 00 00 00 00 00	exit

00000000000077f0 <__rust_alloc_error_handler>
    3838	85 10 00 00 c3 11 00 00	call 0x11c3 ; <__rg_oom>
    3839	95 00 00 00 00 00 00 00	exit

0000000000007800 <core::fmt::Write::write_fmt>
    3840	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3841	bf a6 00 00 00 00 00 00	r6 = r10
    3842	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3843	bf 61 00 00 00 00 00 00	r1 = r6
    3844	b7 03 00 00 30 00 00 00	r3 = 0x30
    3845	85 10 00 00 52 21 00 00	call 0x2152 ; <memcpy>
    3846	bf a1 00 00 00 00 00 00	r1 = r10
    3847	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3848	18 02 00 00 18 a0 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a018 ll
    3850	bf 63 00 00 00 00 00 00	r3 = r6
    3851	85 10 00 00 cd 17 00 00	call 0x17cd ; <core::fmt::write>
    3852	95 00 00 00 00 00 00 00	exit

0000000000007868 <core::ptr::drop_in_place<<core::cell::RefCell<T> as core::fmt::Debug>::fmt::BorrowedPlaceholder>>
    3853	95 00 00 00 00 00 00 00	exit

0000000000007870 <core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    3854	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3855	15 02 5f 00 00 00 00 00	if r2 == 0x0 goto +0x5f <LBB17_13>
    3856	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    3857	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    3858	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB17_3>
    3859	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3860	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    3861	05 00 12 00 00 00 00 00	goto +0x12 <LBB17_11>

00000000000078b0 <LBB17_3>
    3862	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    3863	79 96 00 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x0)
    3864	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
    3865	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
    3867	5f 16 00 00 00 00 00 00	r6 &= r1
    3868	bf 97 00 00 00 00 00 00	r7 = r9
    3869	07 07 00 00 08 00 00 00	r7 += 0x8
    3870	7b 9a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r9
    3871	05 00 1b 00 00 00 00 00	goto +0x1b <LBB17_4>

0000000000007900 <LBB17_10>
    3872	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    3873	5f 61 00 00 00 00 00 00	r1 &= r6
    3874	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    3875	07 02 00 00 ff ff ff ff	r2 += -0x1
    3876	bf 16 00 00 00 00 00 00	r6 = r1
    3877	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
    3879	55 02 13 00 00 00 00 00	if r2 != 0x0 goto +0x13 <LBB17_4>

0000000000007940 <LBB17_11>
    3880	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x28)
    3881	bf 62 00 00 00 00 00 00	r2 = r6
    3882	07 02 00 00 01 00 00 00	r2 += 0x1
    3883	bf a1 00 00 00 00 00 00	r1 = r10
    3884	07 01 00 00 f0 ff ff ff	r1 += -0x10
    3885	b7 03 00 00 00 00 00 00	r3 = 0x0
    3886	b7 04 00 00 30 00 00 00	r4 = 0x30
    3887	b7 05 00 00 00 00 00 00	r5 = 0x0
    3888	85 10 00 00 db 21 00 00	call 0x21db ; <__multi3>
    3889	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3890	0f 26 00 00 00 00 00 00	r6 += r2
    3891	07 06 00 00 09 00 00 00	r6 += 0x9
    3892	15 06 3a 00 00 00 00 00	if r6 == 0x0 goto +0x3a <LBB17_13>
    3893	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3894	1f 21 00 00 00 00 00 00	r1 -= r2
    3895	bf 62 00 00 00 00 00 00	r2 = r6
    3896	b7 03 00 00 08 00 00 00	r3 = 0x8
    3897	85 10 00 00 75 ff ff ff	call -0x8b ; <__rust_dealloc>
    3898	05 00 34 00 00 00 00 00	goto +0x34 <LBB17_13>

00000000000079d8 <LBB17_4>
    3899	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    3900	55 06 06 00 00 00 00 00	if r6 != 0x0 goto +0x6 <LBB17_6>

00000000000079e8 <LBB17_5>
    3901	79 76 00 00 00 00 00 00	r6 = *(u64 *)(r7 + 0x0)
    3902	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
    3903	5f 16 00 00 00 00 00 00	r6 &= r1
    3904	07 07 00 00 08 00 00 00	r7 += 0x8
    3905	07 09 00 00 80 fe ff ff	r9 += -0x180
    3906	15 06 fa ff 00 00 00 00	if r6 == 0x0 goto -0x6 <LBB17_5>

0000000000007a18 <LBB17_6>
    3907	bf 61 00 00 00 00 00 00	r1 = r6
    3908	07 01 00 00 ff ff ff ff	r1 += -0x1
    3909	bf 62 00 00 00 00 00 00	r2 = r6
    3910	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    3911	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    3912	5f 12 00 00 00 00 00 00	r2 &= r1
    3913	bf 21 00 00 00 00 00 00	r1 = r2
    3914	77 01 00 00 01 00 00 00	r1 >>= 0x1
    3915	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    3917	5f 31 00 00 00 00 00 00	r1 &= r3
    3918	1f 12 00 00 00 00 00 00	r2 -= r1
    3919	bf 21 00 00 00 00 00 00	r1 = r2
    3920	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    3922	5f 31 00 00 00 00 00 00	r1 &= r3
    3923	77 02 00 00 02 00 00 00	r2 >>= 0x2
    3924	5f 32 00 00 00 00 00 00	r2 &= r3
    3925	0f 21 00 00 00 00 00 00	r1 += r2
    3926	bf 12 00 00 00 00 00 00	r2 = r1
    3927	77 02 00 00 04 00 00 00	r2 >>= 0x4
    3928	0f 21 00 00 00 00 00 00	r1 += r2
    3929	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    3931	5f 21 00 00 00 00 00 00	r1 &= r2
    3932	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    3934	2f 21 00 00 00 00 00 00	r1 *= r2
    3935	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    3936	87 01 00 00 00 00 00 00	r1 = -r1
    3937	27 01 00 00 30 00 00 00	r1 *= 0x30
    3938	bf 98 00 00 00 00 00 00	r8 = r9
    3939	0f 18 00 00 00 00 00 00	r8 += r1
    3940	79 82 d8 ff 00 00 00 00	r2 = *(u64 *)(r8 - 0x28)
    3941	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB17_8>
    3942	79 81 d0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x30)
    3943	b7 03 00 00 01 00 00 00	r3 = 0x1
    3944	85 10 00 00 46 ff ff ff	call -0xba ; <__rust_dealloc>

0000000000007b48 <LBB17_8>
    3945	79 82 f0 ff 00 00 00 00	r2 = *(u64 *)(r8 - 0x10)
    3946	15 02 b5 ff 00 00 00 00	if r2 == 0x0 goto -0x4b <LBB17_10>
    3947	79 81 e8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x18)
    3948	b7 03 00 00 01 00 00 00	r3 = 0x1
    3949	85 10 00 00 41 ff ff ff	call -0xbf ; <__rust_dealloc>
    3950	05 00 b1 ff 00 00 00 00	goto -0x4f <LBB17_10>

0000000000007b78 <LBB17_13>
    3951	95 00 00 00 00 00 00 00	exit

0000000000007b80 <core::ptr::drop_in_place<&std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    3952	95 00 00 00 00 00 00 00	exit

0000000000007b88 <core::ptr::drop_in_place<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError>>
    3953	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3954	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB19_2>
    3955	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3956	b7 03 00 00 01 00 00 00	r3 = 0x1
    3957	85 10 00 00 39 ff ff ff	call -0xc7 ; <__rust_dealloc>

0000000000007bb0 <LBB19_2>
    3958	95 00 00 00 00 00 00 00	exit

0000000000007bb8 <core::ptr::drop_in_place<alloc::string::String>>
    3959	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3960	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB21_2>
    3961	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3962	b7 03 00 00 01 00 00 00	r3 = 0x1
    3963	85 10 00 00 33 ff ff ff	call -0xcd ; <__rust_dealloc>

0000000000007be0 <LBB21_2>
    3964	95 00 00 00 00 00 00 00	exit

0000000000007be8 <core::ptr::drop_in_place<std::io::error::Error>>
    3965	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    3966	bf 61 00 00 00 00 00 00	r1 = r6
    3967	57 01 00 00 03 00 00 00	r1 &= 0x3
    3968	bf 12 00 00 00 00 00 00	r2 = r1
    3969	07 02 00 00 fe ff ff ff	r2 += -0x2
    3970	b7 03 00 00 02 00 00 00	r3 = 0x2
    3971	2d 23 10 00 00 00 00 00	if r3 > r2 goto +0x10 <LBB22_5>
    3972	15 01 0f 00 00 00 00 00	if r1 == 0x0 goto +0xf <LBB22_5>
    3973	79 67 ff ff 00 00 00 00	r7 = *(u64 *)(r6 - 0x1)
    3974	79 68 07 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x7)
    3975	79 82 00 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x0)
    3976	bf 71 00 00 00 00 00 00	r1 = r7
    3977	8d 00 00 00 02 00 00 00	callx r2
    3978	07 06 00 00 ff ff ff ff	r6 += -0x1
    3979	79 82 08 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x8)
    3980	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB22_4>
    3981	79 83 10 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x10)
    3982	bf 71 00 00 00 00 00 00	r1 = r7
    3983	85 10 00 00 1f ff ff ff	call -0xe1 ; <__rust_dealloc>

0000000000007c80 <LBB22_4>
    3984	bf 61 00 00 00 00 00 00	r1 = r6
    3985	b7 02 00 00 18 00 00 00	r2 = 0x18
    3986	b7 03 00 00 08 00 00 00	r3 = 0x8
    3987	85 10 00 00 1b ff ff ff	call -0xe5 ; <__rust_dealloc>

0000000000007ca0 <LBB22_5>
    3988	95 00 00 00 00 00 00 00	exit

0000000000007ca8 <core::hash::BuildHasher::hash_one>
    3989	18 04 00 00 6d 6f 64 6e 00 00 00 00 61 72 6f 64	r4 = 0x646f72616e646f6d ll
    3991	bf 25 00 00 00 00 00 00	r5 = r2
    3992	af 45 00 00 00 00 00 00	r5 ^= r4
    3993	18 04 00 00 73 65 74 79 00 00 00 00 62 64 65 74	r4 = 0x7465646279746573 ll
    3995	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    3996	af 42 00 00 00 00 00 00	r2 ^= r4
    3997	b7 04 00 00 00 00 00 00	r4 = 0x0
    3998	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    3999	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    4000	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    4001	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    4002	7b 5a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r5
    4003	18 02 00 00 61 72 65 6e 00 00 00 00 65 67 79 6c	r2 = 0x6c7967656e657261 ll
    4005	bf 14 00 00 00 00 00 00	r4 = r1
    4006	af 24 00 00 00 00 00 00	r4 ^= r2
    4007	7b 4a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r4
    4008	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4009	18 02 00 00 75 65 73 70 00 00 00 00 65 6d 6f 73	r2 = 0x736f6d6570736575 ll
    4011	af 21 00 00 00 00 00 00	r1 ^= r2
    4012	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    4013	79 34 10 00 00 00 00 00	r4 = *(u64 *)(r3 + 0x10)
    4014	79 32 00 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x0)
    4015	bf a6 00 00 00 00 00 00	r6 = r10
    4016	07 06 00 00 b0 ff ff ff	r6 += -0x50
    4017	bf 61 00 00 00 00 00 00	r1 = r6
    4018	bf 43 00 00 00 00 00 00	r3 = r4
    4019	85 10 00 00 95 03 00 00	call 0x395 ; <<core::hash::sip::Hasher<S> as core::hash::Hasher>::write>
    4020	b7 01 00 00 ff 00 00 00	r1 = 0xff
    4021	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
    4022	bf a2 00 00 00 00 00 00	r2 = r10
    4023	07 02 00 00 ff ff ff ff	r2 += -0x1
    4024	bf 61 00 00 00 00 00 00	r1 = r6
    4025	b7 03 00 00 01 00 00 00	r3 = 0x1
    4026	85 10 00 00 8e 03 00 00	call 0x38e ; <<core::hash::sip::Hasher<S> as core::hash::Hasher>::write>
    4027	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    4028	79 a5 c0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x40)
    4029	bf 53 00 00 00 00 00 00	r3 = r5
    4030	0f 13 00 00 00 00 00 00	r3 += r1
    4031	bf 51 00 00 00 00 00 00	r1 = r5
    4032	77 01 00 00 33 00 00 00	r1 >>= 0x33
    4033	67 05 00 00 0d 00 00 00	r5 <<= 0xd
    4034	4f 15 00 00 00 00 00 00	r5 |= r1
    4035	af 35 00 00 00 00 00 00	r5 ^= r3
    4036	bf 51 00 00 00 00 00 00	r1 = r5
    4037	77 01 00 00 2f 00 00 00	r1 >>= 0x2f
    4038	bf 50 00 00 00 00 00 00	r0 = r5
    4039	67 00 00 00 11 00 00 00	r0 <<= 0x11
    4040	4f 10 00 00 00 00 00 00	r0 |= r1
    4041	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    4042	67 04 00 00 38 00 00 00	r4 <<= 0x38
    4043	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4044	4f 14 00 00 00 00 00 00	r4 |= r1
    4045	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    4046	bf 41 00 00 00 00 00 00	r1 = r4
    4047	af 21 00 00 00 00 00 00	r1 ^= r2
    4048	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4049	bf 17 00 00 00 00 00 00	r7 = r1
    4050	0f 27 00 00 00 00 00 00	r7 += r2
    4051	bf 72 00 00 00 00 00 00	r2 = r7
    4052	0f 52 00 00 00 00 00 00	r2 += r5
    4053	bf 26 00 00 00 00 00 00	r6 = r2
    4054	af 06 00 00 00 00 00 00	r6 ^= r0
    4055	bf 65 00 00 00 00 00 00	r5 = r6
    4056	77 05 00 00 33 00 00 00	r5 >>= 0x33
    4057	bf 60 00 00 00 00 00 00	r0 = r6
    4058	67 00 00 00 0d 00 00 00	r0 <<= 0xd
    4059	4f 50 00 00 00 00 00 00	r0 |= r5
    4060	bf 35 00 00 00 00 00 00	r5 = r3
    4061	77 05 00 00 20 00 00 00	r5 >>= 0x20
    4062	67 03 00 00 20 00 00 00	r3 <<= 0x20
    4063	4f 53 00 00 00 00 00 00	r3 |= r5
    4064	bf 15 00 00 00 00 00 00	r5 = r1
    4065	77 05 00 00 30 00 00 00	r5 >>= 0x30
    4066	67 01 00 00 10 00 00 00	r1 <<= 0x10
    4067	4f 51 00 00 00 00 00 00	r1 |= r5
    4068	af 71 00 00 00 00 00 00	r1 ^= r7
    4069	bf 17 00 00 00 00 00 00	r7 = r1
    4070	0f 37 00 00 00 00 00 00	r7 += r3
    4071	bf 75 00 00 00 00 00 00	r5 = r7
    4072	af 45 00 00 00 00 00 00	r5 ^= r4
    4073	0f 65 00 00 00 00 00 00	r5 += r6
    4074	bf 13 00 00 00 00 00 00	r3 = r1
    4075	77 03 00 00 2b 00 00 00	r3 >>= 0x2b
    4076	67 01 00 00 15 00 00 00	r1 <<= 0x15
    4077	4f 31 00 00 00 00 00 00	r1 |= r3
    4078	bf 54 00 00 00 00 00 00	r4 = r5
    4079	af 04 00 00 00 00 00 00	r4 ^= r0
    4080	bf 43 00 00 00 00 00 00	r3 = r4
    4081	77 03 00 00 2f 00 00 00	r3 >>= 0x2f
    4082	bf 46 00 00 00 00 00 00	r6 = r4
    4083	67 06 00 00 11 00 00 00	r6 <<= 0x11
    4084	4f 36 00 00 00 00 00 00	r6 |= r3
    4085	af 71 00 00 00 00 00 00	r1 ^= r7
    4086	bf 23 00 00 00 00 00 00	r3 = r2
    4087	77 03 00 00 20 00 00 00	r3 >>= 0x20
    4088	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4089	4f 32 00 00 00 00 00 00	r2 |= r3
    4090	a7 02 00 00 ff 00 00 00	r2 ^= 0xff
    4091	bf 10 00 00 00 00 00 00	r0 = r1
    4092	0f 20 00 00 00 00 00 00	r0 += r2
    4093	0f 04 00 00 00 00 00 00	r4 += r0
    4094	bf 43 00 00 00 00 00 00	r3 = r4
    4095	af 63 00 00 00 00 00 00	r3 ^= r6
    4096	bf 36 00 00 00 00 00 00	r6 = r3
    4097	77 06 00 00 33 00 00 00	r6 >>= 0x33
    4098	bf 32 00 00 00 00 00 00	r2 = r3
    4099	67 02 00 00 0d 00 00 00	r2 <<= 0xd
    4100	4f 62 00 00 00 00 00 00	r2 |= r6
    4101	bf 56 00 00 00 00 00 00	r6 = r5
    4102	77 06 00 00 20 00 00 00	r6 >>= 0x20
    4103	67 05 00 00 20 00 00 00	r5 <<= 0x20
    4104	4f 65 00 00 00 00 00 00	r5 |= r6
    4105	bf 16 00 00 00 00 00 00	r6 = r1
    4106	77 06 00 00 30 00 00 00	r6 >>= 0x30
    4107	67 01 00 00 10 00 00 00	r1 <<= 0x10
    4108	4f 61 00 00 00 00 00 00	r1 |= r6
    4109	af 01 00 00 00 00 00 00	r1 ^= r0
    4110	bf 10 00 00 00 00 00 00	r0 = r1
    4111	0f 50 00 00 00 00 00 00	r0 += r5
    4112	0f 03 00 00 00 00 00 00	r3 += r0
    4113	af 32 00 00 00 00 00 00	r2 ^= r3
    4114	bf 26 00 00 00 00 00 00	r6 = r2
    4115	77 06 00 00 2f 00 00 00	r6 >>= 0x2f
    4116	bf 25 00 00 00 00 00 00	r5 = r2
    4117	67 05 00 00 11 00 00 00	r5 <<= 0x11
    4118	4f 65 00 00 00 00 00 00	r5 |= r6
    4119	bf 16 00 00 00 00 00 00	r6 = r1
    4120	77 06 00 00 2b 00 00 00	r6 >>= 0x2b
    4121	67 01 00 00 15 00 00 00	r1 <<= 0x15
    4122	4f 61 00 00 00 00 00 00	r1 |= r6
    4123	af 01 00 00 00 00 00 00	r1 ^= r0
    4124	bf 40 00 00 00 00 00 00	r0 = r4
    4125	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4126	67 04 00 00 20 00 00 00	r4 <<= 0x20
    4127	4f 04 00 00 00 00 00 00	r4 |= r0
    4128	bf 10 00 00 00 00 00 00	r0 = r1
    4129	0f 40 00 00 00 00 00 00	r0 += r4
    4130	0f 02 00 00 00 00 00 00	r2 += r0
    4131	af 25 00 00 00 00 00 00	r5 ^= r2
    4132	bf 56 00 00 00 00 00 00	r6 = r5
    4133	77 06 00 00 33 00 00 00	r6 >>= 0x33
    4134	bf 54 00 00 00 00 00 00	r4 = r5
    4135	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    4136	4f 64 00 00 00 00 00 00	r4 |= r6
    4137	bf 36 00 00 00 00 00 00	r6 = r3
    4138	77 06 00 00 20 00 00 00	r6 >>= 0x20
    4139	67 03 00 00 20 00 00 00	r3 <<= 0x20
    4140	4f 63 00 00 00 00 00 00	r3 |= r6
    4141	bf 16 00 00 00 00 00 00	r6 = r1
    4142	77 06 00 00 30 00 00 00	r6 >>= 0x30
    4143	67 01 00 00 10 00 00 00	r1 <<= 0x10
    4144	4f 61 00 00 00 00 00 00	r1 |= r6
    4145	af 01 00 00 00 00 00 00	r1 ^= r0
    4146	bf 10 00 00 00 00 00 00	r0 = r1
    4147	0f 30 00 00 00 00 00 00	r0 += r3
    4148	0f 05 00 00 00 00 00 00	r5 += r0
    4149	af 54 00 00 00 00 00 00	r4 ^= r5
    4150	bf 13 00 00 00 00 00 00	r3 = r1
    4151	77 03 00 00 2b 00 00 00	r3 >>= 0x2b
    4152	67 01 00 00 15 00 00 00	r1 <<= 0x15
    4153	4f 31 00 00 00 00 00 00	r1 |= r3
    4154	af 01 00 00 00 00 00 00	r1 ^= r0
    4155	bf 45 00 00 00 00 00 00	r5 = r4
    4156	77 05 00 00 2f 00 00 00	r5 >>= 0x2f
    4157	bf 43 00 00 00 00 00 00	r3 = r4
    4158	67 03 00 00 11 00 00 00	r3 <<= 0x11
    4159	4f 53 00 00 00 00 00 00	r3 |= r5
    4160	bf 15 00 00 00 00 00 00	r5 = r1
    4161	77 05 00 00 30 00 00 00	r5 >>= 0x30
    4162	bf 10 00 00 00 00 00 00	r0 = r1
    4163	67 00 00 00 10 00 00 00	r0 <<= 0x10
    4164	4f 50 00 00 00 00 00 00	r0 |= r5
    4165	bf 25 00 00 00 00 00 00	r5 = r2
    4166	77 05 00 00 20 00 00 00	r5 >>= 0x20
    4167	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4168	4f 52 00 00 00 00 00 00	r2 |= r5
    4169	0f 21 00 00 00 00 00 00	r1 += r2
    4170	af 10 00 00 00 00 00 00	r0 ^= r1
    4171	bf 02 00 00 00 00 00 00	r2 = r0
    4172	77 02 00 00 2b 00 00 00	r2 >>= 0x2b
    4173	67 00 00 00 15 00 00 00	r0 <<= 0x15
    4174	4f 20 00 00 00 00 00 00	r0 |= r2
    4175	af 30 00 00 00 00 00 00	r0 ^= r3
    4176	0f 14 00 00 00 00 00 00	r4 += r1
    4177	bf 41 00 00 00 00 00 00	r1 = r4
    4178	77 01 00 00 20 00 00 00	r1 >>= 0x20
    4179	bf 42 00 00 00 00 00 00	r2 = r4
    4180	67 02 00 00 20 00 00 00	r2 <<= 0x20
    4181	4f 12 00 00 00 00 00 00	r2 |= r1
    4182	af 20 00 00 00 00 00 00	r0 ^= r2
    4183	af 40 00 00 00 00 00 00	r0 ^= r4
    4184	95 00 00 00 00 00 00 00	exit

00000000000082c8 <core::error::Error::cause>
    4185	b7 02 00 00 00 00 00 00	r2 = 0x0
    4186	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    4187	95 00 00 00 00 00 00 00	exit

00000000000082e0 <core::error::Error::provide>
    4188	95 00 00 00 00 00 00 00	exit

00000000000082e8 <core::error::Error::type_id>
    4189	18 02 00 00 b4 06 af 33 00 00 00 00 02 af d4 57	r2 = 0x57d4af0233af06b4 ll
    4191	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    4192	18 02 00 00 eb eb 4a 38 00 00 00 00 ff c6 fa 26	r2 = 0x26fac6ff384aebeb ll
    4194	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    4195	95 00 00 00 00 00 00 00	exit

0000000000008320 <<&mut W as core::fmt::Write>::write_char>
    4196	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    4197	85 10 00 00 25 00 00 00	call 0x25 ; <<alloc::string::String as core::fmt::Write>::write_char>
    4198	b7 00 00 00 00 00 00 00	r0 = 0x0
    4199	95 00 00 00 00 00 00 00	exit

0000000000008340 <<&mut W as core::fmt::Write>::write_fmt>
    4200	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    4201	bf a6 00 00 00 00 00 00	r6 = r10
    4202	07 06 00 00 d0 ff ff ff	r6 += -0x30
    4203	bf 61 00 00 00 00 00 00	r1 = r6
    4204	b7 03 00 00 30 00 00 00	r3 = 0x30
    4205	85 10 00 00 ea 1f 00 00	call 0x1fea ; <memcpy>
    4206	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    4207	bf a1 00 00 00 00 00 00	r1 = r10
    4208	07 01 00 00 c8 ff ff ff	r1 += -0x38
    4209	18 02 00 00 18 a0 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a018 ll
    4211	bf 63 00 00 00 00 00 00	r3 = r6
    4212	85 10 00 00 64 16 00 00	call 0x1664 ; <core::fmt::write>
    4213	95 00 00 00 00 00 00 00	exit

00000000000083b0 <<&mut W as core::fmt::Write>::write_str>
    4214	bf 36 00 00 00 00 00 00	r6 = r3
    4215	bf 28 00 00 00 00 00 00	r8 = r2
    4216	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    4217	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    4218	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    4219	1f 91 00 00 00 00 00 00	r1 -= r9
    4220	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB39_2>
    4221	bf 71 00 00 00 00 00 00	r1 = r7
    4222	bf 92 00 00 00 00 00 00	r2 = r9
    4223	bf 63 00 00 00 00 00 00	r3 = r6
    4224	85 10 00 00 39 01 00 00	call 0x139 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4225	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000008410 <LBB39_2>
    4226	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    4227	0f 91 00 00 00 00 00 00	r1 += r9
    4228	bf 82 00 00 00 00 00 00	r2 = r8
    4229	bf 63 00 00 00 00 00 00	r3 = r6
    4230	85 10 00 00 d1 1f 00 00	call 0x1fd1 ; <memcpy>
    4231	0f 69 00 00 00 00 00 00	r9 += r6
    4232	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    4233	b7 00 00 00 00 00 00 00	r0 = 0x0
    4234	95 00 00 00 00 00 00 00	exit

0000000000008458 <<alloc::string::String as core::fmt::Write>::write_char>
    4235	bf 27 00 00 00 00 00 00	r7 = r2
    4236	bf 16 00 00 00 00 00 00	r6 = r1
    4237	bf 71 00 00 00 00 00 00	r1 = r7
    4238	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4239	77 01 00 00 20 00 00 00	r1 >>= 0x20
    4240	b7 02 00 00 80 00 00 00	r2 = 0x80
    4241	2d 12 18 00 00 00 00 00	if r2 > r1 goto +0x18 <LBB41_9>
    4242	b7 02 00 00 00 00 00 00	r2 = 0x0
    4243	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    4244	b7 02 00 00 00 08 00 00	r2 = 0x800
    4245	2d 12 20 00 00 00 00 00	if r2 > r1 goto +0x20 <LBB41_3>
    4246	bf 71 00 00 00 00 00 00	r1 = r7
    4247	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4248	77 01 00 00 20 00 00 00	r1 >>= 0x20
    4249	b7 02 00 00 00 00 01 00	r2 = 0x10000
    4250	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB41_4>
    4251	05 00 23 00 00 00 00 00	goto +0x23 <LBB41_5>

00000000000084e0 <LBB41_4>
    4252	bf 71 00 00 00 00 00 00	r1 = r7
    4253	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    4254	47 01 00 00 80 00 00 00	r1 |= 0x80
    4255	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
    4256	bf 71 00 00 00 00 00 00	r1 = r7
    4257	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    4258	47 01 00 00 e0 00 00 00	r1 |= 0xe0
    4259	73 1a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r1
    4260	77 07 00 00 06 00 00 00	r7 >>= 0x6
    4261	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    4262	47 07 00 00 80 00 00 00	r7 |= 0x80
    4263	73 7a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r7
    4264	b7 07 00 00 03 00 00 00	r7 = 0x3
    4265	05 00 28 00 00 00 00 00	goto +0x28 <LBB41_6>

0000000000008550 <LBB41_9>
    4266	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    4267	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4268	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB41_11>
    4269	bf 61 00 00 00 00 00 00	r1 = r6
    4270	85 10 00 00 a8 00 00 00	call 0xa8 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    4271	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

0000000000008580 <LBB41_11>
    4272	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4273	0f 21 00 00 00 00 00 00	r1 += r2
    4274	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4275	07 02 00 00 01 00 00 00	r2 += 0x1
    4276	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    4277	05 00 2d 00 00 00 00 00	goto +0x2d <LBB41_12>

00000000000085b0 <LBB41_3>
    4278	bf 71 00 00 00 00 00 00	r1 = r7
    4279	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    4280	47 01 00 00 80 00 00 00	r1 |= 0x80
    4281	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    4282	77 07 00 00 06 00 00 00	r7 >>= 0x6
    4283	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    4284	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    4285	b7 07 00 00 02 00 00 00	r7 = 0x2
    4286	05 00 13 00 00 00 00 00	goto +0x13 <LBB41_6>

00000000000085f8 <LBB41_5>
    4287	bf 71 00 00 00 00 00 00	r1 = r7
    4288	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    4289	47 01 00 00 80 00 00 00	r1 |= 0x80
    4290	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
    4291	bf 71 00 00 00 00 00 00	r1 = r7
    4292	77 01 00 00 06 00 00 00	r1 >>= 0x6
    4293	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    4294	47 01 00 00 80 00 00 00	r1 |= 0x80
    4295	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
    4296	bf 71 00 00 00 00 00 00	r1 = r7
    4297	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    4298	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    4299	47 01 00 00 80 00 00 00	r1 |= 0x80
    4300	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    4301	77 07 00 00 12 00 00 00	r7 >>= 0x12
    4302	57 07 00 00 07 00 00 00	r7 &= 0x7
    4303	47 07 00 00 f0 00 00 00	r7 |= 0xf0
    4304	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    4305	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000008690 <LBB41_6>
    4306	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    4307	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4308	1f 81 00 00 00 00 00 00	r1 -= r8
    4309	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB41_8>
    4310	bf 61 00 00 00 00 00 00	r1 = r6
    4311	bf 82 00 00 00 00 00 00	r2 = r8
    4312	bf 73 00 00 00 00 00 00	r3 = r7
    4313	85 10 00 00 e0 00 00 00	call 0xe0 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4314	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

00000000000086d8 <LBB41_8>
    4315	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4316	0f 81 00 00 00 00 00 00	r1 += r8
    4317	bf a2 00 00 00 00 00 00	r2 = r10
    4318	07 02 00 00 fc ff ff ff	r2 += -0x4
    4319	bf 73 00 00 00 00 00 00	r3 = r7
    4320	85 10 00 00 77 1f 00 00	call 0x1f77 ; <memcpy>
    4321	0f 78 00 00 00 00 00 00	r8 += r7
    4322	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000008718 <LBB41_12>
    4323	b7 00 00 00 00 00 00 00	r0 = 0x0
    4324	95 00 00 00 00 00 00 00	exit

0000000000008728 <<alloc::string::String as core::fmt::Write>::write_str>
    4325	bf 36 00 00 00 00 00 00	r6 = r3
    4326	bf 28 00 00 00 00 00 00	r8 = r2
    4327	bf 17 00 00 00 00 00 00	r7 = r1
    4328	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    4329	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    4330	1f 91 00 00 00 00 00 00	r1 -= r9
    4331	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB42_2>
    4332	bf 71 00 00 00 00 00 00	r1 = r7
    4333	bf 92 00 00 00 00 00 00	r2 = r9
    4334	bf 63 00 00 00 00 00 00	r3 = r6
    4335	85 10 00 00 ca 00 00 00	call 0xca ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4336	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000008788 <LBB42_2>
    4337	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    4338	0f 91 00 00 00 00 00 00	r1 += r9
    4339	bf 82 00 00 00 00 00 00	r2 = r8
    4340	bf 63 00 00 00 00 00 00	r3 = r6
    4341	85 10 00 00 62 1f 00 00	call 0x1f62 ; <memcpy>
    4342	0f 69 00 00 00 00 00 00	r9 += r6
    4343	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    4344	b7 00 00 00 00 00 00 00	r0 = 0x0
    4345	95 00 00 00 00 00 00 00	exit

00000000000087d0 <alloc::raw_vec::finish_grow>
    4346	bf 37 00 00 00 00 00 00	r7 = r3
    4347	bf 28 00 00 00 00 00 00	r8 = r2
    4348	bf 16 00 00 00 00 00 00	r6 = r1
    4349	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB43_2>
    4350	79 41 08 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x8)
    4351	15 01 12 00 00 00 00 00	if r1 == 0x0 goto +0x12 <LBB43_7>
    4352	79 42 10 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x10)
    4353	55 02 0a 00 00 00 00 00	if r2 != 0x0 goto +0xa <LBB43_6>
    4354	15 07 19 00 00 00 00 00	if r7 == 0x0 goto +0x19 <LBB43_9>
    4355	bf 71 00 00 00 00 00 00	r1 = r7
    4356	bf 82 00 00 00 00 00 00	r2 = r8
    4357	85 10 00 00 8f fd ff ff	call -0x271 ; <__rust_alloc>
    4358	15 00 11 00 00 00 00 00	if r0 == 0x0 goto +0x11 <LBB43_11>
    4359	05 00 16 00 00 00 00 00	goto +0x16 <LBB43_10>

0000000000008840 <LBB43_2>
    4360	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4361	b7 01 00 00 00 00 00 00	r1 = 0x0
    4362	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    4363	05 00 0e 00 00 00 00 00	goto +0xe <LBB43_12>

0000000000008860 <LBB43_6>
    4364	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    4365	bf 83 00 00 00 00 00 00	r3 = r8
    4366	bf 74 00 00 00 00 00 00	r4 = r7
    4367	85 10 00 00 a0 fd ff ff	call -0x260 ; <__rust_realloc>
    4368	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB43_11>
    4369	05 00 0c 00 00 00 00 00	goto +0xc <LBB43_10>

0000000000008890 <LBB43_7>
    4370	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB43_9>
    4371	bf 71 00 00 00 00 00 00	r1 = r7
    4372	bf 82 00 00 00 00 00 00	r2 = r8
    4373	85 10 00 00 7f fd ff ff	call -0x281 ; <__rust_alloc>
    4374	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB43_11>
    4375	05 00 06 00 00 00 00 00	goto +0x6 <LBB43_10>

00000000000088c0 <LBB43_11>
    4376	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4377	7b 86 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r8

00000000000088d0 <LBB43_12>
    4378	b7 01 00 00 01 00 00 00	r1 = 0x1
    4379	05 00 05 00 00 00 00 00	goto +0x5 <LBB43_13>

00000000000088e0 <LBB43_9>
    4380	b7 07 00 00 00 00 00 00	r7 = 0x0
    4381	bf 80 00 00 00 00 00 00	r0 = r8

00000000000088f0 <LBB43_10>
    4382	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4383	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    4384	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000008908 <LBB43_13>
    4385	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    4386	95 00 00 00 00 00 00 00	exit

0000000000008918 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    4387	bf 16 00 00 00 00 00 00	r6 = r1
    4388	07 02 00 00 01 00 00 00	r2 += 0x1
    4389	b7 01 00 00 01 00 00 00	r1 = 0x1
    4390	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB44_2>
    4391	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000008940 <LBB44_2>
    4392	57 01 00 00 01 00 00 00	r1 &= 0x1
    4393	55 01 28 00 00 00 00 00	if r1 != 0x0 goto +0x28 <LBB44_17>
    4394	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4395	bf 17 00 00 00 00 00 00	r7 = r1
    4396	67 07 00 00 01 00 00 00	r7 <<= 0x1
    4397	2d 27 01 00 00 00 00 00	if r7 > r2 goto +0x1 <LBB44_5>
    4398	bf 27 00 00 00 00 00 00	r7 = r2

0000000000008978 <LBB44_5>
    4399	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB44_7>
    4400	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000008988 <LBB44_7>
    4401	b7 02 00 00 01 00 00 00	r2 = 0x1
    4402	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 04	r3 = 0x400000000000000 ll
    4404	2d 73 01 00 00 00 00 00	if r3 > r7 goto +0x1 <LBB44_9>
    4405	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000089b0 <LBB44_9>
    4406	bf 73 00 00 00 00 00 00	r3 = r7
    4407	67 03 00 00 05 00 00 00	r3 <<= 0x5
    4408	67 02 00 00 03 00 00 00	r2 <<= 0x3
    4409	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB44_11>
    4410	79 64 00 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x0)
    4411	67 01 00 00 05 00 00 00	r1 <<= 0x5
    4412	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4413	b7 01 00 00 08 00 00 00	r1 = 0x8
    4414	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4415	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    4416	05 00 02 00 00 00 00 00	goto +0x2 <LBB44_12>

0000000000008a08 <LBB44_11>
    4417	b7 01 00 00 00 00 00 00	r1 = 0x0
    4418	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000008a18 <LBB44_12>
    4419	bf a1 00 00 00 00 00 00	r1 = r10
    4420	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4421	bf a4 00 00 00 00 00 00	r4 = r10
    4422	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4423	85 10 00 00 b2 ff ff ff	call -0x4e ; <alloc::raw_vec::finish_grow>
    4424	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4425	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    4426	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB44_15>
    4427	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    4428	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000008a68 <LBB44_14>
    4429	95 00 00 00 00 00 00 00	exit

0000000000008a70 <LBB44_15>
    4430	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
    4432	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB44_14>
    4433	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB44_18>

0000000000008a90 <LBB44_17>
    4434	85 10 00 00 43 10 00 00	call 0x1043 ; <alloc::raw_vec::capacity_overflow>
    4435	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008aa0 <LBB44_18>
    4436	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    4437	85 10 00 00 51 10 00 00	call 0x1051 ; <alloc::alloc::handle_alloc_error>
    4438	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008ab8 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    4439	bf 16 00 00 00 00 00 00	r6 = r1
    4440	07 02 00 00 01 00 00 00	r2 += 0x1
    4441	b7 01 00 00 01 00 00 00	r1 = 0x1
    4442	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB45_2>
    4443	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000008ae0 <LBB45_2>
    4444	57 01 00 00 01 00 00 00	r1 &= 0x1
    4445	55 01 23 00 00 00 00 00	if r1 != 0x0 goto +0x23 <LBB45_15>
    4446	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4447	bf 17 00 00 00 00 00 00	r7 = r1
    4448	67 07 00 00 01 00 00 00	r7 <<= 0x1
    4449	2d 27 01 00 00 00 00 00	if r7 > r2 goto +0x1 <LBB45_5>
    4450	bf 27 00 00 00 00 00 00	r7 = r2

0000000000008b18 <LBB45_5>
    4451	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB45_7>
    4452	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000008b28 <LBB45_7>
    4453	bf 72 00 00 00 00 00 00	r2 = r7
    4454	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    4455	77 02 00 00 3f 00 00 00	r2 >>= 0x3f
    4456	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB45_9>
    4457	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    4458	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4459	b7 01 00 00 01 00 00 00	r1 = 0x1
    4460	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4461	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    4462	05 00 02 00 00 00 00 00	goto +0x2 <LBB45_10>

0000000000008b78 <LBB45_9>
    4463	b7 01 00 00 00 00 00 00	r1 = 0x0
    4464	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000008b88 <LBB45_10>
    4465	bf a1 00 00 00 00 00 00	r1 = r10
    4466	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4467	bf a4 00 00 00 00 00 00	r4 = r10
    4468	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4469	bf 73 00 00 00 00 00 00	r3 = r7
    4470	85 10 00 00 83 ff ff ff	call -0x7d ; <alloc::raw_vec::finish_grow>
    4471	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4472	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    4473	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB45_13>
    4474	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    4475	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000008be0 <LBB45_12>
    4476	95 00 00 00 00 00 00 00	exit

0000000000008be8 <LBB45_13>
    4477	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
    4479	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB45_12>
    4480	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB45_16>

0000000000008c08 <LBB45_15>
    4481	85 10 00 00 14 10 00 00	call 0x1014 ; <alloc::raw_vec::capacity_overflow>
    4482	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008c18 <LBB45_16>
    4483	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    4484	85 10 00 00 22 10 00 00	call 0x1022 ; <alloc::alloc::handle_alloc_error>
    4485	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008c30 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    4486	bf 16 00 00 00 00 00 00	r6 = r1
    4487	07 02 00 00 01 00 00 00	r2 += 0x1
    4488	b7 01 00 00 01 00 00 00	r1 = 0x1
    4489	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB46_2>
    4490	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000008c58 <LBB46_2>
    4491	57 01 00 00 01 00 00 00	r1 &= 0x1
    4492	55 01 28 00 00 00 00 00	if r1 != 0x0 goto +0x28 <LBB46_17>
    4493	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4494	bf 17 00 00 00 00 00 00	r7 = r1
    4495	67 07 00 00 01 00 00 00	r7 <<= 0x1
    4496	2d 27 01 00 00 00 00 00	if r7 > r2 goto +0x1 <LBB46_5>
    4497	bf 27 00 00 00 00 00 00	r7 = r2

0000000000008c90 <LBB46_5>
    4498	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB46_7>
    4499	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000008ca0 <LBB46_7>
    4500	b7 02 00 00 01 00 00 00	r2 = 0x1
    4501	18 03 00 00 ab aa aa aa 00 00 00 00 aa aa aa 02	r3 = 0x2aaaaaaaaaaaaab ll
    4503	2d 73 01 00 00 00 00 00	if r3 > r7 goto +0x1 <LBB46_9>
    4504	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000008cc8 <LBB46_9>
    4505	bf 73 00 00 00 00 00 00	r3 = r7
    4506	27 03 00 00 30 00 00 00	r3 *= 0x30
    4507	67 02 00 00 03 00 00 00	r2 <<= 0x3
    4508	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB46_11>
    4509	79 64 00 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x0)
    4510	27 01 00 00 30 00 00 00	r1 *= 0x30
    4511	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4512	b7 01 00 00 08 00 00 00	r1 = 0x8
    4513	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4514	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    4515	05 00 02 00 00 00 00 00	goto +0x2 <LBB46_12>

0000000000008d20 <LBB46_11>
    4516	b7 01 00 00 00 00 00 00	r1 = 0x0
    4517	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000008d30 <LBB46_12>
    4518	bf a1 00 00 00 00 00 00	r1 = r10
    4519	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4520	bf a4 00 00 00 00 00 00	r4 = r10
    4521	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4522	85 10 00 00 4f ff ff ff	call -0xb1 ; <alloc::raw_vec::finish_grow>
    4523	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4524	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    4525	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB46_15>
    4526	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    4527	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000008d80 <LBB46_14>
    4528	95 00 00 00 00 00 00 00	exit

0000000000008d88 <LBB46_15>
    4529	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
    4531	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB46_14>
    4532	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB46_18>

0000000000008da8 <LBB46_17>
    4533	85 10 00 00 e0 0f 00 00	call 0xfe0 ; <alloc::raw_vec::capacity_overflow>
    4534	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008db8 <LBB46_18>
    4535	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    4536	85 10 00 00 ee 0f 00 00	call 0xfee ; <alloc::alloc::handle_alloc_error>
    4537	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008dd0 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4538	bf 16 00 00 00 00 00 00	r6 = r1
    4539	bf 24 00 00 00 00 00 00	r4 = r2
    4540	0f 34 00 00 00 00 00 00	r4 += r3
    4541	b7 01 00 00 01 00 00 00	r1 = 0x1
    4542	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB47_2>
    4543	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000008e00 <LBB47_2>
    4544	57 01 00 00 01 00 00 00	r1 &= 0x1
    4545	55 01 23 00 00 00 00 00	if r1 != 0x0 goto +0x23 <LBB47_15>
    4546	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4547	bf 17 00 00 00 00 00 00	r7 = r1
    4548	67 07 00 00 01 00 00 00	r7 <<= 0x1
    4549	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB47_5>
    4550	bf 47 00 00 00 00 00 00	r7 = r4

0000000000008e38 <LBB47_5>
    4551	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB47_7>
    4552	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000008e48 <LBB47_7>
    4553	bf 72 00 00 00 00 00 00	r2 = r7
    4554	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    4555	77 02 00 00 3f 00 00 00	r2 >>= 0x3f
    4556	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB47_9>
    4557	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    4558	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4559	b7 01 00 00 01 00 00 00	r1 = 0x1
    4560	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4561	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    4562	05 00 02 00 00 00 00 00	goto +0x2 <LBB47_10>

0000000000008e98 <LBB47_9>
    4563	b7 01 00 00 00 00 00 00	r1 = 0x0
    4564	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000008ea8 <LBB47_10>
    4565	bf a1 00 00 00 00 00 00	r1 = r10
    4566	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4567	bf a4 00 00 00 00 00 00	r4 = r10
    4568	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4569	bf 73 00 00 00 00 00 00	r3 = r7
    4570	85 10 00 00 1f ff ff ff	call -0xe1 ; <alloc::raw_vec::finish_grow>
    4571	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4572	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    4573	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB47_13>
    4574	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    4575	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000008f00 <LBB47_12>
    4576	95 00 00 00 00 00 00 00	exit

0000000000008f08 <LBB47_13>
    4577	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
    4579	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB47_12>
    4580	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB47_16>

0000000000008f28 <LBB47_15>
    4581	85 10 00 00 b0 0f 00 00	call 0xfb0 ; <alloc::raw_vec::capacity_overflow>
    4582	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008f38 <LBB47_16>
    4583	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    4584	85 10 00 00 be 0f 00 00	call 0xfbe ; <alloc::alloc::handle_alloc_error>
    4585	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008f50 <borsh::de::hashes::<impl borsh::de::BorshDeserialize for std::collections::hash::map::HashMap<K,V,H>>::deserialize_reader>
    4586	bf 16 00 00 00 00 00 00	r6 = r1
    4587	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    4588	b7 03 00 00 04 00 00 00	r3 = 0x4
    4589	2d 13 15 00 00 00 00 00	if r3 > r1 goto +0x15 <LBB49_43>
    4590	07 01 00 00 fc ff ff ff	r1 += -0x4
    4591	79 23 00 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x0)
    4592	61 39 00 00 00 00 00 00	r9 = *(u32 *)(r3 + 0x0)
    4593	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4594	07 03 00 00 04 00 00 00	r3 += 0x4
    4595	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3
    4596	55 09 12 00 00 00 00 00	if r9 != 0x0 goto +0x12 <LBB49_3>
    4597	18 01 00 00 00 8b 01 00 00 00 00 00 00 00 00 00	r1 = 0x18b00 ll
    4599	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    4600	bf a1 00 00 00 00 00 00	r1 = r10
    4601	07 01 00 00 90 ff ff ff	r1 += -0x70
    4602	b7 02 00 00 00 00 00 00	r2 = 0x0
    4603	b7 03 00 00 28 00 00 00	r3 = 0x28
    4604	85 10 00 00 c0 1e 00 00	call 0x1ec0 ; <memset>

0000000000008fe8 <LBB49_42>
    4605	bf a2 00 00 00 00 00 00	r2 = r10
    4606	07 02 00 00 88 ff ff ff	r2 += -0x78
    4607	bf 61 00 00 00 00 00 00	r1 = r6
    4608	b7 03 00 00 30 00 00 00	r3 = 0x30
    4609	85 10 00 00 56 1e 00 00	call 0x1e56 ; <memcpy>
    4610	05 00 7d 00 00 00 00 00	goto +0x7d <LBB49_45>

0000000000009018 <LBB49_43>
    4611	18 01 00 00 80 9f 01 00 00 00 00 00 00 00 00 00	r1 = 0x19f80 ll
    4613	85 10 00 00 10 0c 00 00	call 0xc10 ; <borsh::de::unexpected_eof_to_unexpected_length_of_input>
    4614	05 00 76 00 00 00 00 00	goto +0x76 <LBB49_44>

0000000000009038 <LBB49_3>
    4615	7b 2a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r2
    4616	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
    4617	b7 01 00 00 55 00 00 00	r1 = 0x55
    4618	bf 97 00 00 00 00 00 00	r7 = r9
    4619	2d 91 01 00 00 00 00 00	if r1 > r9 goto +0x1 <LBB49_5>
    4620	b7 07 00 00 55 00 00 00	r7 = 0x55

0000000000009068 <LBB49_5>
    4621	bf 76 00 00 00 00 00 00	r6 = r7
    4622	27 06 00 00 30 00 00 00	r6 *= 0x30
    4623	bf 61 00 00 00 00 00 00	r1 = r6
    4624	b7 02 00 00 08 00 00 00	r2 = 0x8
    4625	85 10 00 00 83 fc ff ff	call -0x37d ; <__rust_alloc>
    4626	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB49_7>
    4627	b7 01 00 00 08 00 00 00	r1 = 0x8
    4628	bf 62 00 00 00 00 00 00	r2 = r6
    4629	85 10 00 00 91 0f 00 00	call 0xf91 ; <alloc::alloc::handle_alloc_error>
    4630	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000090b8 <LBB49_7>
    4631	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
    4632	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4633	b7 08 00 00 00 00 00 00	r8 = 0x0
    4634	7b 8a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r8
    4635	b7 04 00 00 00 00 00 00	r4 = 0x0
    4636	7b 9a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r9
    4637	05 00 16 00 00 00 00 00	goto +0x16 <LBB49_8>

00000000000090f0 <LBB49_15>
    4638	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    4639	07 04 00 00 01 00 00 00	r4 += 0x1
    4640	bf 83 00 00 00 00 00 00	r3 = r8
    4641	27 03 00 00 30 00 00 00	r3 *= 0x30
    4642	bf 01 00 00 00 00 00 00	r1 = r0
    4643	0f 31 00 00 00 00 00 00	r1 += r3
    4644	7b 21 28 00 00 00 00 00	*(u64 *)(r1 + 0x28) = r2
    4645	7b 51 20 00 00 00 00 00	*(u64 *)(r1 + 0x20) = r5
    4646	7b 71 18 00 00 00 00 00	*(u64 *)(r1 + 0x18) = r7
    4647	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)
    4648	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    4649	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    4650	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    4651	7b 91 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r9
    4652	07 08 00 00 01 00 00 00	r8 += 0x1
    4653	7b 8a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r8
    4654	bf 41 00 00 00 00 00 00	r1 = r4
    4655	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4656	77 01 00 00 20 00 00 00	r1 >>= 0x20
    4657	79 a9 60 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xa0)
    4658	2d 19 01 00 00 00 00 00	if r9 > r1 goto +0x1 <LBB49_8>
    4659	05 00 4d 00 00 00 00 00	goto +0x4d <LBB49_25>

00000000000091a0 <LBB49_8>
    4660	7b 4a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r4
    4661	bf 06 00 00 00 00 00 00	r6 = r0
    4662	bf a1 00 00 00 00 00 00	r1 = r10
    4663	07 01 00 00 88 ff ff ff	r1 += -0x78
    4664	79 a7 68 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x98)
    4665	bf 72 00 00 00 00 00 00	r2 = r7
    4666	85 10 00 00 a6 00 00 00	call 0xa6 ; <<alloc::string::String as borsh::de::BorshDeserialize>::deserialize_reader>
    4667	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    4668	79 a9 88 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x78)
    4669	bf 15 00 00 00 00 00 00	r5 = r1
    4670	15 09 21 00 00 00 00 00	if r9 == 0x0 goto +0x21 <LBB49_12>
    4671	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
    4672	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    4673	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4674	bf a1 00 00 00 00 00 00	r1 = r10
    4675	07 01 00 00 88 ff ff ff	r1 += -0x78
    4676	bf 72 00 00 00 00 00 00	r2 = r7
    4677	85 10 00 00 ce 01 00 00	call 0x1ce ; <<alloc::vec::Vec<T> as borsh::de::BorshDeserialize>::deserialize_reader>
    4678	79 a5 90 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x70)
    4679	79 a7 88 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x78)
    4680	55 07 08 00 00 00 00 00	if r7 != 0x0 goto +0x8 <LBB49_13>
    4681	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    4682	15 02 15 00 00 00 00 00	if r2 == 0x0 goto +0x15 <LBB49_12>
    4683	bf 91 00 00 00 00 00 00	r1 = r9
    4684	bf 56 00 00 00 00 00 00	r6 = r5
    4685	b7 03 00 00 01 00 00 00	r3 = 0x1
    4686	85 10 00 00 60 fc ff ff	call -0x3a0 ; <__rust_dealloc>
    4687	bf 65 00 00 00 00 00 00	r5 = r6
    4688	05 00 0f 00 00 00 00 00	goto +0xf <LBB49_12>

0000000000009288 <LBB49_13>
    4689	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    4690	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4691	bf 60 00 00 00 00 00 00	r0 = r6
    4692	5d 18 c9 ff 00 00 00 00	if r8 != r1 goto -0x37 <LBB49_15>
    4693	bf a1 00 00 00 00 00 00	r1 = r10
    4694	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4695	7b 5a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r5
    4696	bf 26 00 00 00 00 00 00	r6 = r2
    4697	bf 82 00 00 00 00 00 00	r2 = r8
    4698	85 10 00 00 2b ff ff ff	call -0xd5 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    4699	bf 62 00 00 00 00 00 00	r2 = r6
    4700	79 a5 58 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xa8)
    4701	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4702	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)
    4703	05 00 be ff 00 00 00 00	goto -0x42 <LBB49_15>

0000000000009300 <LBB49_12>
    4704	bf 59 00 00 00 00 00 00	r9 = r5
    4705	79 a7 e8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x18)
    4706	15 08 06 00 00 00 00 00	if r8 == 0x0 goto +0x6 <LBB49_22>
    4707	bf 76 00 00 00 00 00 00	r6 = r7
    4708	07 06 00 00 18 00 00 00	r6 += 0x18
    4709	05 00 0a 00 00 00 00 00	goto +0xa <LBB49_17>

0000000000009330 <LBB49_21>
    4710	07 06 00 00 30 00 00 00	r6 += 0x30
    4711	07 08 00 00 ff ff ff ff	r8 += -0x1
    4712	55 08 07 00 00 00 00 00	if r8 != 0x0 goto +0x7 <LBB49_17>

0000000000009348 <LBB49_22>
    4713	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    4714	15 02 10 00 00 00 00 00	if r2 == 0x0 goto +0x10 <LBB49_24>
    4715	27 02 00 00 30 00 00 00	r2 *= 0x30
    4716	bf 71 00 00 00 00 00 00	r1 = r7
    4717	b7 03 00 00 08 00 00 00	r3 = 0x8
    4718	85 10 00 00 40 fc ff ff	call -0x3c0 ; <__rust_dealloc>
    4719	05 00 0b 00 00 00 00 00	goto +0xb <LBB49_24>

0000000000009380 <LBB49_17>
    4720	79 62 f0 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x10)
    4721	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB49_19>
    4722	79 61 e8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x18)
    4723	b7 03 00 00 01 00 00 00	r3 = 0x1
    4724	85 10 00 00 3a fc ff ff	call -0x3c6 ; <__rust_dealloc>

00000000000093a8 <LBB49_19>
    4725	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    4726	15 02 ef ff 00 00 00 00	if r2 == 0x0 goto -0x11 <LBB49_21>
    4727	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4728	b7 03 00 00 01 00 00 00	r3 = 0x1
    4729	85 10 00 00 35 fc ff ff	call -0x3cb ; <__rust_dealloc>
    4730	05 00 eb ff 00 00 00 00	goto -0x15 <LBB49_21>

00000000000093d8 <LBB49_24>
    4731	79 a6 50 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xb0)
    4732	bf 90 00 00 00 00 00 00	r0 = r9

00000000000093e8 <LBB49_44>
    4733	b7 01 00 00 00 00 00 00	r1 = 0x0
    4734	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    4735	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0

0000000000009400 <LBB49_45>
    4736	95 00 00 00 00 00 00 00	exit

0000000000009408 <LBB49_25>
    4737	79 a0 f0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x10)
    4738	79 a9 e8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x18)
    4739	79 a6 50 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xb0)
    4740	15 09 f8 ff 00 00 00 00	if r9 == 0x0 goto -0x8 <LBB49_44>
    4741	7b 0a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r0
    4742	18 01 00 00 00 8b 01 00 00 00 00 00 00 00 00 00	r1 = 0x18b00 ll
    4744	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    4745	bf a1 00 00 00 00 00 00	r1 = r10
    4746	07 01 00 00 90 ff ff ff	r1 += -0x70
    4747	b7 07 00 00 00 00 00 00	r7 = 0x0
    4748	b7 02 00 00 00 00 00 00	r2 = 0x0
    4749	7b 3a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r3
    4750	b7 03 00 00 28 00 00 00	r3 = 0x28
    4751	85 10 00 00 2d 1e 00 00	call 0x1e2d ; <memset>
    4752	15 08 34 00 00 00 00 00	if r8 == 0x0 goto +0x34 <LBB49_40>
    4753	bf a1 00 00 00 00 00 00	r1 = r10
    4754	07 01 00 00 88 ff ff ff	r1 += -0x78
    4755	bf a3 00 00 00 00 00 00	r3 = r10
    4756	07 03 00 00 a8 ff ff ff	r3 += -0x58
    4757	bf 82 00 00 00 00 00 00	r2 = r8
    4758	85 10 00 00 a1 03 00 00	call 0x3a1 ; <hashbrown::raw::RawTable<T,A>::reserve_rehash>
    4759	79 a3 80 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x80)
    4760	bf 38 00 00 00 00 00 00	r8 = r3
    4761	07 08 00 00 30 00 00 00	r8 += 0x30
    4762	05 00 03 00 00 00 00 00	goto +0x3 <LBB49_28>

00000000000094d8 <LBB49_32>
    4763	07 07 00 00 30 00 00 00	r7 += 0x30
    4764	79 a3 80 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x80)
    4765	1d 78 27 00 00 00 00 00	if r8 == r7 goto +0x27 <LBB49_40>

00000000000094f0 <LBB49_28>
    4766	bf 96 00 00 00 00 00 00	r6 = r9
    4767	0f 76 00 00 00 00 00 00	r6 += r7
    4768	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4769	15 01 1b 00 00 00 00 00	if r1 == 0x0 goto +0x1b <LBB49_33>
    4770	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    4771	79 63 10 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x10)
    4772	79 64 18 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x18)
    4773	79 65 20 00 00 00 00 00	r5 = *(u64 *)(r6 + 0x20)
    4774	79 60 28 00 00 00 00 00	r0 = *(u64 *)(r6 + 0x28)
    4775	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r0
    4776	7b 5a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r5
    4777	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    4778	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    4779	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    4780	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4781	bf a1 00 00 00 00 00 00	r1 = r10
    4782	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4783	bf a2 00 00 00 00 00 00	r2 = r10
    4784	07 02 00 00 88 ff ff ff	r2 += -0x78
    4785	bf a3 00 00 00 00 00 00	r3 = r10
    4786	07 03 00 00 b8 ff ff ff	r3 += -0x48
    4787	bf a4 00 00 00 00 00 00	r4 = r10
    4788	07 04 00 00 d0 ff ff ff	r4 += -0x30
    4789	85 10 00 00 73 02 00 00	call 0x273 ; <hashbrown::map::HashMap<K,V,S,A>::insert>
    4790	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4791	15 01 e3 ff 00 00 00 00	if r1 == 0x0 goto -0x1d <LBB49_32>
    4792	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    4793	15 02 e1 ff 00 00 00 00	if r2 == 0x0 goto -0x1f <LBB49_32>
    4794	b7 03 00 00 01 00 00 00	r3 = 0x1
    4795	85 10 00 00 f3 fb ff ff	call -0x40d ; <__rust_dealloc>
    4796	05 00 de ff 00 00 00 00	goto -0x22 <LBB49_32>

00000000000095e8 <LBB49_33>
    4797	1d 73 07 00 00 00 00 00	if r3 == r7 goto +0x7 <LBB49_40>
    4798	1f 73 00 00 00 00 00 00	r3 -= r7
    4799	07 06 00 00 50 00 00 00	r6 += 0x50
    4800	37 03 00 00 30 00 00 00	r3 /= 0x30
    4801	05 00 0b 00 00 00 00 00	goto +0xb <LBB49_35>

0000000000009610 <LBB49_39>
    4802	07 06 00 00 30 00 00 00	r6 += 0x30
    4803	07 03 00 00 ff ff ff ff	r3 += -0x1
    4804	55 03 08 00 00 00 00 00	if r3 != 0x0 goto +0x8 <LBB49_35>

0000000000009628 <LBB49_40>
    4805	79 a6 50 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xb0)
    4806	79 a2 58 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xa8)
    4807	15 02 35 ff 00 00 00 00	if r2 == 0x0 goto -0xcb <LBB49_42>
    4808	27 02 00 00 30 00 00 00	r2 *= 0x30
    4809	bf 91 00 00 00 00 00 00	r1 = r9
    4810	b7 03 00 00 08 00 00 00	r3 = 0x8
    4811	85 10 00 00 e3 fb ff ff	call -0x41d ; <__rust_dealloc>
    4812	05 00 30 ff 00 00 00 00	goto -0xd0 <LBB49_42>

0000000000009668 <LBB49_35>
    4813	79 62 e8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x18)
    4814	15 02 05 00 00 00 00 00	if r2 == 0x0 goto +0x5 <LBB49_37>
    4815	79 61 e0 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x20)
    4816	bf 37 00 00 00 00 00 00	r7 = r3
    4817	b7 03 00 00 01 00 00 00	r3 = 0x1
    4818	85 10 00 00 dc fb ff ff	call -0x424 ; <__rust_dealloc>
    4819	bf 73 00 00 00 00 00 00	r3 = r7

00000000000096a0 <LBB49_37>
    4820	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    4821	15 02 ec ff 00 00 00 00	if r2 == 0x0 goto -0x14 <LBB49_39>
    4822	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
    4823	bf 37 00 00 00 00 00 00	r7 = r3
    4824	b7 03 00 00 01 00 00 00	r3 = 0x1
    4825	85 10 00 00 d5 fb ff ff	call -0x42b ; <__rust_dealloc>
    4826	bf 73 00 00 00 00 00 00	r3 = r7
    4827	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB49_39>

00000000000096e0 <<alloc::string::String as core::fmt::Display>::fmt>
    4828	bf 23 00 00 00 00 00 00	r3 = r2
    4829	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4830	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    4831	85 10 00 00 67 17 00 00	call 0x1767 ; <<str as core::fmt::Display>::fmt>
    4832	95 00 00 00 00 00 00 00	exit

0000000000009708 <<alloc::string::String as borsh::de::BorshDeserialize>::deserialize_reader>
    4833	bf 16 00 00 00 00 00 00	r6 = r1
    4834	bf a1 00 00 00 00 00 00	r1 = r10
    4835	07 01 00 00 c0 ff ff ff	r1 += -0x40
    4836	85 10 00 00 2f 01 00 00	call 0x12f ; <<alloc::vec::Vec<T> as borsh::de::BorshDeserialize>::deserialize_reader>
    4837	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)
    4838	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4839	15 07 13 00 00 00 00 00	if r7 == 0x0 goto +0x13 <LBB61_12>
    4840	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    4841	bf a1 00 00 00 00 00 00	r1 = r10
    4842	07 01 00 00 c0 ff ff ff	r1 += -0x40
    4843	bf 72 00 00 00 00 00 00	r2 = r7
    4844	bf 83 00 00 00 00 00 00	r3 = r8
    4845	85 10 00 00 fe 17 00 00	call 0x17fe ; <core::str::converts::from_utf8>
    4846	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    4847	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB61_3>
    4848	05 00 06 00 00 00 00 00	goto +0x6 <LBB61_4>

0000000000009788 <LBB61_3>
    4849	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
    4850	63 1a 60 ff 00 00 00 00	*(u32 *)(r10 - 0xa0) = r1
    4851	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
    4852	63 1a 63 ff 00 00 00 00	*(u32 *)(r10 - 0x9d) = r1
    4853	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
    4854	55 01 08 00 02 00 00 00	if r1 != 0x2 goto +0x8 <LBB61_5>

00000000000097b8 <LBB61_4>
    4855	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8
    4856	7b 96 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r9
    4857	7b 76 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r7
    4858	05 00 4d 00 00 00 00 00	goto +0x4d <LBB61_13>

00000000000097d8 <LBB61_12>
    4859	b7 01 00 00 00 00 00 00	r1 = 0x0
    4860	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    4861	7b 96 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r9
    4862	05 00 49 00 00 00 00 00	goto +0x49 <LBB61_13>

00000000000097f8 <LBB61_5>
    4863	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    4864	73 1a 88 ff 00 00 00 00	*(u8 *)(r10 - 0x78) = r1
    4865	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    4866	7b 8a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r8
    4867	7b 9a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r9
    4868	7b 7a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r7
    4869	61 a1 60 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xa0)
    4870	63 1a 89 ff 00 00 00 00	*(u32 *)(r10 - 0x77) = r1
    4871	61 a1 63 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x9d)
    4872	63 1a 8c ff 00 00 00 00	*(u32 *)(r10 - 0x74) = r1
    4873	b7 01 00 00 01 00 00 00	r1 = 0x1
    4874	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4875	b7 01 00 00 00 00 00 00	r1 = 0x0
    4876	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    4877	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4878	bf a7 00 00 00 00 00 00	r7 = r10
    4879	07 07 00 00 c0 ff ff ff	r7 += -0x40
    4880	bf a2 00 00 00 00 00 00	r2 = r10
    4881	07 02 00 00 a8 ff ff ff	r2 += -0x58
    4882	bf 71 00 00 00 00 00 00	r1 = r7
    4883	18 03 00 00 b0 9f 01 00 00 00 00 00 00 00 00 00	r3 = 0x19fb0 ll
    4885	85 10 00 00 b9 13 00 00	call 0x13b9 ; <core::fmt::Formatter::new>
    4886	bf a1 00 00 00 00 00 00	r1 = r10
    4887	07 01 00 00 68 ff ff ff	r1 += -0x98
    4888	bf 72 00 00 00 00 00 00	r2 = r7
    4889	85 10 00 00 55 0f 00 00	call 0xf55 ; <<alloc::string::FromUtf8Error as core::fmt::Display>::fmt>
    4890	15 00 0b 00 00 00 00 00	if r0 == 0x0 goto +0xb <LBB61_7>
    4891	bf a3 00 00 00 00 00 00	r3 = r10
    4892	07 03 00 00 90 ff ff ff	r3 += -0x70
    4893	18 01 00 00 d7 8b 01 00 00 00 00 00 00 00 00 00	r1 = 0x18bd7 ll
    4895	b7 02 00 00 37 00 00 00	r2 = 0x37
    4896	18 04 00 00 e0 9f 01 00 00 00 00 00 00 00 00 00	r4 = 0x19fe0 ll
    4898	18 05 00 00 00 a0 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a000 ll
    4900	85 10 00 00 1a 11 00 00	call 0x111a ; <core::result::unwrap_failed>
    4901	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009930 <LBB61_7>
    4902	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4903	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    4904	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    4905	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    4906	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    4907	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    4908	b7 01 00 00 18 00 00 00	r1 = 0x18
    4909	b7 02 00 00 08 00 00 00	r2 = 0x8
    4910	85 10 00 00 66 fb ff ff	call -0x49a ; <__rust_alloc>
    4911	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB61_9>
    4912	b7 01 00 00 08 00 00 00	r1 = 0x8
    4913	b7 02 00 00 18 00 00 00	r2 = 0x18
    4914	85 10 00 00 74 0e 00 00	call 0xe74 ; <alloc::alloc::handle_alloc_error>
    4915	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000099a0 <LBB61_9>
    4916	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    4917	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    4918	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    4919	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    4920	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    4921	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4922	b7 01 00 00 15 00 00 00	r1 = 0x15
    4923	bf 02 00 00 00 00 00 00	r2 = r0
    4924	18 03 00 00 28 9f 01 00 00 00 00 00 00 00 00 00	r3 = 0x19f28 ll
    4926	85 10 00 00 f5 0b 00 00	call 0xbf5 ; <std::io::error::Error::_new>
    4927	bf 07 00 00 00 00 00 00	r7 = r0
    4928	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)
    4929	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB61_11>
    4930	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    4931	b7 03 00 00 01 00 00 00	r3 = 0x1
    4932	85 10 00 00 6a fb ff ff	call -0x496 ; <__rust_dealloc>

0000000000009a28 <LBB61_11>
    4933	b7 01 00 00 00 00 00 00	r1 = 0x0
    4934	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    4935	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7

0000000000009a40 <LBB61_13>
    4936	95 00 00 00 00 00 00 00	exit

0000000000009a48 <<core::hash::sip::Hasher<S> as core::hash::Hasher>::write>
    4937	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    4938	79 12 30 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x30)
    4939	0f 32 00 00 00 00 00 00	r2 += r3
    4940	7b 21 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r2
    4941	b7 02 00 00 00 00 00 00	r2 = 0x0
    4942	79 18 40 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x40)
    4943	15 08 4e 00 00 00 00 00	if r8 == 0x0 goto +0x4e <LBB62_11>
    4944	b7 02 00 00 08 00 00 00	r2 = 0x8
    4945	1f 82 00 00 00 00 00 00	r2 -= r8
    4946	bf 37 00 00 00 00 00 00	r7 = r3
    4947	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB62_3>
    4948	bf 27 00 00 00 00 00 00	r7 = r2

0000000000009aa8 <LBB62_3>
    4949	b7 06 00 00 00 00 00 00	r6 = 0x0
    4950	b7 00 00 00 00 00 00 00	r0 = 0x0
    4951	25 07 98 00 03 00 00 00	if r7 > 0x3 goto +0x98 <LBB62_5>

0000000000009ac0 <LBB62_4>
    4952	bf 04 00 00 00 00 00 00	r4 = r0
    4953	47 04 00 00 01 00 00 00	r4 |= 0x1
    4954	2d 47 99 00 00 00 00 00	if r7 > r4 goto +0x99 <LBB62_6>
    4955	2d 07 01 00 00 00 00 00	if r7 > r0 goto +0x1 <LBB62_8>
    4956	05 00 07 00 00 00 00 00	goto +0x7 <LBB62_9>

0000000000009ae8 <LBB62_8>
    4957	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    4958	0f 04 00 00 00 00 00 00	r4 += r0
    4959	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    4960	67 00 00 00 03 00 00 00	r0 <<= 0x3
    4961	6f 04 00 00 00 00 00 00	r4 <<= r0
    4962	4f 64 00 00 00 00 00 00	r4 |= r6
    4963	bf 46 00 00 00 00 00 00	r6 = r4

0000000000009b20 <LBB62_9>
    4964	bf 84 00 00 00 00 00 00	r4 = r8
    4965	67 04 00 00 03 00 00 00	r4 <<= 0x3
    4966	57 04 00 00 38 00 00 00	r4 &= 0x38
    4967	6f 46 00 00 00 00 00 00	r6 <<= r4
    4968	79 10 38 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x38)
    4969	4f 60 00 00 00 00 00 00	r0 |= r6
    4970	7b 01 38 00 00 00 00 00	*(u64 *)(r1 + 0x38) = r0
    4971	2d 32 93 00 00 00 00 00	if r2 > r3 goto +0x93 <LBB62_22>
    4972	79 14 00 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x0)
    4973	79 17 10 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x10)
    4974	bf 75 00 00 00 00 00 00	r5 = r7
    4975	0f 45 00 00 00 00 00 00	r5 += r4
    4976	bf 74 00 00 00 00 00 00	r4 = r7
    4977	77 04 00 00 33 00 00 00	r4 >>= 0x33
    4978	67 07 00 00 0d 00 00 00	r7 <<= 0xd
    4979	4f 47 00 00 00 00 00 00	r7 |= r4
    4980	af 57 00 00 00 00 00 00	r7 ^= r5
    4981	bf 74 00 00 00 00 00 00	r4 = r7
    4982	77 04 00 00 2f 00 00 00	r4 >>= 0x2f
    4983	bf 79 00 00 00 00 00 00	r9 = r7
    4984	67 09 00 00 11 00 00 00	r9 <<= 0x11
    4985	4f 49 00 00 00 00 00 00	r9 |= r4
    4986	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    4987	af 04 00 00 00 00 00 00	r4 ^= r0
    4988	79 16 08 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x8)
    4989	0f 46 00 00 00 00 00 00	r6 += r4
    4990	bf 68 00 00 00 00 00 00	r8 = r6
    4991	0f 78 00 00 00 00 00 00	r8 += r7
    4992	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r0
    4993	bf 80 00 00 00 00 00 00	r0 = r8
    4994	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4995	bf 87 00 00 00 00 00 00	r7 = r8
    4996	67 07 00 00 20 00 00 00	r7 <<= 0x20
    4997	4f 07 00 00 00 00 00 00	r7 |= r0
    4998	af 98 00 00 00 00 00 00	r8 ^= r9
    4999	bf 50 00 00 00 00 00 00	r0 = r5
    5000	77 00 00 00 20 00 00 00	r0 >>= 0x20
    5001	67 05 00 00 20 00 00 00	r5 <<= 0x20
    5002	4f 05 00 00 00 00 00 00	r5 |= r0
    5003	bf 40 00 00 00 00 00 00	r0 = r4
    5004	77 00 00 00 30 00 00 00	r0 >>= 0x30
    5005	67 04 00 00 10 00 00 00	r4 <<= 0x10
    5006	4f 04 00 00 00 00 00 00	r4 |= r0
    5007	af 46 00 00 00 00 00 00	r6 ^= r4
    5008	7b 81 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r8
    5009	7b 71 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r7
    5010	bf 64 00 00 00 00 00 00	r4 = r6
    5011	0f 54 00 00 00 00 00 00	r4 += r5
    5012	bf 45 00 00 00 00 00 00	r5 = r4
    5013	79 a0 f0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x10)
    5014	af 05 00 00 00 00 00 00	r5 ^= r0
    5015	7b 51 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r5
    5016	bf 65 00 00 00 00 00 00	r5 = r6
    5017	77 05 00 00 2b 00 00 00	r5 >>= 0x2b
    5018	67 06 00 00 15 00 00 00	r6 <<= 0x15
    5019	4f 56 00 00 00 00 00 00	r6 |= r5
    5020	af 46 00 00 00 00 00 00	r6 ^= r4
    5021	7b 61 18 00 00 00 00 00	*(u64 *)(r1 + 0x18) = r6

0000000000009cf0 <LBB62_11>
    5022	1f 23 00 00 00 00 00 00	r3 -= r2
    5023	bf 38 00 00 00 00 00 00	r8 = r3
    5024	57 08 00 00 07 00 00 00	r8 &= 0x7
    5025	57 03 00 00 f8 ff ff ff	r3 &= -0x8
    5026	3d 32 3a 00 00 00 00 00	if r2 >= r3 goto +0x3a <LBB62_15>
    5027	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    5028	79 15 08 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x8)
    5029	79 16 10 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x10)
    5030	79 17 18 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x18)
    5031	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5032	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    5033	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)

0000000000009d50 <LBB62_13>
    5034	bf 68 00 00 00 00 00 00	r8 = r6
    5035	0f 98 00 00 00 00 00 00	r8 += r9
    5036	bf 64 00 00 00 00 00 00	r4 = r6
    5037	77 04 00 00 33 00 00 00	r4 >>= 0x33
    5038	67 06 00 00 0d 00 00 00	r6 <<= 0xd
    5039	4f 46 00 00 00 00 00 00	r6 |= r4
    5040	af 86 00 00 00 00 00 00	r6 ^= r8
    5041	bf 64 00 00 00 00 00 00	r4 = r6
    5042	77 04 00 00 2f 00 00 00	r4 >>= 0x2f
    5043	bf 69 00 00 00 00 00 00	r9 = r6
    5044	67 09 00 00 11 00 00 00	r9 <<= 0x11
    5045	4f 49 00 00 00 00 00 00	r9 |= r4
    5046	bf 84 00 00 00 00 00 00	r4 = r8
    5047	77 04 00 00 20 00 00 00	r4 >>= 0x20
    5048	67 08 00 00 20 00 00 00	r8 <<= 0x20
    5049	4f 48 00 00 00 00 00 00	r8 |= r4
    5050	bf 14 00 00 00 00 00 00	r4 = r1
    5051	0f 24 00 00 00 00 00 00	r4 += r2
    5052	79 44 00 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x0)
    5053	af 47 00 00 00 00 00 00	r7 ^= r4
    5054	bf 70 00 00 00 00 00 00	r0 = r7
    5055	77 00 00 00 30 00 00 00	r0 >>= 0x30
    5056	0f 75 00 00 00 00 00 00	r5 += r7
    5057	67 07 00 00 10 00 00 00	r7 <<= 0x10
    5058	4f 07 00 00 00 00 00 00	r7 |= r0
    5059	bf 50 00 00 00 00 00 00	r0 = r5
    5060	af 70 00 00 00 00 00 00	r0 ^= r7
    5061	0f 65 00 00 00 00 00 00	r5 += r6
    5062	bf 56 00 00 00 00 00 00	r6 = r5
    5063	af 96 00 00 00 00 00 00	r6 ^= r9
    5064	bf 57 00 00 00 00 00 00	r7 = r5
    5065	77 07 00 00 20 00 00 00	r7 >>= 0x20
    5066	67 05 00 00 20 00 00 00	r5 <<= 0x20
    5067	4f 75 00 00 00 00 00 00	r5 |= r7
    5068	bf 09 00 00 00 00 00 00	r9 = r0
    5069	0f 89 00 00 00 00 00 00	r9 += r8
    5070	bf 07 00 00 00 00 00 00	r7 = r0
    5071	77 07 00 00 2b 00 00 00	r7 >>= 0x2b
    5072	67 00 00 00 15 00 00 00	r0 <<= 0x15
    5073	4f 70 00 00 00 00 00 00	r0 |= r7
    5074	af 90 00 00 00 00 00 00	r0 ^= r9
    5075	af 49 00 00 00 00 00 00	r9 ^= r4
    5076	07 02 00 00 08 00 00 00	r2 += 0x8
    5077	bf 07 00 00 00 00 00 00	r7 = r0
    5078	2d 23 d3 ff 00 00 00 00	if r3 > r2 goto -0x2d <LBB62_13>
    5079	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5080	7b 61 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r6
    5081	7b 01 18 00 00 00 00 00	*(u64 *)(r1 + 0x18) = r0
    5082	7b 51 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r5
    5083	7b 91 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r9
    5084	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)

0000000000009ee8 <LBB62_15>
    5085	b7 03 00 00 00 00 00 00	r3 = 0x0
    5086	b7 00 00 00 00 00 00 00	r0 = 0x0
    5087	25 08 22 00 03 00 00 00	if r8 > 0x3 goto +0x22 <LBB62_17>

0000000000009f00 <LBB62_16>
    5088	bf 04 00 00 00 00 00 00	r4 = r0
    5089	47 04 00 00 01 00 00 00	r4 |= 0x1
    5090	2d 48 24 00 00 00 00 00	if r8 > r4 goto +0x24 <LBB62_18>
    5091	2d 08 01 00 00 00 00 00	if r8 > r0 goto +0x1 <LBB62_20>
    5092	05 00 09 00 00 00 00 00	goto +0x9 <LBB62_21>

0000000000009f28 <LBB62_20>
    5093	bf 04 00 00 00 00 00 00	r4 = r0
    5094	0f 24 00 00 00 00 00 00	r4 += r2
    5095	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5096	0f 42 00 00 00 00 00 00	r2 += r4
    5097	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    5098	67 00 00 00 03 00 00 00	r0 <<= 0x3
    5099	6f 02 00 00 00 00 00 00	r2 <<= r0
    5100	4f 32 00 00 00 00 00 00	r2 |= r3
    5101	bf 23 00 00 00 00 00 00	r3 = r2

0000000000009f70 <LBB62_21>
    5102	7b 31 38 00 00 00 00 00	*(u64 *)(r1 + 0x38) = r3
    5103	05 00 10 00 00 00 00 00	goto +0x10 <LBB62_23>

0000000000009f80 <LBB62_5>
    5104	b7 00 00 00 04 00 00 00	r0 = 0x4
    5105	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    5106	61 46 00 00 00 00 00 00	r6 = *(u32 *)(r4 + 0x0)
    5107	05 00 64 ff 00 00 00 00	goto -0x9c <LBB62_4>

0000000000009fa0 <LBB62_6>
    5108	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    5109	0f 04 00 00 00 00 00 00	r4 += r0
    5110	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    5111	bf 05 00 00 00 00 00 00	r5 = r0
    5112	67 05 00 00 03 00 00 00	r5 <<= 0x3
    5113	6f 54 00 00 00 00 00 00	r4 <<= r5
    5114	4f 64 00 00 00 00 00 00	r4 |= r6
    5115	47 00 00 00 02 00 00 00	r0 |= 0x2
    5116	bf 46 00 00 00 00 00 00	r6 = r4
    5117	2d 07 5f ff 00 00 00 00	if r7 > r0 goto -0xa1 <LBB62_8>
    5118	05 00 65 ff 00 00 00 00	goto -0x9b <LBB62_9>

0000000000009ff8 <LBB62_22>
    5119	0f 38 00 00 00 00 00 00	r8 += r3

000000000000a000 <LBB62_23>
    5120	7b 81 40 00 00 00 00 00	*(u64 *)(r1 + 0x40) = r8
    5121	95 00 00 00 00 00 00 00	exit

000000000000a010 <LBB62_17>
    5122	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
    5123	0f 23 00 00 00 00 00 00	r3 += r2
    5124	b7 00 00 00 04 00 00 00	r0 = 0x4
    5125	61 33 00 00 00 00 00 00	r3 = *(u32 *)(r3 + 0x0)
    5126	05 00 d9 ff 00 00 00 00	goto -0x27 <LBB62_16>

000000000000a038 <LBB62_18>
    5127	bf 04 00 00 00 00 00 00	r4 = r0
    5128	0f 24 00 00 00 00 00 00	r4 += r2
    5129	79 a5 f8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x8)
    5130	0f 45 00 00 00 00 00 00	r5 += r4
    5131	69 54 00 00 00 00 00 00	r4 = *(u16 *)(r5 + 0x0)
    5132	bf 05 00 00 00 00 00 00	r5 = r0
    5133	67 05 00 00 03 00 00 00	r5 <<= 0x3
    5134	6f 54 00 00 00 00 00 00	r4 <<= r5
    5135	4f 34 00 00 00 00 00 00	r4 |= r3
    5136	47 00 00 00 02 00 00 00	r0 |= 0x2
    5137	bf 43 00 00 00 00 00 00	r3 = r4
    5138	2d 08 d2 ff 00 00 00 00	if r8 > r0 goto -0x2e <LBB62_20>
    5139	05 00 da ff 00 00 00 00	goto -0x26 <LBB62_21>

000000000000a0a0 <<alloc::vec::Vec<T> as borsh::de::BorshDeserialize>::deserialize_reader>
    5140	bf 28 00 00 00 00 00 00	r8 = r2
    5141	bf 16 00 00 00 00 00 00	r6 = r1
    5142	79 89 08 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x8)
    5143	b7 01 00 00 04 00 00 00	r1 = 0x4
    5144	2d 91 16 00 00 00 00 00	if r1 > r9 goto +0x16 <LBB63_38>
    5145	07 09 00 00 fc ff ff ff	r9 += -0x4
    5146	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    5147	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
    5148	7b 98 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r9
    5149	07 01 00 00 04 00 00 00	r1 += 0x4
    5150	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    5151	15 02 8f 00 00 00 00 00	if r2 == 0x0 goto +0x8f <LBB63_2>
    5152	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5153	b7 03 00 00 00 00 10 00	r3 = 0x100000
    5154	bf 21 00 00 00 00 00 00	r1 = r2
    5155	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    5156	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB63_5>
    5157	b7 01 00 00 00 00 10 00	r1 = 0x100000

000000000000a130 <LBB63_5>
    5158	7b 6a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r6
    5159	b7 02 00 00 01 00 00 00	r2 = 0x1
    5160	bf 16 00 00 00 00 00 00	r6 = r1
    5161	85 10 00 00 a7 fa ff ff	call -0x559 ; <__rust_alloc_zeroed>
    5162	55 00 0b 00 00 00 00 00	if r0 != 0x0 goto +0xb <LBB63_7>

000000000000a158 <LBB63_6>
    5163	b7 01 00 00 01 00 00 00	r1 = 0x1
    5164	bf 62 00 00 00 00 00 00	r2 = r6
    5165	85 10 00 00 79 0d 00 00	call 0xd79 ; <alloc::alloc::handle_alloc_error>
    5166	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a178 <LBB63_38>
    5167	18 01 00 00 80 9f 01 00 00 00 00 00 00 00 00 00	r1 = 0x19f80 ll
    5169	85 10 00 00 e4 09 00 00	call 0x9e4 ; <borsh::de::unexpected_eof_to_unexpected_length_of_input>
    5170	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5171	b7 01 00 00 00 00 00 00	r1 = 0x0
    5172	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5173	05 00 ec 00 00 00 00 00	goto +0xec <LBB63_39>

000000000000a1b0 <LBB63_7>
    5174	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    5175	7b 6a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r6
    5176	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5177	b7 07 00 00 00 00 00 00	r7 = 0x0
    5178	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    5179	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    5180	bf 64 00 00 00 00 00 00	r4 = r6
    5181	7b 8a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r8
    5182	05 00 0f 00 00 00 00 00	goto +0xf <LBB63_8>

000000000000a1f8 <LBB63_13>
    5183	bf 01 00 00 00 00 00 00	r1 = r0
    5184	0f 71 00 00 00 00 00 00	r1 += r7
    5185	55 06 42 00 01 00 00 00	if r6 != 0x1 goto +0x42 <LBB63_30>
    5186	1d 74 e0 00 00 00 00 00	if r4 == r7 goto +0xe0 <LBB63_17>
    5187	71 32 00 00 00 00 00 00	r2 = *(u8 *)(r3 + 0x0)
    5188	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r2
    5189	07 09 00 00 ff ff ff ff	r9 += -0x1
    5190	7b 98 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r9
    5191	07 03 00 00 01 00 00 00	r3 += 0x1
    5192	7b 38 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r3

000000000000a248 <LBB63_16>
    5193	0f 76 00 00 00 00 00 00	r6 += r7
    5194	bf 67 00 00 00 00 00 00	r7 = r6
    5195	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    5196	2d 62 01 00 00 00 00 00	if r2 > r6 goto +0x1 <LBB63_8>
    5197	05 00 58 00 00 00 00 00	goto +0x58 <LBB63_40>

000000000000a270 <LBB63_8>
    5198	1d 47 0c 00 00 00 00 00	if r7 == r4 goto +0xc <LBB63_18>

000000000000a278 <LBB63_9>
    5199	3d 74 06 00 00 00 00 00	if r4 >= r7 goto +0x6 <LBB63_11>
    5200	bf 71 00 00 00 00 00 00	r1 = r7
    5201	bf 42 00 00 00 00 00 00	r2 = r4
    5202	18 03 00 00 48 a0 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a048 ll
    5204	85 10 00 00 43 16 00 00	call 0x1643 ; <core::slice::index::slice_start_index_len_fail>
    5205	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a2b0 <LBB63_11>
    5206	bf 46 00 00 00 00 00 00	r6 = r4
    5207	1f 76 00 00 00 00 00 00	r6 -= r7
    5208	2d 69 e6 ff 00 00 00 00	if r9 > r6 goto -0x1a <LBB63_13>
    5209	bf 96 00 00 00 00 00 00	r6 = r9
    5210	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB63_13>

000000000000a2d8 <LBB63_18>
    5211	7b 9a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r9
    5212	bf 49 00 00 00 00 00 00	r9 = r4
    5213	67 09 00 00 01 00 00 00	r9 <<= 0x1
    5214	65 04 01 00 ff ff ff ff	if r4 s> -0x1 goto +0x1 <LBB63_20>
    5215	b7 09 00 00 ff ff ff ff	r9 = -0x1

000000000000a300 <LBB63_20>
    5216	2d 92 01 00 00 00 00 00	if r2 > r9 goto +0x1 <LBB63_22>
    5217	bf 29 00 00 00 00 00 00	r9 = r2

000000000000a310 <LBB63_22>
    5218	bf 98 00 00 00 00 00 00	r8 = r9
    5219	3d 94 3c 00 00 00 00 00	if r4 >= r9 goto +0x3c <LBB63_29>
    5220	bf 96 00 00 00 00 00 00	r6 = r9
    5221	1f 46 00 00 00 00 00 00	r6 -= r4
    5222	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5223	1f 41 00 00 00 00 00 00	r1 -= r4
    5224	bf 48 00 00 00 00 00 00	r8 = r4
    5225	3d 61 0b 00 00 00 00 00	if r1 >= r6 goto +0xb <LBB63_25>
    5226	bf a1 00 00 00 00 00 00	r1 = r10
    5227	07 01 00 00 e8 ff ff ff	r1 += -0x18
    5228	bf 42 00 00 00 00 00 00	r2 = r4
    5229	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5230	bf 63 00 00 00 00 00 00	r3 = r6
    5231	bf 48 00 00 00 00 00 00	r8 = r4
    5232	85 10 00 00 49 fd ff ff	call -0x2b7 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5233	bf 84 00 00 00 00 00 00	r4 = r8
    5234	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    5235	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    5236	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)

000000000000a3a8 <LBB63_25>
    5237	bf 01 00 00 00 00 00 00	r1 = r0
    5238	0f 81 00 00 00 00 00 00	r1 += r8
    5239	b7 02 00 00 02 00 00 00	r2 = 0x2
    5240	2d 62 23 00 00 00 00 00	if r2 > r6 goto +0x23 <LBB63_27>
    5241	07 06 00 00 ff ff ff ff	r6 += -0x1
    5242	b7 02 00 00 00 00 00 00	r2 = 0x0
    5243	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5244	bf 63 00 00 00 00 00 00	r3 = r6
    5245	bf 09 00 00 00 00 00 00	r9 = r0
    5246	85 10 00 00 3e 1c 00 00	call 0x1c3e ; <memset>
    5247	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    5248	0f 68 00 00 00 00 00 00	r8 += r6
    5249	0f 89 00 00 00 00 00 00	r9 += r8
    5250	bf 91 00 00 00 00 00 00	r1 = r9
    5251	05 00 19 00 00 00 00 00	goto +0x19 <LBB63_28>

000000000000a420 <LBB63_30>
    5252	bf 32 00 00 00 00 00 00	r2 = r3
    5253	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5254	bf 63 00 00 00 00 00 00	r3 = r6
    5255	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r0
    5256	bf 48 00 00 00 00 00 00	r8 = r4
    5257	85 10 00 00 ce 1b 00 00	call 0x1bce ; <memcpy>
    5258	bf 84 00 00 00 00 00 00	r4 = r8
    5259	79 a0 c8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x38)
    5260	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    5261	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    5262	1f 69 00 00 00 00 00 00	r9 -= r6
    5263	7b 98 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r9
    5264	0f 63 00 00 00 00 00 00	r3 += r6
    5265	7b 38 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r3
    5266	55 06 b6 ff 00 00 00 00	if r6 != 0x0 goto -0x4a <LBB63_16>
    5267	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5268	b7 02 00 00 01 00 00 00	r2 = 0x1
    5269	85 10 00 00 ff f9 ff ff	call -0x601 ; <__rust_alloc>
    5270	bf 06 00 00 00 00 00 00	r6 = r0
    5271	55 06 1d 00 00 00 00 00	if r6 != 0x0 goto +0x1d <LBB63_33>
    5272	b7 01 00 00 01 00 00 00	r1 = 0x1
    5273	b7 02 00 00 1a 00 00 00	r2 = 0x1a
    5274	85 10 00 00 0c 0d 00 00	call 0xd0c ; <alloc::alloc::handle_alloc_error>
    5275	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a4e0 <LBB63_27>
    5276	1d 49 03 00 00 00 00 00	if r9 == r4 goto +0x3 <LBB63_29>

000000000000a4e8 <LBB63_28>
    5277	b7 02 00 00 00 00 00 00	r2 = 0x0
    5278	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r2
    5279	07 08 00 00 01 00 00 00	r8 += 0x1

000000000000a500 <LBB63_29>
    5280	7b 8a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r8
    5281	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    5282	bf 84 00 00 00 00 00 00	r4 = r8
    5283	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    5284	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)
    5285	05 00 a9 ff 00 00 00 00	goto -0x57 <LBB63_9>

000000000000a530 <LBB63_40>
    5286	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    5287	15 01 34 00 00 00 00 00	if r1 == 0x0 goto +0x34 <LBB63_42>
    5288	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5289	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    5290	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
    5291	7b 24 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r2
    5292	7b 34 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r3
    5293	7b 14 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r1
    5294	05 00 73 00 00 00 00 00	goto +0x73 <LBB63_39>

000000000000a578 <LBB63_2>
    5295	b7 01 00 00 01 00 00 00	r1 = 0x1
    5296	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5297	b7 01 00 00 00 00 00 00	r1 = 0x0
    5298	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    5299	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    5300	05 00 6d 00 00 00 00 00	goto +0x6d <LBB63_39>

000000000000a5a8 <LBB63_33>
    5301	b7 01 00 00 75 74 00 00	r1 = 0x7475
    5302	6b 16 18 00 00 00 00 00	*(u16 *)(r6 + 0x18) = r1
    5303	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    5305	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    5306	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    5308	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    5309	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    5311	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5312	b7 01 00 00 18 00 00 00	r1 = 0x18
    5313	b7 02 00 00 08 00 00 00	r2 = 0x8
    5314	85 10 00 00 d2 f9 ff ff	call -0x62e ; <__rust_alloc>
    5315	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB63_35>
    5316	b7 01 00 00 08 00 00 00	r1 = 0x8
    5317	b7 02 00 00 18 00 00 00	r2 = 0x18
    5318	85 10 00 00 e0 0c 00 00	call 0xce0 ; <alloc::alloc::handle_alloc_error>
    5319	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a640 <LBB63_35>
    5320	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5321	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5322	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5323	7b 60 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r6
    5324	b7 01 00 00 15 00 00 00	r1 = 0x15
    5325	bf 02 00 00 00 00 00 00	r2 = r0
    5326	18 03 00 00 28 9f 01 00 00 00 00 00 00 00 00 00	r3 = 0x19f28 ll
    5328	85 10 00 00 63 0a 00 00	call 0xa63 ; <std::io::error::Error::_new>
    5329	bf 06 00 00 00 00 00 00	r6 = r0
    5330	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    5331	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB63_37>
    5332	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    5333	b7 03 00 00 01 00 00 00	r3 = 0x1
    5334	85 10 00 00 d8 f9 ff ff	call -0x628 ; <__rust_dealloc>

000000000000a6b8 <LBB63_37>
    5335	b7 01 00 00 00 00 00 00	r1 = 0x0
    5336	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    5337	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    5338	7b 62 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r6
    5339	05 00 46 00 00 00 00 00	goto +0x46 <LBB63_39>

000000000000a6e0 <LBB63_42>
    5340	b7 01 00 00 00 10 00 00	r1 = 0x1000
    5341	bf 26 00 00 00 00 00 00	r6 = r2
    5342	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB63_44>
    5343	b7 06 00 00 00 10 00 00	r6 = 0x1000

000000000000a700 <LBB63_44>
    5344	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5345	25 06 01 00 01 00 00 00	if r6 > 0x1 goto +0x1 <LBB63_46>
    5346	b7 06 00 00 01 00 00 00	r6 = 0x1

000000000000a718 <LBB63_46>
    5347	bf 61 00 00 00 00 00 00	r1 = r6
    5348	b7 02 00 00 01 00 00 00	r2 = 0x1
    5349	85 10 00 00 af f9 ff ff	call -0x651 ; <__rust_alloc>
    5350	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB63_49>
    5351	05 00 43 ff 00 00 00 00	goto -0xbd <LBB63_6>

000000000000a740 <LBB63_49>
    5352	7b 6a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r6
    5353	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5354	b7 06 00 00 00 00 00 00	r6 = 0x0
    5355	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    5356	07 09 00 00 ff ff ff ff	r9 += -0x1
    5357	b7 02 00 00 00 00 00 00	r2 = 0x0
    5358	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    5359	79 a4 d8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x28)
    5360	05 00 0c 00 00 00 00 00	goto +0xc <LBB63_50>

000000000000a788 <LBB63_53>
    5361	bf 01 00 00 00 00 00 00	r1 = r0
    5362	0f 21 00 00 00 00 00 00	r1 += r2
    5363	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    5364	07 09 00 00 ff ff ff ff	r9 += -0x1
    5365	07 02 00 00 01 00 00 00	r2 += 0x1
    5366	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    5367	07 06 00 00 01 00 00 00	r6 += 0x1
    5368	bf 61 00 00 00 00 00 00	r1 = r6
    5369	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5370	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5371	2d 14 01 00 00 00 00 00	if r4 > r1 goto +0x1 <LBB63_50>
    5372	05 00 1e 00 00 00 00 00	goto +0x1e <LBB63_48>

000000000000a7e8 <LBB63_50>
    5373	15 09 10 00 ff ff ff ff	if r9 == -0x1 goto +0x10 <LBB63_54>
    5374	bf 31 00 00 00 00 00 00	r1 = r3
    5375	0f 61 00 00 00 00 00 00	r1 += r6
    5376	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    5377	7b 98 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r9
    5378	07 01 00 00 01 00 00 00	r1 += 0x1
    5379	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    5380	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5381	5d 12 eb ff 00 00 00 00	if r2 != r1 goto -0x15 <LBB63_53>
    5382	bf a1 00 00 00 00 00 00	r1 = r10
    5383	07 01 00 00 e8 ff ff ff	r1 += -0x18
    5384	85 10 00 00 4e fc ff ff	call -0x3b2 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5385	79 a4 d8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x28)
    5386	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    5387	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    5388	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5389	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB63_53>

000000000000a870 <LBB63_54>
    5390	18 01 00 00 80 9f 01 00 00 00 00 00 00 00 00 00	r1 = 0x19f80 ll
    5392	85 10 00 00 05 09 00 00	call 0x905 ; <borsh::de::unexpected_eof_to_unexpected_length_of_input>
    5393	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    5394	7b 02 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r0
    5395	b7 01 00 00 00 00 00 00	r1 = 0x0
    5396	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    5397	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    5398	15 02 0b 00 00 00 00 00	if r2 == 0x0 goto +0xb <LBB63_39>
    5399	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    5400	b7 03 00 00 01 00 00 00	r3 = 0x1
    5401	85 10 00 00 95 f9 ff ff	call -0x66b ; <__rust_dealloc>
    5402	05 00 07 00 00 00 00 00	goto +0x7 <LBB63_39>

000000000000a8d8 <LBB63_48>
    5403	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    5404	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    5405	7b 12 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r1
    5406	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5407	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    5408	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    5409	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1

000000000000a910 <LBB63_39>
    5410	95 00 00 00 00 00 00 00	exit

000000000000a918 <LBB63_17>
    5411	b7 01 00 00 00 00 00 00	r1 = 0x0
    5412	b7 02 00 00 00 00 00 00	r2 = 0x0
    5413	18 03 00 00 98 9f 01 00 00 00 00 00 00 00 00 00	r3 = 0x19f98 ll
    5415	85 10 00 00 fb 0e 00 00	call 0xefb ; <core::panicking::panic_bounds_check>
    5416	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a948 <hashbrown::map::HashMap<K,V,S,A>::insert>
    5417	7b 4a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r4
    5418	bf 37 00 00 00 00 00 00	r7 = r3
    5419	bf 26 00 00 00 00 00 00	r6 = r2
    5420	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    5421	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    5422	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    5423	85 10 00 00 65 fa ff ff	call -0x59b ; <core::hash::BuildHasher::hash_one>
    5424	bf 08 00 00 00 00 00 00	r8 = r0
    5425	79 61 10 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x10)
    5426	55 01 05 00 00 00 00 00	if r1 != 0x0 goto +0x5 <LBB65_2>
    5427	bf 63 00 00 00 00 00 00	r3 = r6
    5428	07 03 00 00 20 00 00 00	r3 += 0x20
    5429	bf 61 00 00 00 00 00 00	r1 = r6
    5430	b7 02 00 00 01 00 00 00	r2 = 0x1
    5431	85 10 00 00 00 01 00 00	call 0x100 ; <hashbrown::raw::RawTable<T,A>::reserve_rehash>

000000000000a9c0 <LBB65_2>
    5432	b7 01 00 00 00 00 00 00	r1 = 0x0
    5433	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    5434	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    5435	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5436	7b 7a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r7
    5437	79 73 10 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x10)
    5438	bf 81 00 00 00 00 00 00	r1 = r8
    5439	77 01 00 00 39 00 00 00	r1 >>= 0x39
    5440	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    5442	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    5443	2f 21 00 00 00 00 00 00	r1 *= r2
    5444	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    5445	79 64 08 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x8)
    5446	7b 6a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r6
    5447	79 65 00 00 00 00 00 00	r5 = *(u64 *)(r6 + 0x0)
    5448	bf 51 00 00 00 00 00 00	r1 = r5
    5449	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5450	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    5451	18 00 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r0 = -0x7f7f7f7f7f7f7f80 ll
    5453	b7 01 00 00 00 00 00 00	r1 = 0x0
    5454	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    5455	bf 87 00 00 00 00 00 00	r7 = r8
    5456	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    5457	7b 5a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r5

000000000000aa90 <LBB65_3>
    5458	5f 47 00 00 00 00 00 00	r7 &= r4
    5459	0f 75 00 00 00 00 00 00	r5 += r7
    5460	79 59 00 00 00 00 00 00	r9 = *(u64 *)(r5 + 0x0)
    5461	7b 9a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r9
    5462	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    5463	af 19 00 00 00 00 00 00	r9 ^= r1
    5464	bf 91 00 00 00 00 00 00	r1 = r9
    5465	18 02 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r2 = -0x101010101010101 ll
    5467	0f 21 00 00 00 00 00 00	r1 += r2
    5468	a7 09 00 00 ff ff ff ff	r9 ^= -0x1
    5469	5f 19 00 00 00 00 00 00	r9 &= r1
    5470	5f 09 00 00 00 00 00 00	r9 &= r0
    5471	15 09 32 00 00 00 00 00	if r9 == 0x0 goto +0x32 <LBB65_23>
    5472	bf 96 00 00 00 00 00 00	r6 = r9
    5473	7b 7a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r7

000000000000ab10 <LBB65_5>
    5474	07 06 00 00 ff ff ff ff	r6 += -0x1
    5475	bf 91 00 00 00 00 00 00	r1 = r9
    5476	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    5477	5f 61 00 00 00 00 00 00	r1 &= r6
    5478	bf 12 00 00 00 00 00 00	r2 = r1
    5479	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5480	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    5482	5f 52 00 00 00 00 00 00	r2 &= r5
    5483	1f 21 00 00 00 00 00 00	r1 -= r2
    5484	bf 18 00 00 00 00 00 00	r8 = r1
    5485	18 02 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r2 = 0x3333333333333333 ll
    5487	5f 28 00 00 00 00 00 00	r8 &= r2
    5488	77 01 00 00 02 00 00 00	r1 >>= 0x2
    5489	5f 21 00 00 00 00 00 00	r1 &= r2
    5490	0f 18 00 00 00 00 00 00	r8 += r1
    5491	bf 81 00 00 00 00 00 00	r1 = r8
    5492	77 01 00 00 04 00 00 00	r1 >>= 0x4
    5493	0f 18 00 00 00 00 00 00	r8 += r1
    5494	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    5496	5f 18 00 00 00 00 00 00	r8 &= r1
    5497	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    5499	2f 18 00 00 00 00 00 00	r8 *= r1
    5500	77 08 00 00 3b 00 00 00	r8 >>= 0x3b
    5501	0f 78 00 00 00 00 00 00	r8 += r7
    5502	5f 48 00 00 00 00 00 00	r8 &= r4
    5503	87 08 00 00 00 00 00 00	r8 = -r8
    5504	27 08 00 00 30 00 00 00	r8 *= 0x30
    5505	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    5506	0f 81 00 00 00 00 00 00	r1 += r8
    5507	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5508	5d 23 09 00 00 00 00 00	if r3 != r2 goto +0x9 <LBB65_7>
    5509	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    5510	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    5511	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    5512	bf 47 00 00 00 00 00 00	r7 = r4
    5513	85 10 00 00 56 1b 00 00	call 0x1b56 ; <memcmp>
    5514	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    5515	bf 74 00 00 00 00 00 00	r4 = r7
    5516	79 a7 b8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x48)
    5517	15 00 3b 00 00 00 00 00	if r0 == 0x0 goto +0x3b <LBB65_21>

000000000000ac70 <LBB65_7>
    5518	5f 96 00 00 00 00 00 00	r6 &= r9
    5519	bf 69 00 00 00 00 00 00	r9 = r6
    5520	15 06 01 00 00 00 00 00	if r6 == 0x0 goto +0x1 <LBB65_23>
    5521	05 00 d0 ff 00 00 00 00	goto -0x30 <LBB65_5>

000000000000ac90 <LBB65_23>
    5522	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
    5523	bf 61 00 00 00 00 00 00	r1 = r6
    5524	18 00 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r0 = -0x7f7f7f7f7f7f7f80 ll
    5526	5f 01 00 00 00 00 00 00	r1 &= r0
    5527	b7 02 00 00 01 00 00 00	r2 = 0x1
    5528	79 a5 a0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x60)
    5529	15 05 24 00 01 00 00 00	if r5 == 0x1 goto +0x24 <LBB65_13>
    5530	15 01 1d 00 00 00 00 00	if r1 == 0x0 goto +0x1d <LBB65_10>
    5531	bf 12 00 00 00 00 00 00	r2 = r1
    5532	07 02 00 00 ff ff ff ff	r2 += -0x1
    5533	bf 13 00 00 00 00 00 00	r3 = r1
    5534	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    5535	5f 23 00 00 00 00 00 00	r3 &= r2
    5536	bf 32 00 00 00 00 00 00	r2 = r3
    5537	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5538	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    5540	5f 52 00 00 00 00 00 00	r2 &= r5
    5541	1f 23 00 00 00 00 00 00	r3 -= r2
    5542	bf 35 00 00 00 00 00 00	r5 = r3
    5543	18 02 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r2 = 0x3333333333333333 ll
    5545	5f 25 00 00 00 00 00 00	r5 &= r2
    5546	77 03 00 00 02 00 00 00	r3 >>= 0x2
    5547	5f 23 00 00 00 00 00 00	r3 &= r2
    5548	0f 35 00 00 00 00 00 00	r5 += r3
    5549	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    5550	bf 52 00 00 00 00 00 00	r2 = r5
    5551	77 02 00 00 04 00 00 00	r2 >>= 0x4
    5552	0f 25 00 00 00 00 00 00	r5 += r2
    5553	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    5555	5f 25 00 00 00 00 00 00	r5 &= r2
    5556	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    5558	2f 25 00 00 00 00 00 00	r5 *= r2
    5559	77 05 00 00 3b 00 00 00	r5 >>= 0x3b

000000000000adc0 <LBB65_10>
    5560	b7 02 00 00 01 00 00 00	r2 = 0x1
    5561	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB65_12>
    5562	b7 02 00 00 00 00 00 00	r2 = 0x0

000000000000add8 <LBB65_12>
    5563	0f 75 00 00 00 00 00 00	r5 += r7
    5564	5f 45 00 00 00 00 00 00	r5 &= r4
    5565	7b 5a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r5

000000000000adf0 <LBB65_13>
    5566	67 06 00 00 01 00 00 00	r6 <<= 0x1
    5567	5f 61 00 00 00 00 00 00	r1 &= r6
    5568	79 a5 88 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x78)
    5569	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB65_14>
    5570	05 00 1d 00 00 00 00 00	goto +0x1d <LBB65_15>

000000000000ae18 <LBB65_14>
    5571	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    5572	07 01 00 00 08 00 00 00	r1 += 0x8
    5573	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    5574	0f 17 00 00 00 00 00 00	r7 += r1
    5575	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    5576	05 00 89 ff 00 00 00 00	goto -0x77 <LBB65_3>

000000000000ae48 <LBB65_21>
    5577	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)
    5578	0f 83 00 00 00 00 00 00	r3 += r8
    5579	79 31 f8 ff 00 00 00 00	r1 = *(u64 *)(r3 - 0x8)
    5580	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    5581	7b 12 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r1
    5582	79 31 f0 ff 00 00 00 00	r1 = *(u64 *)(r3 - 0x10)
    5583	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    5584	79 31 e8 ff 00 00 00 00	r1 = *(u64 *)(r3 - 0x18)
    5585	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    5586	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    5587	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
    5588	7b 13 f8 ff 00 00 00 00	*(u64 *)(r3 - 0x8) = r1
    5589	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    5590	7b 13 f0 ff 00 00 00 00	*(u64 *)(r3 - 0x10) = r1
    5591	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5592	7b 13 e8 ff 00 00 00 00	*(u64 *)(r3 - 0x18) = r1
    5593	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    5594	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5595	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB65_20>
    5596	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5597	b7 03 00 00 01 00 00 00	r3 = 0x1
    5598	85 10 00 00 d0 f8 ff ff	call -0x730 ; <__rust_dealloc>

000000000000aef8 <LBB65_20>
    5599	95 00 00 00 00 00 00 00	exit

000000000000af00 <LBB65_15>
    5600	bf 40 00 00 00 00 00 00	r0 = r4
    5601	bf 51 00 00 00 00 00 00	r1 = r5
    5602	79 a7 68 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x98)
    5603	0f 71 00 00 00 00 00 00	r1 += r7
    5604	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    5605	67 01 00 00 38 00 00 00	r1 <<= 0x38
    5606	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    5607	b7 06 00 00 00 00 00 00	r6 = 0x0
    5608	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
    5609	6d 16 24 00 00 00 00 00	if r6 s> r1 goto +0x24 <LBB65_19>
    5610	79 51 00 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x0)
    5611	18 02 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r2 = -0x7f7f7f7f7f7f7f80 ll
    5613	5f 21 00 00 00 00 00 00	r1 &= r2
    5614	15 01 1c 00 00 00 00 00	if r1 == 0x0 goto +0x1c <LBB65_18>
    5615	bf 12 00 00 00 00 00 00	r2 = r1
    5616	07 02 00 00 ff ff ff ff	r2 += -0x1
    5617	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    5618	5f 21 00 00 00 00 00 00	r1 &= r2
    5619	bf 12 00 00 00 00 00 00	r2 = r1
    5620	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5621	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    5623	5f 32 00 00 00 00 00 00	r2 &= r3
    5624	1f 21 00 00 00 00 00 00	r1 -= r2
    5625	18 02 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r2 = 0x3333333333333333 ll
    5627	bf 13 00 00 00 00 00 00	r3 = r1
    5628	5f 23 00 00 00 00 00 00	r3 &= r2
    5629	77 01 00 00 02 00 00 00	r1 >>= 0x2
    5630	5f 21 00 00 00 00 00 00	r1 &= r2
    5631	bf 37 00 00 00 00 00 00	r7 = r3
    5632	0f 17 00 00 00 00 00 00	r7 += r1
    5633	bf 71 00 00 00 00 00 00	r1 = r7
    5634	77 01 00 00 04 00 00 00	r1 >>= 0x4
    5635	0f 17 00 00 00 00 00 00	r7 += r1
    5636	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    5638	5f 17 00 00 00 00 00 00	r7 &= r1
    5639	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    5641	2f 17 00 00 00 00 00 00	r7 *= r1
    5642	77 07 00 00 3b 00 00 00	r7 >>= 0x3b

000000000000b058 <LBB65_18>
    5643	bf 51 00 00 00 00 00 00	r1 = r5
    5644	0f 71 00 00 00 00 00 00	r1 += r7
    5645	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)

000000000000b070 <LBB65_19>
    5646	79 42 10 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x10)
    5647	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    5648	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    5649	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    5650	79 42 00 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x0)
    5651	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    5652	79 a3 78 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x88)
    5653	79 32 00 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x0)
    5654	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5655	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    5656	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    5657	79 32 10 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x10)
    5658	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    5659	57 01 00 00 01 00 00 00	r1 &= 0x1
    5660	79 a3 60 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xa0)
    5661	79 32 10 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x10)
    5662	1f 12 00 00 00 00 00 00	r2 -= r1
    5663	7b 23 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r2
    5664	bf 51 00 00 00 00 00 00	r1 = r5
    5665	0f 71 00 00 00 00 00 00	r1 += r7
    5666	79 a2 58 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xa8)
    5667	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r2
    5668	bf 71 00 00 00 00 00 00	r1 = r7
    5669	07 01 00 00 f8 ff ff ff	r1 += -0x8
    5670	5f 10 00 00 00 00 00 00	r0 &= r1
    5671	0f 50 00 00 00 00 00 00	r0 += r5
    5672	73 20 08 00 00 00 00 00	*(u8 *)(r0 + 0x8) = r2
    5673	79 31 18 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x18)
    5674	07 01 00 00 01 00 00 00	r1 += 0x1
    5675	7b 13 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r1
    5676	87 07 00 00 00 00 00 00	r7 = -r7
    5677	27 07 00 00 30 00 00 00	r7 *= 0x30
    5678	0f 75 00 00 00 00 00 00	r5 += r7
    5679	07 05 00 00 d0 ff ff ff	r5 += -0x30
    5680	bf a2 00 00 00 00 00 00	r2 = r10
    5681	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5682	bf 51 00 00 00 00 00 00	r1 = r5
    5683	b7 03 00 00 30 00 00 00	r3 = 0x30
    5684	85 10 00 00 23 1a 00 00	call 0x1a23 ; <memcpy>
    5685	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    5686	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    5687	05 00 a7 ff 00 00 00 00	goto -0x59 <LBB65_20>

000000000000b1c0 <hashbrown::raw::RawTable<T,A>::reserve_rehash>
    5688	bf 38 00 00 00 00 00 00	r8 = r3
    5689	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    5690	bf 34 00 00 00 00 00 00	r4 = r3
    5691	0f 24 00 00 00 00 00 00	r4 += r2
    5692	b7 02 00 00 01 00 00 00	r2 = 0x1
    5693	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB66_2>
    5694	b7 02 00 00 00 00 00 00	r2 = 0x0

000000000000b1f8 <LBB66_2>
    5695	55 02 06 00 01 00 00 00	if r2 != 0x1 goto +0x6 <LBB66_4>
    5696	bf a1 00 00 00 00 00 00	r1 = r10
    5697	07 01 00 00 a0 ff ff ff	r1 += -0x60
    5698	b7 02 00 00 01 00 00 00	r2 = 0x1
    5699	85 10 00 00 80 0a 00 00	call 0xa80 ; <hashbrown::raw::Fallibility::capacity_overflow>
    5700	79 a8 a0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x60)
    5701	05 00 b7 02 00 00 00 00	goto +0x2b7 <LBB66_81>

000000000000b230 <LBB66_4>
    5702	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    5703	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    5704	79 16 08 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x8)
    5705	bf 69 00 00 00 00 00 00	r9 = r6
    5706	07 09 00 00 01 00 00 00	r9 += 0x1
    5707	bf 92 00 00 00 00 00 00	r2 = r9
    5708	77 02 00 00 03 00 00 00	r2 >>= 0x3
    5709	b7 03 00 00 08 00 00 00	r3 = 0x8
    5710	bf 61 00 00 00 00 00 00	r1 = r6
    5711	2d 63 02 00 00 00 00 00	if r3 > r6 goto +0x2 <LBB66_6>
    5712	bf 21 00 00 00 00 00 00	r1 = r2
    5713	27 01 00 00 07 00 00 00	r1 *= 0x7

000000000000b290 <LBB66_6>
    5714	bf 13 00 00 00 00 00 00	r3 = r1
    5715	77 03 00 00 01 00 00 00	r3 >>= 0x1
    5716	7b 6a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r6
    5717	3d 43 3e 00 00 00 00 00	if r3 >= r4 goto +0x3e <LBB66_44>
    5718	07 01 00 00 01 00 00 00	r1 += 0x1
    5719	2d 14 01 00 00 00 00 00	if r4 > r1 goto +0x1 <LBB66_9>
    5720	bf 14 00 00 00 00 00 00	r4 = r1

000000000000b2c8 <LBB66_9>
    5721	b7 02 00 00 08 00 00 00	r2 = 0x8
    5722	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8
    5723	2d 42 6f 02 00 00 00 00	if r2 > r4 goto +0x26f <LBB66_11>
    5724	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 20	r2 = 0x2000000000000000 ll
    5726	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB66_13>
    5727	05 00 74 02 00 00 00 00	goto +0x274 <LBB66_15>

000000000000b300 <LBB66_13>
    5728	67 04 00 00 03 00 00 00	r4 <<= 0x3
    5729	b7 07 00 00 01 00 00 00	r7 = 0x1
    5730	b7 02 00 00 0e 00 00 00	r2 = 0xe
    5731	2d 42 79 02 00 00 00 00	if r2 > r4 goto +0x279 <LBB66_16>
    5732	37 04 00 00 07 00 00 00	r4 /= 0x7
    5733	07 04 00 00 ff ff ff ff	r4 += -0x1
    5734	bf 42 00 00 00 00 00 00	r2 = r4
    5735	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5736	4f 24 00 00 00 00 00 00	r4 |= r2
    5737	bf 42 00 00 00 00 00 00	r2 = r4
    5738	77 02 00 00 02 00 00 00	r2 >>= 0x2
    5739	4f 24 00 00 00 00 00 00	r4 |= r2
    5740	bf 42 00 00 00 00 00 00	r2 = r4
    5741	77 02 00 00 04 00 00 00	r2 >>= 0x4
    5742	4f 24 00 00 00 00 00 00	r4 |= r2
    5743	bf 42 00 00 00 00 00 00	r2 = r4
    5744	77 02 00 00 08 00 00 00	r2 >>= 0x8
    5745	4f 24 00 00 00 00 00 00	r4 |= r2
    5746	bf 42 00 00 00 00 00 00	r2 = r4
    5747	77 02 00 00 10 00 00 00	r2 >>= 0x10
    5748	4f 24 00 00 00 00 00 00	r4 |= r2
    5749	bf 42 00 00 00 00 00 00	r2 = r4
    5750	77 02 00 00 20 00 00 00	r2 >>= 0x20
    5751	4f 24 00 00 00 00 00 00	r4 |= r2
    5752	a7 04 00 00 ff ff ff ff	r4 ^= -0x1
    5753	18 02 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r2 = 0x5555555555555555 ll
    5755	bf 43 00 00 00 00 00 00	r3 = r4
    5756	77 03 00 00 01 00 00 00	r3 >>= 0x1
    5757	5f 23 00 00 00 00 00 00	r3 &= r2
    5758	1f 34 00 00 00 00 00 00	r4 -= r3
    5759	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    5761	bf 42 00 00 00 00 00 00	r2 = r4
    5762	5f 32 00 00 00 00 00 00	r2 &= r3
    5763	77 04 00 00 02 00 00 00	r4 >>= 0x2
    5764	5f 34 00 00 00 00 00 00	r4 &= r3
    5765	0f 42 00 00 00 00 00 00	r2 += r4
    5766	bf 21 00 00 00 00 00 00	r1 = r2
    5767	77 01 00 00 04 00 00 00	r1 >>= 0x4
    5768	0f 12 00 00 00 00 00 00	r2 += r1
    5769	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    5771	5f 12 00 00 00 00 00 00	r2 &= r1
    5772	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    5774	2f 12 00 00 00 00 00 00	r2 *= r1
    5775	77 02 00 00 38 00 00 00	r2 >>= 0x38
    5776	b7 07 00 00 ff ff ff ff	r7 = -0x1
    5777	7f 27 00 00 00 00 00 00	r7 >>= r2
    5778	07 07 00 00 01 00 00 00	r7 += 0x1
    5779	05 00 49 02 00 00 00 00	goto +0x249 <LBB66_16>

000000000000b4a0 <LBB66_44>
    5780	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    5781	bf 93 00 00 00 00 00 00	r3 = r9
    5782	57 03 00 00 07 00 00 00	r3 &= 0x7
    5783	b7 01 00 00 01 00 00 00	r1 = 0x1
    5784	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB66_46>
    5785	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000b4d0 <LBB66_46>
    5786	0f 12 00 00 00 00 00 00	r2 += r1
    5787	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    5788	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    5789	15 02 11 00 00 00 00 00	if r2 == 0x0 goto +0x11 <LBB66_82>
    5790	18 01 00 00 7f 7f 7f 7f 00 00 00 00 7f 7f 7f 7f	r1 = 0x7f7f7f7f7f7f7f7f ll
    5792	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    5794	bf 74 00 00 00 00 00 00	r4 = r7

000000000000b518 <LBB66_48>
    5795	79 45 00 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x0)
    5796	bf 50 00 00 00 00 00 00	r0 = r5
    5797	4f 10 00 00 00 00 00 00	r0 |= r1
    5798	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    5799	77 05 00 00 07 00 00 00	r5 >>= 0x7
    5800	5f 35 00 00 00 00 00 00	r5 &= r3
    5801	0f 05 00 00 00 00 00 00	r5 += r0
    5802	7b 54 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r5
    5803	07 04 00 00 08 00 00 00	r4 += 0x8
    5804	07 02 00 00 ff ff ff ff	r2 += -0x1
    5805	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB66_82>
    5806	05 00 f4 ff 00 00 00 00	goto -0xc <LBB66_48>

000000000000b578 <LBB66_82>
    5807	b7 01 00 00 08 00 00 00	r1 = 0x8
    5808	2d 91 01 00 00 00 00 00	if r1 > r9 goto +0x1 <LBB66_50>
    5809	05 00 1d 02 00 00 00 00	goto +0x21d <LBB66_49>

000000000000b590 <LBB66_50>
    5810	bf 71 00 00 00 00 00 00	r1 = r7
    5811	07 01 00 00 08 00 00 00	r1 += 0x8
    5812	bf 72 00 00 00 00 00 00	r2 = r7
    5813	bf 93 00 00 00 00 00 00	r3 = r9
    5814	85 10 00 00 c3 19 00 00	call 0x19c3 ; <memmove>
    5815	15 09 27 00 00 00 00 00	if r9 == 0x0 goto +0x27 <LBB66_80>

000000000000b5c0 <LBB66_51>
    5816	79 82 08 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x8)
    5817	18 01 00 00 73 65 74 79 00 00 00 00 62 64 65 74	r1 = 0x7465646279746573 ll
    5819	bf 23 00 00 00 00 00 00	r3 = r2
    5820	af 13 00 00 00 00 00 00	r3 ^= r1
    5821	7b 3a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r3
    5822	18 01 00 00 6d 6f 64 6e 00 00 00 00 61 72 6f 64	r1 = 0x646f72616e646f6d ll
    5824	af 12 00 00 00 00 00 00	r2 ^= r1
    5825	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
    5826	79 82 00 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x0)
    5827	18 01 00 00 61 72 65 6e 00 00 00 00 65 67 79 6c	r1 = 0x6c7967656e657261 ll
    5829	bf 23 00 00 00 00 00 00	r3 = r2
    5830	af 13 00 00 00 00 00 00	r3 ^= r1
    5831	7b 3a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r3
    5832	18 01 00 00 75 65 73 70 00 00 00 00 65 6d 6f 73	r1 = 0x736f6d6570736575 ll
    5834	af 12 00 00 00 00 00 00	r2 ^= r1
    5835	7b 2a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r2
    5836	bf 71 00 00 00 00 00 00	r1 = r7
    5837	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5838	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    5839	bf 79 00 00 00 00 00 00	r9 = r7
    5840	b7 01 00 00 00 00 00 00	r1 = 0x0
    5841	7b 7a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r7
    5842	05 00 14 00 00 00 00 00	goto +0x14 <LBB66_52>

000000000000b698 <LBB66_83>
    5843	77 02 00 00 39 00 00 00	r2 >>= 0x39
    5844	79 a1 30 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xd0)
    5845	73 21 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r2
    5846	bf 81 00 00 00 00 00 00	r1 = r8
    5847	07 01 00 00 f8 ff ff ff	r1 += -0x8
    5848	5f 61 00 00 00 00 00 00	r1 &= r6
    5849	0f 71 00 00 00 00 00 00	r1 += r7
    5850	73 21 08 00 00 00 00 00	*(u8 *)(r1 + 0x8) = r2

000000000000b6d8 <LBB66_79>
    5851	bf 81 00 00 00 00 00 00	r1 = r8
    5852	07 01 00 00 01 00 00 00	r1 += 0x1
    5853	07 09 00 00 d0 ff ff ff	r9 += -0x30
    5854	5d 68 08 00 00 00 00 00	if r8 != r6 goto +0x8 <LBB66_52>

000000000000b6f8 <LBB66_80>
    5855	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    5856	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
    5857	1f 12 00 00 00 00 00 00	r2 -= r1
    5858	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    5859	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    5860	18 08 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r8 = -0x7fffffffffffffff ll
    5862	05 00 16 02 00 00 00 00	goto +0x216 <LBB66_81>

000000000000b738 <LBB66_52>
    5863	bf 18 00 00 00 00 00 00	r8 = r1
    5864	bf 72 00 00 00 00 00 00	r2 = r7
    5865	0f 82 00 00 00 00 00 00	r2 += r8
    5866	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    5867	55 01 ef ff 80 00 00 00	if r1 != 0x80 goto -0x11 <LBB66_79>
    5868	7b 2a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r2
    5869	bf 81 00 00 00 00 00 00	r1 = r8
    5870	87 01 00 00 00 00 00 00	r1 = -r1
    5871	27 01 00 00 30 00 00 00	r1 *= 0x30
    5872	79 a2 20 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xe0)
    5873	0f 12 00 00 00 00 00 00	r2 += r1
    5874	7b 2a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r2
    5875	bf 81 00 00 00 00 00 00	r1 = r8
    5876	27 01 00 00 d0 ff ff ff	r1 *= -0x30
    5877	0f 71 00 00 00 00 00 00	r1 += r7
    5878	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5879	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    5880	7b 9a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r9
    5881	7b 8a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r8

000000000000b7d0 <LBB66_54>
    5882	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xb8)
    5883	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    5884	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    5885	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
    5886	bf 12 00 00 00 00 00 00	r2 = r1
    5887	57 02 00 00 07 00 00 00	r2 &= 0x7
    5888	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    5889	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    5890	bf 10 00 00 00 00 00 00	r0 = r1
    5891	57 00 00 00 f8 ff ff ff	r0 &= -0x8
    5892	79 a5 68 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x98)
    5893	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
    5894	79 a8 58 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xa8)
    5895	79 a1 60 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xa0)
    5896	b7 07 00 00 00 00 00 00	r7 = 0x0
    5897	15 00 3b 00 00 00 00 00	if r0 == 0x0 goto +0x3b <LBB66_57>
    5898	79 a9 58 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xa8)
    5899	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
    5900	79 a5 68 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x98)
    5901	79 a3 60 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xa0)

000000000000b870 <LBB66_56>
    5902	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    5903	0f 43 00 00 00 00 00 00	r3 += r4
    5904	bf 41 00 00 00 00 00 00	r1 = r4
    5905	77 01 00 00 33 00 00 00	r1 >>= 0x33
    5906	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    5907	4f 14 00 00 00 00 00 00	r4 |= r1
    5908	bf 36 00 00 00 00 00 00	r6 = r3
    5909	af 46 00 00 00 00 00 00	r6 ^= r4
    5910	bf 64 00 00 00 00 00 00	r4 = r6
    5911	77 04 00 00 2f 00 00 00	r4 >>= 0x2f
    5912	bf 61 00 00 00 00 00 00	r1 = r6
    5913	67 01 00 00 11 00 00 00	r1 <<= 0x11
    5914	4f 41 00 00 00 00 00 00	r1 |= r4
    5915	bf 34 00 00 00 00 00 00	r4 = r3
    5916	77 04 00 00 20 00 00 00	r4 >>= 0x20
    5917	67 03 00 00 20 00 00 00	r3 <<= 0x20
    5918	4f 43 00 00 00 00 00 00	r3 |= r4
    5919	bf 24 00 00 00 00 00 00	r4 = r2
    5920	0f 74 00 00 00 00 00 00	r4 += r7
    5921	79 48 00 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x0)
    5922	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8
    5923	af 58 00 00 00 00 00 00	r8 ^= r5
    5924	bf 84 00 00 00 00 00 00	r4 = r8
    5925	77 04 00 00 30 00 00 00	r4 >>= 0x30
    5926	bf 72 00 00 00 00 00 00	r2 = r7
    5927	bf 07 00 00 00 00 00 00	r7 = r0
    5928	bf 80 00 00 00 00 00 00	r0 = r8
    5929	67 00 00 00 10 00 00 00	r0 <<= 0x10
    5930	4f 40 00 00 00 00 00 00	r0 |= r4
    5931	0f 98 00 00 00 00 00 00	r8 += r9
    5932	bf 85 00 00 00 00 00 00	r5 = r8
    5933	af 05 00 00 00 00 00 00	r5 ^= r0
    5934	bf 70 00 00 00 00 00 00	r0 = r7
    5935	bf 27 00 00 00 00 00 00	r7 = r2
    5936	0f 68 00 00 00 00 00 00	r8 += r6
    5937	bf 84 00 00 00 00 00 00	r4 = r8
    5938	af 14 00 00 00 00 00 00	r4 ^= r1
    5939	bf 81 00 00 00 00 00 00	r1 = r8
    5940	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5941	67 08 00 00 20 00 00 00	r8 <<= 0x20
    5942	4f 18 00 00 00 00 00 00	r8 |= r1
    5943	bf 51 00 00 00 00 00 00	r1 = r5
    5944	0f 31 00 00 00 00 00 00	r1 += r3
    5945	bf 52 00 00 00 00 00 00	r2 = r5
    5946	77 02 00 00 2b 00 00 00	r2 >>= 0x2b
    5947	67 05 00 00 15 00 00 00	r5 <<= 0x15
    5948	4f 25 00 00 00 00 00 00	r5 |= r2
    5949	af 15 00 00 00 00 00 00	r5 ^= r1
    5950	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
    5951	af 21 00 00 00 00 00 00	r1 ^= r2
    5952	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    5953	07 07 00 00 08 00 00 00	r7 += 0x8
    5954	bf 89 00 00 00 00 00 00	r9 = r8
    5955	bf 13 00 00 00 00 00 00	r3 = r1
    5956	2d 70 c9 ff 00 00 00 00	if r0 > r7 goto -0x37 <LBB66_56>

000000000000ba28 <LBB66_57>
    5957	b7 02 00 00 00 00 00 00	r2 = 0x0
    5958	b7 00 00 00 00 00 00 00	r0 = 0x0
    5959	79 a6 80 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x80)
    5960	25 06 21 00 03 00 00 00	if r6 > 0x3 goto +0x21 <LBB66_59>

000000000000ba48 <LBB66_58>
    5961	bf 23 00 00 00 00 00 00	r3 = r2
    5962	47 03 00 00 01 00 00 00	r3 |= 0x1
    5963	2d 36 01 00 00 00 00 00	if r6 > r3 goto +0x1 <LBB66_60>
    5964	05 00 0c 00 00 00 00 00	goto +0xc <LBB66_61>

000000000000ba68 <LBB66_60>
    5965	bf 23 00 00 00 00 00 00	r3 = r2
    5966	0f 73 00 00 00 00 00 00	r3 += r7
    5967	79 a6 98 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x68)
    5968	0f 36 00 00 00 00 00 00	r6 += r3
    5969	69 63 00 00 00 00 00 00	r3 = *(u16 *)(r6 + 0x0)
    5970	bf 26 00 00 00 00 00 00	r6 = r2
    5971	67 06 00 00 03 00 00 00	r6 <<= 0x3
    5972	6f 63 00 00 00 00 00 00	r3 <<= r6
    5973	79 a6 80 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x80)
    5974	4f 03 00 00 00 00 00 00	r3 |= r0
    5975	47 02 00 00 02 00 00 00	r2 |= 0x2
    5976	bf 30 00 00 00 00 00 00	r0 = r3

000000000000bac8 <LBB66_61>
    5977	2d 26 01 00 00 00 00 00	if r6 > r2 goto +0x1 <LBB66_62>
    5978	05 00 14 00 00 00 00 00	goto +0x14 <LBB66_63>

000000000000bad8 <LBB66_62>
    5979	bf 23 00 00 00 00 00 00	r3 = r2
    5980	0f 73 00 00 00 00 00 00	r3 += r7
    5981	79 a7 98 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x68)
    5982	0f 37 00 00 00 00 00 00	r7 += r3
    5983	71 73 00 00 00 00 00 00	r3 = *(u8 *)(r7 + 0x0)
    5984	67 02 00 00 03 00 00 00	r2 <<= 0x3
    5985	6f 23 00 00 00 00 00 00	r3 <<= r2
    5986	4f 03 00 00 00 00 00 00	r3 |= r0
    5987	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    5988	07 02 00 00 01 00 00 00	r2 += 0x1
    5989	7b 2a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r2
    5990	bf 30 00 00 00 00 00 00	r0 = r3
    5991	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    5992	79 a9 40 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xc0)
    5993	05 00 0c 00 00 00 00 00	goto +0xc <LBB66_64>

000000000000bb50 <LBB66_59>
    5994	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    5995	0f 73 00 00 00 00 00 00	r3 += r7
    5996	b7 02 00 00 04 00 00 00	r2 = 0x4
    5997	61 30 00 00 00 00 00 00	r0 = *(u32 *)(r3 + 0x0)
    5998	05 00 da ff 00 00 00 00	goto -0x26 <LBB66_58>

000000000000bb78 <LBB66_63>
    5999	b7 02 00 00 ff 00 00 00	r2 = 0xff
    6000	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)
    6001	07 03 00 00 01 00 00 00	r3 += 0x1
    6002	7b 3a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r3
    6003	79 a3 78 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x88)
    6004	79 a9 40 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xc0)
    6005	15 06 33 00 00 00 00 00	if r6 == 0x0 goto +0x33 <LBB66_66>

000000000000bbb0 <LBB66_64>
    6006	bf 62 00 00 00 00 00 00	r2 = r6
    6007	67 02 00 00 03 00 00 00	r2 <<= 0x3
    6008	b7 03 00 00 ff 00 00 00	r3 = 0xff
    6009	6f 23 00 00 00 00 00 00	r3 <<= r2
    6010	4f 30 00 00 00 00 00 00	r0 |= r3
    6011	bf 02 00 00 00 00 00 00	r2 = r0
    6012	55 06 2c 00 07 00 00 00	if r6 != 0x7 goto +0x2c <LBB66_66>
    6013	0f 41 00 00 00 00 00 00	r1 += r4
    6014	bf 12 00 00 00 00 00 00	r2 = r1
    6015	77 02 00 00 20 00 00 00	r2 >>= 0x20
    6016	bf 07 00 00 00 00 00 00	r7 = r0
    6017	bf 10 00 00 00 00 00 00	r0 = r1
    6018	67 00 00 00 20 00 00 00	r0 <<= 0x20
    6019	4f 20 00 00 00 00 00 00	r0 |= r2
    6020	bf 73 00 00 00 00 00 00	r3 = r7
    6021	af 53 00 00 00 00 00 00	r3 ^= r5
    6022	bf 32 00 00 00 00 00 00	r2 = r3
    6023	77 02 00 00 30 00 00 00	r2 >>= 0x30
    6024	bf 36 00 00 00 00 00 00	r6 = r3
    6025	67 06 00 00 10 00 00 00	r6 <<= 0x10
    6026	4f 26 00 00 00 00 00 00	r6 |= r2
    6027	0f 83 00 00 00 00 00 00	r3 += r8
    6028	bf 35 00 00 00 00 00 00	r5 = r3
    6029	af 65 00 00 00 00 00 00	r5 ^= r6
    6030	bf 56 00 00 00 00 00 00	r6 = r5
    6031	0f 06 00 00 00 00 00 00	r6 += r0
    6032	bf 52 00 00 00 00 00 00	r2 = r5
    6033	77 02 00 00 2b 00 00 00	r2 >>= 0x2b
    6034	67 05 00 00 15 00 00 00	r5 <<= 0x15
    6035	4f 25 00 00 00 00 00 00	r5 |= r2
    6036	bf 42 00 00 00 00 00 00	r2 = r4
    6037	77 02 00 00 33 00 00 00	r2 >>= 0x33
    6038	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    6039	4f 24 00 00 00 00 00 00	r4 |= r2
    6040	af 41 00 00 00 00 00 00	r1 ^= r4
    6041	af 65 00 00 00 00 00 00	r5 ^= r6
    6042	af 76 00 00 00 00 00 00	r6 ^= r7
    6043	0f 13 00 00 00 00 00 00	r3 += r1
    6044	bf 32 00 00 00 00 00 00	r2 = r3
    6045	77 02 00 00 20 00 00 00	r2 >>= 0x20
    6046	bf 38 00 00 00 00 00 00	r8 = r3
    6047	67 08 00 00 20 00 00 00	r8 <<= 0x20
    6048	4f 28 00 00 00 00 00 00	r8 |= r2
    6049	bf 12 00 00 00 00 00 00	r2 = r1
    6050	77 02 00 00 2f 00 00 00	r2 >>= 0x2f
    6051	67 01 00 00 11 00 00 00	r1 <<= 0x11
    6052	4f 21 00 00 00 00 00 00	r1 |= r2
    6053	af 13 00 00 00 00 00 00	r3 ^= r1
    6054	b7 02 00 00 00 00 00 00	r2 = 0x0
    6055	bf 34 00 00 00 00 00 00	r4 = r3
    6056	bf 61 00 00 00 00 00 00	r1 = r6

000000000000bd48 <LBB66_66>
    6057	0f 41 00 00 00 00 00 00	r1 += r4
    6058	bf 43 00 00 00 00 00 00	r3 = r4
    6059	77 03 00 00 33 00 00 00	r3 >>= 0x33
    6060	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    6061	4f 34 00 00 00 00 00 00	r4 |= r3
    6062	bf 16 00 00 00 00 00 00	r6 = r1
    6063	af 46 00 00 00 00 00 00	r6 ^= r4
    6064	bf 63 00 00 00 00 00 00	r3 = r6
    6065	77 03 00 00 2f 00 00 00	r3 >>= 0x2f
    6066	bf 60 00 00 00 00 00 00	r0 = r6
    6067	67 00 00 00 11 00 00 00	r0 <<= 0x11
    6068	4f 30 00 00 00 00 00 00	r0 |= r3
    6069	79 a7 88 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x78)
    6070	67 07 00 00 38 00 00 00	r7 <<= 0x38
    6071	4f 27 00 00 00 00 00 00	r7 |= r2
    6072	bf 73 00 00 00 00 00 00	r3 = r7
    6073	af 53 00 00 00 00 00 00	r3 ^= r5
    6074	0f 38 00 00 00 00 00 00	r8 += r3
    6075	0f 86 00 00 00 00 00 00	r6 += r8
    6076	bf 64 00 00 00 00 00 00	r4 = r6
    6077	af 04 00 00 00 00 00 00	r4 ^= r0
    6078	bf 45 00 00 00 00 00 00	r5 = r4
    6079	77 05 00 00 33 00 00 00	r5 >>= 0x33
    6080	bf 42 00 00 00 00 00 00	r2 = r4
    6081	67 02 00 00 0d 00 00 00	r2 <<= 0xd
    6082	4f 52 00 00 00 00 00 00	r2 |= r5
    6083	bf 15 00 00 00 00 00 00	r5 = r1
    6084	77 05 00 00 20 00 00 00	r5 >>= 0x20
    6085	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6086	4f 51 00 00 00 00 00 00	r1 |= r5
    6087	bf 35 00 00 00 00 00 00	r5 = r3
    6088	77 05 00 00 30 00 00 00	r5 >>= 0x30
    6089	67 03 00 00 10 00 00 00	r3 <<= 0x10
    6090	4f 53 00 00 00 00 00 00	r3 |= r5
    6091	af 38 00 00 00 00 00 00	r8 ^= r3
    6092	0f 81 00 00 00 00 00 00	r1 += r8
    6093	bf 13 00 00 00 00 00 00	r3 = r1
    6094	af 73 00 00 00 00 00 00	r3 ^= r7
    6095	0f 43 00 00 00 00 00 00	r3 += r4
    6096	bf 84 00 00 00 00 00 00	r4 = r8
    6097	77 04 00 00 2b 00 00 00	r4 >>= 0x2b
    6098	67 08 00 00 15 00 00 00	r8 <<= 0x15
    6099	4f 48 00 00 00 00 00 00	r8 |= r4
    6100	bf 35 00 00 00 00 00 00	r5 = r3
    6101	af 25 00 00 00 00 00 00	r5 ^= r2
    6102	bf 52 00 00 00 00 00 00	r2 = r5
    6103	77 02 00 00 2f 00 00 00	r2 >>= 0x2f
    6104	bf 54 00 00 00 00 00 00	r4 = r5
    6105	67 04 00 00 11 00 00 00	r4 <<= 0x11
    6106	4f 24 00 00 00 00 00 00	r4 |= r2
    6107	af 81 00 00 00 00 00 00	r1 ^= r8
    6108	bf 62 00 00 00 00 00 00	r2 = r6
    6109	77 02 00 00 20 00 00 00	r2 >>= 0x20
    6110	67 06 00 00 20 00 00 00	r6 <<= 0x20
    6111	4f 26 00 00 00 00 00 00	r6 |= r2
    6112	a7 06 00 00 ff 00 00 00	r6 ^= 0xff
    6113	0f 16 00 00 00 00 00 00	r6 += r1
    6114	0f 65 00 00 00 00 00 00	r5 += r6
    6115	bf 52 00 00 00 00 00 00	r2 = r5
    6116	af 42 00 00 00 00 00 00	r2 ^= r4
    6117	bf 20 00 00 00 00 00 00	r0 = r2
    6118	77 00 00 00 33 00 00 00	r0 >>= 0x33
    6119	bf 24 00 00 00 00 00 00	r4 = r2
    6120	67 04 00 00 0d 00 00 00	r4 <<= 0xd
    6121	4f 04 00 00 00 00 00 00	r4 |= r0
    6122	bf 30 00 00 00 00 00 00	r0 = r3
    6123	77 00 00 00 20 00 00 00	r0 >>= 0x20
    6124	67 03 00 00 20 00 00 00	r3 <<= 0x20
    6125	4f 03 00 00 00 00 00 00	r3 |= r0
    6126	bf 10 00 00 00 00 00 00	r0 = r1
    6127	77 00 00 00 30 00 00 00	r0 >>= 0x30
    6128	67 01 00 00 10 00 00 00	r1 <<= 0x10
    6129	4f 01 00 00 00 00 00 00	r1 |= r0
    6130	af 16 00 00 00 00 00 00	r6 ^= r1
    6131	bf 60 00 00 00 00 00 00	r0 = r6
    6132	0f 30 00 00 00 00 00 00	r0 += r3
    6133	0f 02 00 00 00 00 00 00	r2 += r0
    6134	af 24 00 00 00 00 00 00	r4 ^= r2
    6135	bf 43 00 00 00 00 00 00	r3 = r4
    6136	77 03 00 00 2f 00 00 00	r3 >>= 0x2f
    6137	bf 41 00 00 00 00 00 00	r1 = r4
    6138	67 01 00 00 11 00 00 00	r1 <<= 0x11
    6139	4f 31 00 00 00 00 00 00	r1 |= r3
    6140	bf 63 00 00 00 00 00 00	r3 = r6
    6141	77 03 00 00 2b 00 00 00	r3 >>= 0x2b
    6142	67 06 00 00 15 00 00 00	r6 <<= 0x15
    6143	4f 36 00 00 00 00 00 00	r6 |= r3
    6144	af 06 00 00 00 00 00 00	r6 ^= r0
    6145	bf 53 00 00 00 00 00 00	r3 = r5
    6146	77 03 00 00 20 00 00 00	r3 >>= 0x20
    6147	67 05 00 00 20 00 00 00	r5 <<= 0x20
    6148	4f 35 00 00 00 00 00 00	r5 |= r3
    6149	bf 60 00 00 00 00 00 00	r0 = r6
    6150	0f 50 00 00 00 00 00 00	r0 += r5
    6151	0f 04 00 00 00 00 00 00	r4 += r0
    6152	af 41 00 00 00 00 00 00	r1 ^= r4
    6153	bf 15 00 00 00 00 00 00	r5 = r1
    6154	77 05 00 00 33 00 00 00	r5 >>= 0x33
    6155	bf 13 00 00 00 00 00 00	r3 = r1
    6156	67 03 00 00 0d 00 00 00	r3 <<= 0xd
    6157	4f 53 00 00 00 00 00 00	r3 |= r5
    6158	bf 25 00 00 00 00 00 00	r5 = r2
    6159	77 05 00 00 20 00 00 00	r5 >>= 0x20
    6160	67 02 00 00 20 00 00 00	r2 <<= 0x20
    6161	4f 52 00 00 00 00 00 00	r2 |= r5
    6162	bf 65 00 00 00 00 00 00	r5 = r6
    6163	77 05 00 00 30 00 00 00	r5 >>= 0x30
    6164	67 06 00 00 10 00 00 00	r6 <<= 0x10
    6165	4f 56 00 00 00 00 00 00	r6 |= r5
    6166	af 06 00 00 00 00 00 00	r6 ^= r0
    6167	bf 65 00 00 00 00 00 00	r5 = r6
    6168	0f 25 00 00 00 00 00 00	r5 += r2
    6169	0f 51 00 00 00 00 00 00	r1 += r5
    6170	af 13 00 00 00 00 00 00	r3 ^= r1
    6171	bf 61 00 00 00 00 00 00	r1 = r6
    6172	77 01 00 00 2b 00 00 00	r1 >>= 0x2b
    6173	67 06 00 00 15 00 00 00	r6 <<= 0x15
    6174	4f 16 00 00 00 00 00 00	r6 |= r1
    6175	af 56 00 00 00 00 00 00	r6 ^= r5
    6176	bf 31 00 00 00 00 00 00	r1 = r3
    6177	77 01 00 00 2f 00 00 00	r1 >>= 0x2f
    6178	bf 32 00 00 00 00 00 00	r2 = r3
    6179	67 02 00 00 11 00 00 00	r2 <<= 0x11
    6180	4f 12 00 00 00 00 00 00	r2 |= r1
    6181	bf 65 00 00 00 00 00 00	r5 = r6
    6182	77 05 00 00 30 00 00 00	r5 >>= 0x30
    6183	bf 61 00 00 00 00 00 00	r1 = r6
    6184	67 01 00 00 10 00 00 00	r1 <<= 0x10
    6185	4f 51 00 00 00 00 00 00	r1 |= r5
    6186	bf 45 00 00 00 00 00 00	r5 = r4
    6187	77 05 00 00 20 00 00 00	r5 >>= 0x20
    6188	67 04 00 00 20 00 00 00	r4 <<= 0x20
    6189	4f 54 00 00 00 00 00 00	r4 |= r5
    6190	0f 46 00 00 00 00 00 00	r6 += r4
    6191	af 61 00 00 00 00 00 00	r1 ^= r6
    6192	bf 14 00 00 00 00 00 00	r4 = r1
    6193	77 04 00 00 2b 00 00 00	r4 >>= 0x2b
    6194	67 01 00 00 15 00 00 00	r1 <<= 0x15
    6195	4f 41 00 00 00 00 00 00	r1 |= r4
    6196	af 12 00 00 00 00 00 00	r2 ^= r1
    6197	0f 63 00 00 00 00 00 00	r3 += r6
    6198	bf 31 00 00 00 00 00 00	r1 = r3
    6199	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6200	bf 34 00 00 00 00 00 00	r4 = r3
    6201	67 04 00 00 20 00 00 00	r4 <<= 0x20
    6202	4f 14 00 00 00 00 00 00	r4 |= r1
    6203	af 42 00 00 00 00 00 00	r2 ^= r4
    6204	af 32 00 00 00 00 00 00	r2 ^= r3
    6205	bf 23 00 00 00 00 00 00	r3 = r2
    6206	79 a6 38 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xc8)
    6207	5f 63 00 00 00 00 00 00	r3 &= r6
    6208	79 a7 78 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x88)
    6209	bf 71 00 00 00 00 00 00	r1 = r7
    6210	0f 31 00 00 00 00 00 00	r1 += r3
    6211	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    6212	18 00 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r0 = -0x7f7f7f7f7f7f7f80 ll
    6214	5f 05 00 00 00 00 00 00	r5 &= r0
    6215	bf 34 00 00 00 00 00 00	r4 = r3
    6216	55 05 0a 00 00 00 00 00	if r5 != 0x0 goto +0xa <LBB66_69>
    6217	b7 01 00 00 08 00 00 00	r1 = 0x8
    6218	bf 34 00 00 00 00 00 00	r4 = r3

000000000000c258 <LBB66_68>
    6219	0f 14 00 00 00 00 00 00	r4 += r1
    6220	5f 64 00 00 00 00 00 00	r4 &= r6
    6221	bf 75 00 00 00 00 00 00	r5 = r7
    6222	0f 45 00 00 00 00 00 00	r5 += r4
    6223	79 55 00 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x0)
    6224	5f 05 00 00 00 00 00 00	r5 &= r0
    6225	07 01 00 00 08 00 00 00	r1 += 0x8
    6226	15 05 f8 ff 00 00 00 00	if r5 == 0x0 goto -0x8 <LBB66_68>

000000000000c298 <LBB66_69>
    6227	bf 51 00 00 00 00 00 00	r1 = r5
    6228	07 01 00 00 ff ff ff ff	r1 += -0x1
    6229	a7 05 00 00 ff ff ff ff	r5 ^= -0x1
    6230	5f 15 00 00 00 00 00 00	r5 &= r1
    6231	bf 51 00 00 00 00 00 00	r1 = r5
    6232	77 01 00 00 01 00 00 00	r1 >>= 0x1
    6233	18 08 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r8 = 0x5555555555555555 ll
    6235	5f 81 00 00 00 00 00 00	r1 &= r8
    6236	1f 15 00 00 00 00 00 00	r5 -= r1
    6237	bf 51 00 00 00 00 00 00	r1 = r5
    6238	18 08 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r8 = 0x3333333333333333 ll
    6240	5f 81 00 00 00 00 00 00	r1 &= r8
    6241	77 05 00 00 02 00 00 00	r5 >>= 0x2
    6242	5f 85 00 00 00 00 00 00	r5 &= r8
    6243	0f 51 00 00 00 00 00 00	r1 += r5
    6244	bf 15 00 00 00 00 00 00	r5 = r1
    6245	77 05 00 00 04 00 00 00	r5 >>= 0x4
    6246	0f 51 00 00 00 00 00 00	r1 += r5
    6247	18 05 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r5 = 0xf0f0f0f0f0f0f0f ll
    6249	5f 51 00 00 00 00 00 00	r1 &= r5
    6250	18 05 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r5 = 0x101010101010101 ll
    6252	2f 51 00 00 00 00 00 00	r1 *= r5
    6253	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    6254	0f 41 00 00 00 00 00 00	r1 += r4
    6255	5f 61 00 00 00 00 00 00	r1 &= r6
    6256	bf 74 00 00 00 00 00 00	r4 = r7
    6257	0f 14 00 00 00 00 00 00	r4 += r1
    6258	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    6259	67 04 00 00 38 00 00 00	r4 <<= 0x38
    6260	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    6261	b7 05 00 00 00 00 00 00	r5 = 0x0
    6262	6d 45 1e 00 00 00 00 00	if r5 s> r4 goto +0x1e <LBB66_72>
    6263	79 74 00 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x0)
    6264	5f 04 00 00 00 00 00 00	r4 &= r0
    6265	15 04 1b 00 00 00 00 00	if r4 == 0x0 goto +0x1b <LBB66_72>
    6266	bf 41 00 00 00 00 00 00	r1 = r4
    6267	07 01 00 00 ff ff ff ff	r1 += -0x1
    6268	a7 04 00 00 ff ff ff ff	r4 ^= -0x1
    6269	5f 14 00 00 00 00 00 00	r4 &= r1
    6270	bf 41 00 00 00 00 00 00	r1 = r4
    6271	77 01 00 00 01 00 00 00	r1 >>= 0x1
    6272	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    6274	5f 51 00 00 00 00 00 00	r1 &= r5
    6275	1f 14 00 00 00 00 00 00	r4 -= r1
    6276	bf 41 00 00 00 00 00 00	r1 = r4
    6277	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    6279	5f 51 00 00 00 00 00 00	r1 &= r5
    6280	77 04 00 00 02 00 00 00	r4 >>= 0x2
    6281	5f 54 00 00 00 00 00 00	r4 &= r5
    6282	0f 41 00 00 00 00 00 00	r1 += r4
    6283	bf 14 00 00 00 00 00 00	r4 = r1
    6284	77 04 00 00 04 00 00 00	r4 >>= 0x4
    6285	0f 41 00 00 00 00 00 00	r1 += r4
    6286	18 04 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r4 = 0xf0f0f0f0f0f0f0f ll
    6288	5f 41 00 00 00 00 00 00	r1 &= r4
    6289	18 04 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r4 = 0x101010101010101 ll
    6291	2f 41 00 00 00 00 00 00	r1 *= r4
    6292	77 01 00 00 3b 00 00 00	r1 >>= 0x3b

000000000000c4a8 <LBB66_72>
    6293	79 a8 50 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xb0)
    6294	bf 84 00 00 00 00 00 00	r4 = r8
    6295	1f 34 00 00 00 00 00 00	r4 -= r3
    6296	bf 15 00 00 00 00 00 00	r5 = r1
    6297	1f 35 00 00 00 00 00 00	r5 -= r3
    6298	af 45 00 00 00 00 00 00	r5 ^= r4
    6299	5f 65 00 00 00 00 00 00	r5 &= r6
    6300	b7 03 00 00 08 00 00 00	r3 = 0x8
    6301	2d 53 35 fe 00 00 00 00	if r3 > r5 goto -0x1cb <LBB66_83>
    6302	77 02 00 00 39 00 00 00	r2 >>= 0x39
    6303	bf 73 00 00 00 00 00 00	r3 = r7
    6304	0f 13 00 00 00 00 00 00	r3 += r1
    6305	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    6306	73 23 00 00 00 00 00 00	*(u8 *)(r3 + 0x0) = r2
    6307	bf 13 00 00 00 00 00 00	r3 = r1
    6308	07 03 00 00 f8 ff ff ff	r3 += -0x8
    6309	5f 63 00 00 00 00 00 00	r3 &= r6
    6310	0f 73 00 00 00 00 00 00	r3 += r7
    6311	73 23 08 00 00 00 00 00	*(u8 *)(r3 + 0x8) = r2
    6312	27 01 00 00 d0 ff ff ff	r1 *= -0x30
    6313	15 04 13 00 ff 00 00 00	if r4 == 0xff goto +0x13 <LBB66_78>
    6314	bf 72 00 00 00 00 00 00	r2 = r7
    6315	0f 12 00 00 00 00 00 00	r2 += r1
    6316	b7 01 00 00 d0 ff ff ff	r1 = -0x30
    6317	05 00 02 00 00 00 00 00	goto +0x2 <LBB66_75>

000000000000c570 <LBB66_77>
    6318	57 03 00 00 01 00 00 00	r3 &= 0x1
    6319	55 03 4a fe 00 00 00 00	if r3 != 0x0 goto -0x1b6 <LBB66_54>

000000000000c580 <LBB66_75>
    6320	bf 23 00 00 00 00 00 00	r3 = r2
    6321	0f 13 00 00 00 00 00 00	r3 += r1
    6322	bf 94 00 00 00 00 00 00	r4 = r9
    6323	0f 14 00 00 00 00 00 00	r4 += r1
    6324	71 45 00 00 00 00 00 00	r5 = *(u8 *)(r4 + 0x0)
    6325	71 30 00 00 00 00 00 00	r0 = *(u8 *)(r3 + 0x0)
    6326	73 04 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r0
    6327	73 53 00 00 00 00 00 00	*(u8 *)(r3 + 0x0) = r5
    6328	07 01 00 00 01 00 00 00	r1 += 0x1
    6329	b7 03 00 00 01 00 00 00	r3 = 0x1
    6330	15 01 f3 ff 00 00 00 00	if r1 == 0x0 goto -0xd <LBB66_77>
    6331	b7 03 00 00 00 00 00 00	r3 = 0x0
    6332	05 00 f1 ff 00 00 00 00	goto -0xf <LBB66_77>

000000000000c5e8 <LBB66_78>
    6333	0f 71 00 00 00 00 00 00	r1 += r7
    6334	07 01 00 00 d0 ff ff ff	r1 += -0x30
    6335	b7 03 00 00 ff 00 00 00	r3 = 0xff
    6336	79 a2 30 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd0)
    6337	73 32 00 00 00 00 00 00	*(u8 *)(r2 + 0x0) = r3
    6338	bf 82 00 00 00 00 00 00	r2 = r8
    6339	07 02 00 00 f8 ff ff ff	r2 += -0x8
    6340	5f 62 00 00 00 00 00 00	r2 &= r6
    6341	0f 72 00 00 00 00 00 00	r2 += r7
    6342	73 32 08 00 00 00 00 00	*(u8 *)(r2 + 0x8) = r3
    6343	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd8)
    6344	b7 03 00 00 30 00 00 00	r3 = 0x30
    6345	85 10 00 00 8e 17 00 00	call 0x178e ; <memcpy>
    6346	05 00 10 fe 00 00 00 00	goto -0x1f0 <LBB66_79>

000000000000c658 <LBB66_11>
    6347	b7 07 00 00 04 00 00 00	r7 = 0x4
    6348	2d 47 10 00 00 00 00 00	if r7 > r4 goto +0x10 <LBB66_16>
    6349	b7 07 00 00 08 00 00 00	r7 = 0x8
    6350	05 00 0e 00 00 00 00 00	goto +0xe <LBB66_16>

000000000000c678 <LBB66_49>
    6351	bf 71 00 00 00 00 00 00	r1 = r7
    6352	0f 91 00 00 00 00 00 00	r1 += r9
    6353	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    6354	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    6355	05 00 e4 fd 00 00 00 00	goto -0x21c <LBB66_51>

000000000000c6a0 <LBB66_15>
    6356	bf a1 00 00 00 00 00 00	r1 = r10
    6357	07 01 00 00 f0 ff ff ff	r1 += -0x10
    6358	b7 02 00 00 01 00 00 00	r2 = 0x1
    6359	85 10 00 00 ec 07 00 00	call 0x7ec ; <hashbrown::raw::Fallibility::capacity_overflow>
    6360	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x8)
    6361	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    6362	18 01 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x7fffffffffffffff ll
    6364	5d 18 20 00 00 00 00 00	if r8 != r1 goto +0x20 <LBB66_81>

000000000000c6e8 <LBB66_16>
    6365	7b 9a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r9
    6366	bf a1 00 00 00 00 00 00	r1 = r10
    6367	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6368	bf 72 00 00 00 00 00 00	r2 = r7
    6369	b7 03 00 00 00 00 00 00	r3 = 0x0
    6370	b7 04 00 00 30 00 00 00	r4 = 0x30
    6371	b7 05 00 00 00 00 00 00	r5 = 0x0
    6372	85 10 00 00 27 18 00 00	call 0x1827 ; <__multi3>
    6373	b7 01 00 00 01 00 00 00	r1 = 0x1
    6374	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    6375	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB66_18>
    6376	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000c748 <LBB66_18>
    6377	57 01 00 00 01 00 00 00	r1 &= 0x1
    6378	55 01 0d 00 00 00 00 00	if r1 != 0x0 goto +0xd <LBB66_23>
    6379	79 a6 e0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x20)
    6380	bf 73 00 00 00 00 00 00	r3 = r7
    6381	07 03 00 00 08 00 00 00	r3 += 0x8
    6382	bf 69 00 00 00 00 00 00	r9 = r6
    6383	0f 39 00 00 00 00 00 00	r9 += r3
    6384	b7 01 00 00 01 00 00 00	r1 = 0x1
    6385	2d 96 01 00 00 00 00 00	if r6 > r9 goto +0x1 <LBB66_21>
    6386	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000c798 <LBB66_21>
    6387	57 01 00 00 01 00 00 00	r1 &= 0x1
    6388	55 01 03 00 00 00 00 00	if r1 != 0x0 goto +0x3 <LBB66_23>
    6389	18 01 00 00 f9 ff ff ff 00 00 00 00 ff ff ff 7f	r1 = 0x7ffffffffffffff9 ll
    6391	2d 91 07 00 00 00 00 00	if r1 > r9 goto +0x7 <LBB66_24>

000000000000c7c0 <LBB66_23>
    6392	bf a1 00 00 00 00 00 00	r1 = r10
    6393	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6394	b7 02 00 00 01 00 00 00	r2 = 0x1
    6395	85 10 00 00 c8 07 00 00	call 0x7c8 ; <hashbrown::raw::Fallibility::capacity_overflow>
    6396	79 a8 b0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x50)

000000000000c7e8 <LBB66_81>
    6397	bf 80 00 00 00 00 00 00	r0 = r8
    6398	95 00 00 00 00 00 00 00	exit

000000000000c7f8 <LBB66_24>
    6399	b7 08 00 00 08 00 00 00	r8 = 0x8
    6400	15 09 0f 00 00 00 00 00	if r9 == 0x0 goto +0xf <LBB66_27>
    6401	bf 91 00 00 00 00 00 00	r1 = r9
    6402	b7 02 00 00 08 00 00 00	r2 = 0x8
    6403	bf 38 00 00 00 00 00 00	r8 = r3
    6404	85 10 00 00 90 f5 ff ff	call -0xa70 ; <__rust_alloc>
    6405	bf 83 00 00 00 00 00 00	r3 = r8
    6406	bf 08 00 00 00 00 00 00	r8 = r0
    6407	55 08 08 00 00 00 00 00	if r8 != 0x0 goto +0x8 <LBB66_27>
    6408	bf a1 00 00 00 00 00 00	r1 = r10
    6409	07 01 00 00 d0 ff ff ff	r1 += -0x30
    6410	b7 02 00 00 01 00 00 00	r2 = 0x1
    6411	b7 03 00 00 08 00 00 00	r3 = 0x8
    6412	bf 94 00 00 00 00 00 00	r4 = r9
    6413	85 10 00 00 cb 07 00 00	call 0x7cb ; <hashbrown::raw::Fallibility::alloc_err>
    6414	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    6415	05 00 ed ff 00 00 00 00	goto -0x13 <LBB66_81>

000000000000c880 <LBB66_27>
    6416	0f 68 00 00 00 00 00 00	r8 += r6
    6417	bf 81 00 00 00 00 00 00	r1 = r8
    6418	b7 02 00 00 ff 00 00 00	r2 = 0xff
    6419	85 10 00 00 a9 17 00 00	call 0x17a9 ; <memset>
    6420	bf 79 00 00 00 00 00 00	r9 = r7
    6421	07 09 00 00 ff ff ff ff	r9 += -0x1
    6422	bf 92 00 00 00 00 00 00	r2 = r9
    6423	b7 01 00 00 08 00 00 00	r1 = 0x8
    6424	2d 91 03 00 00 00 00 00	if r1 > r9 goto +0x3 <LBB66_29>
    6425	77 07 00 00 03 00 00 00	r7 >>= 0x3
    6426	27 07 00 00 07 00 00 00	r7 *= 0x7
    6427	bf 72 00 00 00 00 00 00	r2 = r7

000000000000c8e0 <LBB66_29>
    6428	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    6429	1f 12 00 00 00 00 00 00	r2 -= r1
    6430	79 a3 38 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xc8)
    6431	15 03 88 00 ff ff ff ff	if r3 == -0x1 goto +0x88 <LBB66_32>
    6432	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
    6433	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    6434	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    6435	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    6436	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    6437	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    6438	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    6439	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    6440	bf 16 00 00 00 00 00 00	r6 = r1
    6441	07 01 00 00 d0 ff ff ff	r1 += -0x30
    6442	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    6443	b7 01 00 00 00 00 00 00	r1 = 0x0
    6444	05 00 16 00 00 00 00 00	goto +0x16 <LBB66_31>

000000000000c968 <LBB66_42>
    6445	77 00 00 00 39 00 00 00	r0 >>= 0x39
    6446	bf 82 00 00 00 00 00 00	r2 = r8
    6447	0f 12 00 00 00 00 00 00	r2 += r1
    6448	73 02 00 00 00 00 00 00	*(u8 *)(r2 + 0x0) = r0
    6449	bf 12 00 00 00 00 00 00	r2 = r1
    6450	07 02 00 00 f8 ff ff ff	r2 += -0x8
    6451	5f 92 00 00 00 00 00 00	r2 &= r9
    6452	0f 82 00 00 00 00 00 00	r2 += r8
    6453	73 02 08 00 00 00 00 00	*(u8 *)(r2 + 0x8) = r0
    6454	bf 72 00 00 00 00 00 00	r2 = r7
    6455	27 02 00 00 d0 ff ff ff	r2 *= -0x30
    6456	0f 62 00 00 00 00 00 00	r2 += r6
    6457	27 01 00 00 d0 ff ff ff	r1 *= -0x30
    6458	0f 81 00 00 00 00 00 00	r1 += r8
    6459	07 01 00 00 d0 ff ff ff	r1 += -0x30
    6460	07 02 00 00 d0 ff ff ff	r2 += -0x30
    6461	b7 03 00 00 30 00 00 00	r3 = 0x30
    6462	85 10 00 00 19 17 00 00	call 0x1719 ; <memcpy>
    6463	79 a3 38 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xc8)

000000000000ca00 <LBB66_43>
    6464	bf 71 00 00 00 00 00 00	r1 = r7
    6465	07 01 00 00 01 00 00 00	r1 += 0x1
    6466	1d 37 6c 00 00 00 00 00	if r7 == r3 goto +0x6c <LBB66_33>

000000000000ca18 <LBB66_31>
    6467	bf 17 00 00 00 00 00 00	r7 = r1
    6468	bf 61 00 00 00 00 00 00	r1 = r6
    6469	0f 71 00 00 00 00 00 00	r1 += r7
    6470	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    6471	67 01 00 00 38 00 00 00	r1 <<= 0x38
    6472	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    6473	b7 02 00 00 00 00 00 00	r2 = 0x0
    6474	6d 12 f5 ff 00 00 00 00	if r2 s> r1 goto -0xb <LBB66_43>
    6475	bf 71 00 00 00 00 00 00	r1 = r7
    6476	87 01 00 00 00 00 00 00	r1 = -r1
    6477	27 01 00 00 30 00 00 00	r1 *= 0x30
    6478	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)
    6479	0f 13 00 00 00 00 00 00	r3 += r1
    6480	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    6481	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    6482	85 10 00 00 42 f6 ff ff	call -0x9be ; <core::hash::BuildHasher::hash_one>
    6483	18 04 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r4 = -0x7f7f7f7f7f7f7f80 ll
    6485	bf 02 00 00 00 00 00 00	r2 = r0
    6486	5f 92 00 00 00 00 00 00	r2 &= r9
    6487	bf 81 00 00 00 00 00 00	r1 = r8
    6488	0f 21 00 00 00 00 00 00	r1 += r2
    6489	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    6490	5f 43 00 00 00 00 00 00	r3 &= r4
    6491	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB66_39>
    6492	b7 01 00 00 08 00 00 00	r1 = 0x8

000000000000cae8 <LBB66_38>
    6493	0f 12 00 00 00 00 00 00	r2 += r1
    6494	5f 92 00 00 00 00 00 00	r2 &= r9
    6495	bf 83 00 00 00 00 00 00	r3 = r8
    6496	0f 23 00 00 00 00 00 00	r3 += r2
    6497	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    6498	5f 43 00 00 00 00 00 00	r3 &= r4
    6499	07 01 00 00 08 00 00 00	r1 += 0x8
    6500	15 03 f8 ff 00 00 00 00	if r3 == 0x0 goto -0x8 <LBB66_38>

000000000000cb28 <LBB66_39>
    6501	bf 31 00 00 00 00 00 00	r1 = r3
    6502	07 01 00 00 ff ff ff ff	r1 += -0x1
    6503	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    6504	5f 13 00 00 00 00 00 00	r3 &= r1
    6505	bf 31 00 00 00 00 00 00	r1 = r3
    6506	77 01 00 00 01 00 00 00	r1 >>= 0x1
    6507	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    6509	5f 51 00 00 00 00 00 00	r1 &= r5
    6510	1f 13 00 00 00 00 00 00	r3 -= r1
    6511	bf 31 00 00 00 00 00 00	r1 = r3
    6512	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    6514	5f 51 00 00 00 00 00 00	r1 &= r5
    6515	77 03 00 00 02 00 00 00	r3 >>= 0x2
    6516	5f 53 00 00 00 00 00 00	r3 &= r5
    6517	0f 31 00 00 00 00 00 00	r1 += r3
    6518	bf 13 00 00 00 00 00 00	r3 = r1
    6519	77 03 00 00 04 00 00 00	r3 >>= 0x4
    6520	0f 31 00 00 00 00 00 00	r1 += r3
    6521	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
    6523	5f 31 00 00 00 00 00 00	r1 &= r3
    6524	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    6526	2f 31 00 00 00 00 00 00	r1 *= r3
    6527	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    6528	0f 21 00 00 00 00 00 00	r1 += r2
    6529	5f 91 00 00 00 00 00 00	r1 &= r9
    6530	bf 82 00 00 00 00 00 00	r2 = r8
    6531	0f 12 00 00 00 00 00 00	r2 += r1
    6532	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    6533	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6534	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6535	b7 03 00 00 00 00 00 00	r3 = 0x0
    6536	6d 23 a4 ff 00 00 00 00	if r3 s> r2 goto -0x5c <LBB66_42>
    6537	79 82 00 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x0)
    6538	5f 42 00 00 00 00 00 00	r2 &= r4
    6539	15 02 a1 ff 00 00 00 00	if r2 == 0x0 goto -0x5f <LBB66_42>
    6540	bf 21 00 00 00 00 00 00	r1 = r2
    6541	07 01 00 00 ff ff ff ff	r1 += -0x1
    6542	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    6543	5f 12 00 00 00 00 00 00	r2 &= r1
    6544	bf 21 00 00 00 00 00 00	r1 = r2
    6545	77 01 00 00 01 00 00 00	r1 >>= 0x1
    6546	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    6548	5f 31 00 00 00 00 00 00	r1 &= r3
    6549	1f 12 00 00 00 00 00 00	r2 -= r1
    6550	bf 21 00 00 00 00 00 00	r1 = r2
    6551	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    6553	5f 31 00 00 00 00 00 00	r1 &= r3
    6554	77 02 00 00 02 00 00 00	r2 >>= 0x2
    6555	5f 32 00 00 00 00 00 00	r2 &= r3
    6556	0f 21 00 00 00 00 00 00	r1 += r2
    6557	bf 12 00 00 00 00 00 00	r2 = r1
    6558	77 02 00 00 04 00 00 00	r2 >>= 0x4
    6559	0f 21 00 00 00 00 00 00	r1 += r2
    6560	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    6562	5f 21 00 00 00 00 00 00	r1 &= r2
    6563	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    6565	2f 21 00 00 00 00 00 00	r1 *= r2
    6566	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    6567	05 00 85 ff 00 00 00 00	goto -0x7b <LBB66_42>

000000000000cd40 <LBB66_32>
    6568	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    6569	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    6570	7b 91 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r9
    6571	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    6572	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    6573	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    6574	05 00 09 00 00 00 00 00	goto +0x9 <LBB66_34>

000000000000cd78 <LBB66_33>
    6575	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    6576	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    6577	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    6578	7b 91 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r9
    6579	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    6580	18 08 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r8 = -0x7fffffffffffffff ll
    6582	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    6583	15 03 45 ff 00 00 00 00	if r3 == 0x0 goto -0xbb <LBB66_81>

000000000000cdc0 <LBB66_34>
    6584	bf a1 00 00 00 00 00 00	r1 = r10
    6585	07 01 00 00 c0 ff ff ff	r1 += -0x40
    6586	b7 03 00 00 00 00 00 00	r3 = 0x0
    6587	b7 04 00 00 30 00 00 00	r4 = 0x30
    6588	b7 05 00 00 00 00 00 00	r5 = 0x0
    6589	85 10 00 00 4e 17 00 00	call 0x174e ; <__multi3>
    6590	79 a2 38 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc8)
    6591	18 08 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r8 = -0x7fffffffffffffff ll
    6593	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    6594	0f 12 00 00 00 00 00 00	r2 += r1
    6595	07 02 00 00 09 00 00 00	r2 += 0x9
    6596	15 02 38 ff 00 00 00 00	if r2 == 0x0 goto -0xc8 <LBB66_81>
    6597	1f 16 00 00 00 00 00 00	r6 -= r1
    6598	bf 61 00 00 00 00 00 00	r1 = r6
    6599	b7 03 00 00 08 00 00 00	r3 = 0x8
    6600	85 10 00 00 e6 f4 ff ff	call -0xb1a ; <__rust_dealloc>
    6601	05 00 33 ff 00 00 00 00	goto -0xcd <LBB66_81>

000000000000ce50 <tester::types::UtxoInfo::id>
    6602	b7 03 00 00 00 00 00 00	r3 = 0x0
    6603	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    6604	18 03 00 00 60 a0 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a060 ll
    6606	7b 3a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r3
    6607	b7 03 00 00 02 00 00 00	r3 = 0x2
    6608	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    6609	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    6610	bf a3 00 00 00 00 00 00	r3 = r10
    6611	07 03 00 00 e0 ff ff ff	r3 += -0x20
    6612	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6613	18 03 00 00 a0 7e 01 00 00 00 00 00 00 00 00 00	r3 = 0x17ea0 ll
    6615	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    6616	bf 23 00 00 00 00 00 00	r3 = r2
    6617	07 03 00 00 58 00 00 00	r3 += 0x58
    6618	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    6619	18 03 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r3 = 0x96e0 ll
    6621	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6622	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6623	bf a2 00 00 00 00 00 00	r2 = r10
    6624	07 02 00 00 b0 ff ff ff	r2 += -0x50
    6625	85 10 00 00 db 07 00 00	call 0x7db ; <alloc::fmt::format::format_inner>
    6626	95 00 00 00 00 00 00 00	exit

000000000000cf18 <tester::entrypoint::deserialize>
    6627	bf 16 00 00 00 00 00 00	r6 = r1
    6628	61 21 00 00 00 00 00 00	r1 = *(u32 *)(r2 + 0x0)
    6629	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6630	07 02 00 00 04 00 00 00	r2 += 0x4
    6631	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6632	bf a1 00 00 00 00 00 00	r1 = r10
    6633	07 01 00 00 68 ff ff ff	r1 += -0x98
    6634	bf a2 00 00 00 00 00 00	r2 = r10
    6635	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6636	85 10 00 00 27 fa ff ff	call -0x5d9 ; <<alloc::vec::Vec<T> as borsh::de::BorshDeserialize>::deserialize_reader>
    6637	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    6638	79 a2 68 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x98)
    6639	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    6640	bf 10 00 00 00 00 00 00	r0 = r1
    6641	7b 2a d8 fd 00 00 00 00	*(u64 *)(r10 - 0x228) = r2
    6642	15 02 b5 02 00 00 00 00	if r2 == 0x0 goto +0x2b5 <LBB70_85>
    6643	7b 6a c0 fd 00 00 00 00	*(u64 *)(r10 - 0x240) = r6
    6644	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6645	b7 02 00 00 04 00 00 00	r2 = 0x4
    6646	2d 12 bd 02 00 00 00 00	if r2 > r1 goto +0x2bd <LBB70_86>
    6647	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    6648	7b 2a d0 fd 00 00 00 00	*(u64 *)(r10 - 0x230) = r2
    6649	07 01 00 00 fc ff ff ff	r1 += -0x4
    6650	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6651	61 28 00 00 00 00 00 00	r8 = *(u32 *)(r2 + 0x0)
    6652	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6653	07 02 00 00 04 00 00 00	r2 += 0x4
    6654	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6655	b7 01 00 00 08 00 00 00	r1 = 0x8
    6656	7b 1a 00 fe 00 00 00 00	*(u64 *)(r10 - 0x200) = r1
    6657	b7 02 00 00 00 00 00 00	r2 = 0x0
    6658	b7 01 00 00 00 00 00 00	r1 = 0x0
    6659	15 08 2a 00 00 00 00 00	if r8 == 0x0 goto +0x2a <LBB70_16>
    6660	b7 01 00 00 80 00 00 00	r1 = 0x80
    6661	bf 86 00 00 00 00 00 00	r6 = r8
    6662	2d 81 01 00 00 00 00 00	if r1 > r8 goto +0x1 <LBB70_5>
    6663	b7 06 00 00 80 00 00 00	r6 = 0x80

000000000000d040 <LBB70_5>
    6664	bf 67 00 00 00 00 00 00	r7 = r6
    6665	67 07 00 00 05 00 00 00	r7 <<= 0x5
    6666	bf 71 00 00 00 00 00 00	r1 = r7
    6667	b7 02 00 00 08 00 00 00	r2 = 0x8
    6668	85 10 00 00 88 f4 ff ff	call -0xb78 ; <__rust_alloc>
    6669	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB70_7>
    6670	b7 01 00 00 08 00 00 00	r1 = 0x8
    6671	bf 72 00 00 00 00 00 00	r2 = r7
    6672	85 10 00 00 96 07 00 00	call 0x796 ; <alloc::alloc::handle_alloc_error>
    6673	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000d090 <LBB70_7>
    6674	7b 6a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r6
    6675	7b 0a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r0
    6676	b7 02 00 00 00 00 00 00	r2 = 0x0
    6677	7b 2a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r2
    6678	b7 09 00 00 00 00 00 00	r9 = 0x0
    6679	7b 8a 70 fe 00 00 00 00	*(u64 *)(r10 - 0x190) = r8
    6680	05 00 6b 00 00 00 00 00	goto +0x6b <LBB70_9>

000000000000d0c8 <LBB70_8>
    6681	07 09 00 00 01 00 00 00	r9 += 0x1
    6682	bf 21 00 00 00 00 00 00	r1 = r2
    6683	67 01 00 00 05 00 00 00	r1 <<= 0x5
    6684	bf 03 00 00 00 00 00 00	r3 = r0
    6685	0f 13 00 00 00 00 00 00	r3 += r1
    6686	63 63 18 00 00 00 00 00	*(u32 *)(r3 + 0x18) = r6
    6687	7b 53 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r5
    6688	7b 43 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r4
    6689	7b 83 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r8
    6690	07 02 00 00 01 00 00 00	r2 += 0x1
    6691	7b 2a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r2
    6692	bf 91 00 00 00 00 00 00	r1 = r9
    6693	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6694	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6695	79 a8 70 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x190)
    6696	2d 18 5b 00 00 00 00 00	if r8 > r1 goto +0x5b <LBB70_9>
    6697	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    6698	79 a3 38 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xc8)
    6699	bf 10 00 00 00 00 00 00	r0 = r1
    6700	7b 3a 00 fe 00 00 00 00	*(u64 *)(r10 - 0x200) = r3
    6701	15 03 72 02 00 00 00 00	if r3 == 0x0 goto +0x272 <LBB70_83>

000000000000d170 <LBB70_16>
    6702	7b 1a c8 fd 00 00 00 00	*(u64 *)(r10 - 0x238) = r1
    6703	7b 2a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r2
    6704	bf a1 00 00 00 00 00 00	r1 = r10
    6705	07 01 00 00 68 ff ff ff	r1 += -0x98
    6706	bf a2 00 00 00 00 00 00	r2 = r10
    6707	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6708	85 10 00 00 df f9 ff ff	call -0x621 ; <<alloc::vec::Vec<T> as borsh::de::BorshDeserialize>::deserialize_reader>
    6709	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    6710	7b 1a 70 fe 00 00 00 00	*(u64 *)(r10 - 0x190) = r1
    6711	79 a7 68 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x98)
    6712	15 07 81 02 00 00 00 00	if r7 == 0x0 goto +0x281 <LBB70_87>
    6713	79 a6 78 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x88)
    6714	bf a1 00 00 00 00 00 00	r1 = r10
    6715	07 01 00 00 68 ff ff ff	r1 += -0x98
    6716	bf a2 00 00 00 00 00 00	r2 = r10
    6717	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6718	85 10 00 00 ab f7 ff ff	call -0x855 ; <borsh::de::hashes::<impl borsh::de::BorshDeserialize for std::collections::hash::map::HashMap<K,V,H>>::deserialize_reader>
    6719	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    6720	7b 7a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r7
    6721	15 01 90 02 00 00 00 00	if r1 == 0x0 goto +0x290 <LBB70_94>
    6722	79 a2 78 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x88)
    6723	7b 2a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r2
    6724	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    6725	7b 2a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r2
    6726	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    6727	7b 2a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r2
    6728	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
    6729	7b 2a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r2
    6730	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)
    6731	7b 2a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r2
    6732	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    6733	bf a1 00 00 00 00 00 00	r1 = r10
    6734	07 01 00 00 68 ff ff ff	r1 += -0x98
    6735	bf a2 00 00 00 00 00 00	r2 = r10
    6736	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6737	85 10 00 00 98 f7 ff ff	call -0x868 ; <borsh::de::hashes::<impl borsh::de::BorshDeserialize for std::collections::hash::map::HashMap<K,V,H>>::deserialize_reader>
    6738	79 a8 68 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x98)
    6739	15 08 9d 02 00 00 00 00	if r8 == 0x0 goto +0x29d <LBB70_103>
    6740	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    6741	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    6742	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    6743	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    6744	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    6745	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    6746	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    6747	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    6748	79 a9 70 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x90)
    6749	bf a7 00 00 00 00 00 00	r7 = r10
    6750	07 07 00 00 d8 fe ff ff	r7 += -0x128
    6751	bf a2 00 00 00 00 00 00	r2 = r10
    6752	07 02 00 00 38 ff ff ff	r2 += -0xc8
    6753	bf 71 00 00 00 00 00 00	r1 = r7
    6754	b7 03 00 00 30 00 00 00	r3 = 0x30
    6755	85 10 00 00 f4 15 00 00	call 0x15f4 ; <memcpy>
    6756	7b 9a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r9
    6757	7b 8a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r8
    6758	7b 6a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r6
    6759	79 a1 70 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x190)
    6760	7b 1a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r1
    6761	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    6762	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    6763	79 a6 f8 fd 00 00 00 00	r6 = *(u64 *)(r10 - 0x208)
    6764	7b 6a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r6
    6765	79 a1 c8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x238)
    6766	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    6767	79 a1 00 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x200)
    6768	7b 1a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r1
    6769	79 a1 d0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x230)
    6770	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    6771	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    6772	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    6773	79 a1 d8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x228)
    6774	7b 1a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r1
    6775	bf a8 00 00 00 00 00 00	r8 = r10
    6776	07 08 00 00 08 ff ff ff	r8 += -0xf8
    6777	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6778	15 01 39 00 00 00 00 00	if r1 == 0x0 goto +0x39 <LBB70_22>
    6779	b7 01 00 00 12 00 00 00	r1 = 0x12
    6780	b7 02 00 00 01 00 00 00	r2 = 0x1
    6781	85 10 00 00 17 f4 ff ff	call -0xbe9 ; <__rust_alloc>
    6782	bf 06 00 00 00 00 00 00	r6 = r0
    6783	55 06 a4 02 00 00 00 00	if r6 != 0x0 goto +0x2a4 <LBB70_117>
    6784	b7 01 00 00 01 00 00 00	r1 = 0x1
    6785	b7 02 00 00 12 00 00 00	r2 = 0x12
    6786	85 10 00 00 24 07 00 00	call 0x724 ; <alloc::alloc::handle_alloc_error>
    6787	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000d420 <LBB70_9>
    6788	bf 07 00 00 00 00 00 00	r7 = r0
    6789	bf 26 00 00 00 00 00 00	r6 = r2
    6790	bf a1 00 00 00 00 00 00	r1 = r10
    6791	07 01 00 00 68 ff ff ff	r1 += -0x98
    6792	bf a2 00 00 00 00 00 00	r2 = r10
    6793	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6794	85 10 00 00 56 f8 ff ff	call -0x7aa ; <<alloc::string::String as borsh::de::BorshDeserialize>::deserialize_reader>
    6795	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
    6796	79 a8 68 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x98)
    6797	bf 40 00 00 00 00 00 00	r0 = r4
    6798	15 08 fa 01 00 00 00 00	if r8 == 0x0 goto +0x1fa <LBB70_75>
    6799	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6800	bf 62 00 00 00 00 00 00	r2 = r6
    6801	25 01 0c 00 03 00 00 00	if r1 > 0x3 goto +0xc <LBB70_13>
    6802	18 01 00 00 80 9f 01 00 00 00 00 00 00 00 00 00	r1 = 0x19f80 ll
    6804	bf 47 00 00 00 00 00 00	r7 = r4
    6805	85 10 00 00 80 03 00 00	call 0x380 ; <borsh::de::unexpected_eof_to_unexpected_length_of_input>
    6806	bf 72 00 00 00 00 00 00	r2 = r7
    6807	15 02 f1 01 00 00 00 00	if r2 == 0x0 goto +0x1f1 <LBB70_75>
    6808	bf 81 00 00 00 00 00 00	r1 = r8
    6809	b7 03 00 00 01 00 00 00	r3 = 0x1
    6810	bf 07 00 00 00 00 00 00	r7 = r0
    6811	85 10 00 00 13 f4 ff ff	call -0xbed ; <__rust_dealloc>
    6812	bf 70 00 00 00 00 00 00	r0 = r7
    6813	05 00 eb 01 00 00 00 00	goto +0x1eb <LBB70_75>

000000000000d4f0 <LBB70_13>
    6814	79 a5 78 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x88)
    6815	07 01 00 00 fc ff ff ff	r1 += -0x4
    6816	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    6817	61 36 00 00 00 00 00 00	r6 = *(u32 *)(r3 + 0x0)
    6818	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6819	07 03 00 00 04 00 00 00	r3 += 0x4
    6820	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    6821	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    6822	bf 70 00 00 00 00 00 00	r0 = r7
    6823	5d 12 71 ff 00 00 00 00	if r2 != r1 goto -0x8f <LBB70_8>
    6824	bf a1 00 00 00 00 00 00	r1 = r10
    6825	07 01 00 00 38 ff ff ff	r1 += -0xc8
    6826	bf 47 00 00 00 00 00 00	r7 = r4
    6827	7b 6a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r6
    6828	bf 56 00 00 00 00 00 00	r6 = r5
    6829	85 10 00 00 75 f6 ff ff	call -0x98b ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    6830	bf 65 00 00 00 00 00 00	r5 = r6
    6831	79 a6 68 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x198)
    6832	bf 74 00 00 00 00 00 00	r4 = r7
    6833	79 a0 38 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0xc8)
    6834	79 a2 48 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xb8)
    6835	05 00 65 ff 00 00 00 00	goto -0x9b <LBB70_8>

000000000000d5a0 <LBB70_22>
    6836	bf a1 00 00 00 00 00 00	r1 = r10
    6837	07 01 00 00 c0 fe ff ff	r1 += -0x140
    6838	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    6839	7b 2a 88 fe 00 00 00 00	*(u64 *)(r10 - 0x178) = r2
    6840	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    6841	7b 2a 80 fe 00 00 00 00	*(u64 *)(r10 - 0x180) = r2
    6842	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    6843	7b 1a 78 fe 00 00 00 00	*(u64 *)(r10 - 0x188) = r1
    6844	bf a1 00 00 00 00 00 00	r1 = r10
    6845	07 01 00 00 38 ff ff ff	r1 += -0xc8
    6846	bf 72 00 00 00 00 00 00	r2 = r7
    6847	b7 03 00 00 30 00 00 00	r3 = 0x30
    6848	85 10 00 00 97 15 00 00	call 0x1597 ; <memcpy>
    6849	bf a1 00 00 00 00 00 00	r1 = r10
    6850	07 01 00 00 68 ff ff ff	r1 += -0x98
    6851	bf 82 00 00 00 00 00 00	r2 = r8
    6852	b7 03 00 00 30 00 00 00	r3 = 0x30
    6853	85 10 00 00 92 15 00 00	call 0x1592 ; <memcpy>
    6854	b7 01 00 00 08 00 00 00	r1 = 0x8
    6855	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    6856	bf 67 00 00 00 00 00 00	r7 = r6
    6857	15 07 35 00 00 00 00 00	if r7 == 0x0 goto +0x35 <LBB70_33>
    6858	b7 06 00 00 01 00 00 00	r6 = 0x1
    6859	18 01 00 00 56 55 55 55 00 00 00 00 55 55 55 01	r1 = 0x155555555555556 ll
    6861	2d 71 01 00 00 00 00 00	if r1 > r7 goto +0x1 <LBB70_25>
    6862	b7 06 00 00 00 00 00 00	r6 = 0x0

000000000000d678 <LBB70_25>
    6863	2d 71 02 00 00 00 00 00	if r1 > r7 goto +0x2 <LBB70_27>

000000000000d680 <LBB70_26>
    6864	85 10 00 00 c5 06 00 00	call 0x6c5 ; <alloc::raw_vec::capacity_overflow>
    6865	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000d690 <LBB70_27>
    6866	27 07 00 00 60 00 00 00	r7 *= 0x60
    6867	67 06 00 00 03 00 00 00	r6 <<= 0x3
    6868	15 07 0a 00 00 00 00 00	if r7 == 0x0 goto +0xa <LBB70_30>
    6869	bf 71 00 00 00 00 00 00	r1 = r7
    6870	bf 62 00 00 00 00 00 00	r2 = r6
    6871	85 10 00 00 bd f3 ff ff	call -0xc43 ; <__rust_alloc>
    6872	7b 0a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r0
    6873	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB70_29>
    6874	05 00 05 00 00 00 00 00	goto +0x5 <LBB70_31>

000000000000d6d8 <LBB70_29>
    6875	bf 61 00 00 00 00 00 00	r1 = r6
    6876	bf 72 00 00 00 00 00 00	r2 = r7
    6877	85 10 00 00 c9 06 00 00	call 0x6c9 ; <alloc::alloc::handle_alloc_error>
    6878	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000d6f8 <LBB70_30>
    6879	7b 6a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r6

000000000000d700 <LBB70_31>
    6880	b7 06 00 00 00 00 00 00	r6 = 0x0
    6881	79 a1 50 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xb0)
    6882	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    6883	b7 03 00 00 00 00 00 00	r3 = 0x0
    6884	05 00 36 00 00 00 00 00	goto +0x36 <LBB70_35>

000000000000d728 <LBB70_32>
    6885	79 a3 20 fe 00 00 00 00	r3 = *(u64 *)(r10 - 0x1e0)
    6886	bf 31 00 00 00 00 00 00	r1 = r3
    6887	27 01 00 00 60 00 00 00	r1 *= 0x60
    6888	79 a2 f0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x210)
    6889	0f 12 00 00 00 00 00 00	r2 += r1
    6890	79 a1 a0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x160)
    6891	7b 12 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r1
    6892	79 a1 98 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x168)
    6893	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    6894	79 a1 90 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x170)
    6895	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    6896	79 a1 18 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1e8)
    6897	63 12 58 00 00 00 00 00	*(u32 *)(r2 + 0x58) = r1
    6898	7b 82 50 00 00 00 00 00	*(u64 *)(r2 + 0x50) = r8
    6899	7b 82 48 00 00 00 00 00	*(u64 *)(r2 + 0x48) = r8
    6900	7b 72 40 00 00 00 00 00	*(u64 *)(r2 + 0x40) = r7
    6901	79 a1 10 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1f0)
    6902	7b 12 30 00 00 00 00 00	*(u64 *)(r2 + 0x30) = r1
    6903	7b 12 28 00 00 00 00 00	*(u64 *)(r2 + 0x28) = r1
    6904	79 a1 08 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1f8)
    6905	7b 12 20 00 00 00 00 00	*(u64 *)(r2 + 0x20) = r1
    6906	7b 62 38 00 00 00 00 00	*(u64 *)(r2 + 0x38) = r6
    6907	7b 62 18 00 00 00 00 00	*(u64 *)(r2 + 0x18) = r6
    6908	07 03 00 00 01 00 00 00	r3 += 0x1
    6909	79 a7 f8 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x208)
    6910	5d 73 1c 00 00 00 00 00	if r3 != r7 goto +0x1c <LBB70_35>

000000000000d7f8 <LBB70_33>
    6911	79 a1 88 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x178)
    6912	79 a2 c0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x240)
    6913	7b 12 40 00 00 00 00 00	*(u64 *)(r2 + 0x40) = r1
    6914	79 a1 80 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x180)
    6915	7b 12 38 00 00 00 00 00	*(u64 *)(r2 + 0x38) = r1
    6916	79 a1 78 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x188)
    6917	7b 12 30 00 00 00 00 00	*(u64 *)(r2 + 0x30) = r1
    6918	79 a1 f0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x210)
    6919	7b 12 18 00 00 00 00 00	*(u64 *)(r2 + 0x18) = r1
    6920	79 a1 d0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x230)
    6921	7b 12 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r1
    6922	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    6923	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    6924	79 a1 d8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x228)
    6925	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    6926	7b 72 28 00 00 00 00 00	*(u64 *)(r2 + 0x28) = r7
    6927	7b 72 20 00 00 00 00 00	*(u64 *)(r2 + 0x20) = r7
    6928	bf a1 00 00 00 00 00 00	r1 = r10
    6929	07 01 00 00 68 ff ff ff	r1 += -0x98
    6930	85 10 00 00 fb f3 ff ff	call -0xc05 ; <core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    6931	bf a1 00 00 00 00 00 00	r1 = r10
    6932	07 01 00 00 38 ff ff ff	r1 += -0xc8
    6933	85 10 00 00 f8 f3 ff ff	call -0xc08 ; <core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    6934	79 a3 f8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x208)
    6935	15 03 53 01 00 00 00 00	if r3 == 0x0 goto +0x153 <LBB70_68>
    6936	79 a6 00 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x200)
    6937	07 06 00 00 08 00 00 00	r6 += 0x8
    6938	05 00 57 01 00 00 00 00	goto +0x157 <LBB70_70>

000000000000d8d8 <LBB70_35>
    6939	7b 3a 20 fe 00 00 00 00	*(u64 *)(r10 - 0x1e0) = r3
    6940	bf 31 00 00 00 00 00 00	r1 = r3
    6941	67 01 00 00 05 00 00 00	r1 <<= 0x5
    6942	79 a7 00 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x200)
    6943	0f 17 00 00 00 00 00 00	r7 += r1
    6944	bf a1 00 00 00 00 00 00	r1 = r10
    6945	07 01 00 00 98 ff ff ff	r1 += -0x68
    6946	bf 72 00 00 00 00 00 00	r2 = r7
    6947	85 10 00 00 4e 07 00 00	call 0x74e ; <<alloc::string::String as core::clone::Clone>::clone>
    6948	61 71 18 00 00 00 00 00	r1 = *(u32 *)(r7 + 0x18)
    6949	7b 1a 18 fe 00 00 00 00	*(u64 *)(r10 - 0x1e8) = r1
    6950	7b 6a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r6
    6951	18 01 00 00 60 a0 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a060 ll
    6953	7b 1a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r1
    6954	b7 01 00 00 02 00 00 00	r1 = 0x2
    6955	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    6956	7b 1a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r1
    6957	bf a1 00 00 00 00 00 00	r1 = r10
    6958	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6959	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    6960	18 01 00 00 a0 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ea0 ll
    6962	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6963	18 01 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x96e0 ll
    6965	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6966	bf 71 00 00 00 00 00 00	r1 = r7
    6967	07 01 00 00 18 00 00 00	r1 += 0x18
    6968	7b 1a 28 fe 00 00 00 00	*(u64 *)(r10 - 0x1d8) = r1
    6969	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6970	7b 7a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r7
    6971	7b 7a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r7
    6972	bf a1 00 00 00 00 00 00	r1 = r10
    6973	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6974	bf a2 00 00 00 00 00 00	r2 = r10
    6975	07 02 00 00 90 fe ff ff	r2 += -0x170
    6976	85 10 00 00 7c 06 00 00	call 0x67c ; <alloc::fmt::format::format_inner>
    6977	79 a1 e8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x218)
    6978	15 01 38 01 00 00 00 00	if r1 == 0x0 goto +0x138 <LBB70_73>
    6979	79 a2 60 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xa0)
    6980	79 a1 58 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xa8)
    6981	bf a3 00 00 00 00 00 00	r3 = r10
    6982	07 03 00 00 b0 ff ff ff	r3 += -0x50
    6983	85 10 00 00 4d f4 ff ff	call -0xbb3 ; <core::hash::BuildHasher::hash_one>
    6984	bf 04 00 00 00 00 00 00	r4 = r0
    6985	bf 42 00 00 00 00 00 00	r2 = r4
    6986	77 02 00 00 39 00 00 00	r2 >>= 0x39
    6987	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    6989	2f 12 00 00 00 00 00 00	r2 *= r1
    6990	7b 2a 40 fe 00 00 00 00	*(u64 *)(r10 - 0x1c0) = r2
    6991	b7 01 00 00 00 00 00 00	r1 = 0x0
    6992	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    6993	79 a5 c0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x40)
    6994	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    6995	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    6996	79 a8 40 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xc0)
    6997	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
    6998	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    6999	07 01 00 00 d0 ff ff ff	r1 += -0x30
    7000	7b 1a 70 fe 00 00 00 00	*(u64 *)(r10 - 0x190) = r1
    7001	7b 8a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r8

000000000000dad0 <LBB70_37>
    7002	5f 84 00 00 00 00 00 00	r4 &= r8
    7003	79 a1 38 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1c8)
    7004	0f 41 00 00 00 00 00 00	r1 += r4
    7005	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    7006	7b 9a 50 fe 00 00 00 00	*(u64 *)(r10 - 0x1b0) = r9
    7007	79 a1 40 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1c0)
    7008	af 19 00 00 00 00 00 00	r9 ^= r1
    7009	bf 91 00 00 00 00 00 00	r1 = r9
    7010	18 02 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r2 = -0x101010101010101 ll
    7012	0f 21 00 00 00 00 00 00	r1 += r2
    7013	a7 09 00 00 ff ff ff ff	r9 ^= -0x1
    7014	5f 19 00 00 00 00 00 00	r9 &= r1
    7015	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
    7017	5f 19 00 00 00 00 00 00	r9 &= r1
    7018	15 09 32 00 00 00 00 00	if r9 == 0x0 goto +0x32 <LBB70_42>
    7019	bf 96 00 00 00 00 00 00	r6 = r9
    7020	7b 4a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r4

000000000000db68 <LBB70_39>
    7021	07 06 00 00 ff ff ff ff	r6 += -0x1
    7022	bf 92 00 00 00 00 00 00	r2 = r9
    7023	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    7024	5f 62 00 00 00 00 00 00	r2 &= r6
    7025	bf 21 00 00 00 00 00 00	r1 = r2
    7026	77 01 00 00 01 00 00 00	r1 >>= 0x1
    7027	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    7029	5f 31 00 00 00 00 00 00	r1 &= r3
    7030	1f 12 00 00 00 00 00 00	r2 -= r1
    7031	bf 21 00 00 00 00 00 00	r1 = r2
    7032	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    7034	5f 31 00 00 00 00 00 00	r1 &= r3
    7035	77 02 00 00 02 00 00 00	r2 >>= 0x2
    7036	5f 32 00 00 00 00 00 00	r2 &= r3
    7037	0f 21 00 00 00 00 00 00	r1 += r2
    7038	bf 12 00 00 00 00 00 00	r2 = r1
    7039	77 02 00 00 04 00 00 00	r2 >>= 0x4
    7040	0f 21 00 00 00 00 00 00	r1 += r2
    7041	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    7043	5f 21 00 00 00 00 00 00	r1 &= r2
    7044	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    7046	2f 21 00 00 00 00 00 00	r1 *= r2
    7047	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    7048	0f 41 00 00 00 00 00 00	r1 += r4
    7049	5f 81 00 00 00 00 00 00	r1 &= r8
    7050	87 01 00 00 00 00 00 00	r1 = -r1
    7051	27 01 00 00 30 00 00 00	r1 *= 0x30
    7052	79 a7 70 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x190)
    7053	0f 17 00 00 00 00 00 00	r7 += r1
    7054	79 71 10 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x10)
    7055	5d 51 09 00 00 00 00 00	if r1 != r5 goto +0x9 <LBB70_41>
    7056	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    7057	79 a1 60 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a0)
    7058	bf 53 00 00 00 00 00 00	r3 = r5
    7059	bf 58 00 00 00 00 00 00	r8 = r5
    7060	85 10 00 00 4b 15 00 00	call 0x154b ; <memcmp>
    7061	bf 85 00 00 00 00 00 00	r5 = r8
    7062	79 a8 58 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x1a8)
    7063	79 a4 68 fe 00 00 00 00	r4 = *(u64 *)(r10 - 0x198)
    7064	15 00 12 00 00 00 00 00	if r0 == 0x0 goto +0x12 <LBB70_44>

000000000000dcc8 <LBB70_41>
    7065	5f 96 00 00 00 00 00 00	r6 &= r9
    7066	bf 69 00 00 00 00 00 00	r9 = r6
    7067	15 06 01 00 00 00 00 00	if r6 == 0x0 goto +0x1 <LBB70_42>
    7068	05 00 d0 ff 00 00 00 00	goto -0x30 <LBB70_39>

000000000000dce8 <LBB70_42>
    7069	79 a2 50 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x1b0)
    7070	bf 21 00 00 00 00 00 00	r1 = r2
    7071	67 01 00 00 01 00 00 00	r1 <<= 0x1
    7072	5f 12 00 00 00 00 00 00	r2 &= r1
    7073	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
    7075	5f 12 00 00 00 00 00 00	r2 &= r1
    7076	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB70_43>
    7077	05 00 d5 00 00 00 00 00	goto +0xd5 <LBB70_73>

000000000000dd30 <LBB70_43>
    7078	79 a1 48 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1b8)
    7079	07 01 00 00 08 00 00 00	r1 += 0x8
    7080	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    7081	0f 14 00 00 00 00 00 00	r4 += r1
    7082	05 00 af ff 00 00 00 00	goto -0x51 <LBB70_37>

000000000000dd58 <LBB70_44>
    7083	b7 00 00 00 01 00 00 00	r0 = 0x1
    7084	79 76 18 00 00 00 00 00	r6 = *(u64 *)(r7 + 0x18)
    7085	79 77 28 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x28)
    7086	15 07 0a 00 00 00 00 00	if r7 == 0x0 goto +0xa <LBB70_49>
    7087	65 07 01 00 ff ff ff ff	if r7 s> -0x1 goto +0x1 <LBB70_47>
    7088	05 00 1f ff 00 00 00 00	goto -0xe1 <LBB70_26>

000000000000dd88 <LBB70_47>
    7089	bf 71 00 00 00 00 00 00	r1 = r7
    7090	b7 02 00 00 01 00 00 00	r2 = 0x1
    7091	85 10 00 00 e1 f2 ff ff	call -0xd1f ; <__rust_alloc>
    7092	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB70_49>
    7093	b7 01 00 00 01 00 00 00	r1 = 0x1
    7094	bf 72 00 00 00 00 00 00	r2 = r7
    7095	85 10 00 00 ef 05 00 00	call 0x5ef ; <alloc::alloc::handle_alloc_error>
    7096	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ddc8 <LBB70_49>
    7097	7b 0a 08 fe 00 00 00 00	*(u64 *)(r10 - 0x1f8) = r0
    7098	bf 01 00 00 00 00 00 00	r1 = r0
    7099	bf 62 00 00 00 00 00 00	r2 = r6
    7100	7b 7a 10 fe 00 00 00 00	*(u64 *)(r10 - 0x1f0) = r7
    7101	bf 73 00 00 00 00 00 00	r3 = r7
    7102	85 10 00 00 99 14 00 00	call 0x1499 ; <memcpy>
    7103	b7 01 00 00 00 00 00 00	r1 = 0x0
    7104	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    7105	18 01 00 00 60 a0 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a060 ll
    7107	7b 1a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r1
    7108	b7 01 00 00 02 00 00 00	r1 = 0x2
    7109	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    7110	7b 1a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r1
    7111	bf a1 00 00 00 00 00 00	r1 = r10
    7112	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7113	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    7114	18 01 00 00 a0 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ea0 ll
    7116	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7117	79 a1 28 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1d8)
    7118	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7119	18 01 00 00 e0 96 00 00 00 00 00 00 00 00 00 00	r1 = 0x96e0 ll
    7121	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7122	79 a1 30 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1d0)
    7123	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7124	bf a1 00 00 00 00 00 00	r1 = r10
    7125	07 01 00 00 c8 ff ff ff	r1 += -0x38
    7126	bf a2 00 00 00 00 00 00	r2 = r10
    7127	07 02 00 00 90 fe ff ff	r2 += -0x170
    7128	85 10 00 00 e4 05 00 00	call 0x5e4 ; <alloc::fmt::format::format_inner>
    7129	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    7130	15 01 a7 00 00 00 00 00	if r1 == 0x0 goto +0xa7 <LBB70_74>
    7131	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
    7132	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    7133	bf a3 00 00 00 00 00 00	r3 = r10
    7134	07 03 00 00 c8 ff ff ff	r3 += -0x38
    7135	85 10 00 00 b5 f3 ff ff	call -0xc4b ; <core::hash::BuildHasher::hash_one>
    7136	bf 04 00 00 00 00 00 00	r4 = r0
    7137	bf 42 00 00 00 00 00 00	r2 = r4
    7138	77 02 00 00 39 00 00 00	r2 >>= 0x39
    7139	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    7141	2f 12 00 00 00 00 00 00	r2 *= r1
    7142	7b 2a 40 fe 00 00 00 00	*(u64 *)(r10 - 0x1c0) = r2
    7143	b7 01 00 00 00 00 00 00	r1 = 0x0
    7144	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    7145	79 a5 d8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x28)
    7146	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7147	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    7148	79 a7 70 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x90)
    7149	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    7150	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    7151	07 01 00 00 d0 ff ff ff	r1 += -0x30
    7152	7b 1a 70 fe 00 00 00 00	*(u64 *)(r10 - 0x190) = r1
    7153	7b 7a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r7

000000000000df90 <LBB70_51>
    7154	5f 74 00 00 00 00 00 00	r4 &= r7
    7155	79 a1 38 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1c8)
    7156	0f 41 00 00 00 00 00 00	r1 += r4
    7157	79 18 00 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x0)
    7158	7b 8a 50 fe 00 00 00 00	*(u64 *)(r10 - 0x1b0) = r8
    7159	79 a1 40 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1c0)
    7160	af 18 00 00 00 00 00 00	r8 ^= r1
    7161	bf 81 00 00 00 00 00 00	r1 = r8
    7162	18 02 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r2 = -0x101010101010101 ll
    7164	0f 21 00 00 00 00 00 00	r1 += r2
    7165	a7 08 00 00 ff ff ff ff	r8 ^= -0x1
    7166	5f 18 00 00 00 00 00 00	r8 &= r1
    7167	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
    7169	5f 18 00 00 00 00 00 00	r8 &= r1
    7170	15 08 32 00 00 00 00 00	if r8 == 0x0 goto +0x32 <LBB70_56>
    7171	bf 86 00 00 00 00 00 00	r6 = r8
    7172	7b 4a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r4

000000000000e028 <LBB70_53>
    7173	07 06 00 00 ff ff ff ff	r6 += -0x1
    7174	bf 82 00 00 00 00 00 00	r2 = r8
    7175	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    7176	5f 62 00 00 00 00 00 00	r2 &= r6
    7177	bf 21 00 00 00 00 00 00	r1 = r2
    7178	77 01 00 00 01 00 00 00	r1 >>= 0x1
    7179	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    7181	5f 31 00 00 00 00 00 00	r1 &= r3
    7182	1f 12 00 00 00 00 00 00	r2 -= r1
    7183	bf 21 00 00 00 00 00 00	r1 = r2
    7184	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    7186	5f 31 00 00 00 00 00 00	r1 &= r3
    7187	77 02 00 00 02 00 00 00	r2 >>= 0x2
    7188	5f 32 00 00 00 00 00 00	r2 &= r3
    7189	0f 21 00 00 00 00 00 00	r1 += r2
    7190	bf 12 00 00 00 00 00 00	r2 = r1
    7191	77 02 00 00 04 00 00 00	r2 >>= 0x4
    7192	0f 21 00 00 00 00 00 00	r1 += r2
    7193	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    7195	5f 21 00 00 00 00 00 00	r1 &= r2
    7196	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    7198	2f 21 00 00 00 00 00 00	r1 *= r2
    7199	77 01 00 00 3b 00 00 00	r1 >>= 0x3b
    7200	0f 41 00 00 00 00 00 00	r1 += r4
    7201	5f 71 00 00 00 00 00 00	r1 &= r7
    7202	87 01 00 00 00 00 00 00	r1 = -r1
    7203	27 01 00 00 30 00 00 00	r1 *= 0x30
    7204	79 a9 70 fe 00 00 00 00	r9 = *(u64 *)(r10 - 0x190)
    7205	0f 19 00 00 00 00 00 00	r9 += r1
    7206	79 91 10 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x10)
    7207	5d 51 09 00 00 00 00 00	if r1 != r5 goto +0x9 <LBB70_55>
    7208	79 92 00 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x0)
    7209	79 a1 60 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a0)
    7210	bf 53 00 00 00 00 00 00	r3 = r5
    7211	bf 57 00 00 00 00 00 00	r7 = r5
    7212	85 10 00 00 b3 14 00 00	call 0x14b3 ; <memcmp>
    7213	bf 75 00 00 00 00 00 00	r5 = r7
    7214	79 a7 58 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x1a8)
    7215	79 a4 68 fe 00 00 00 00	r4 = *(u64 *)(r10 - 0x198)
    7216	15 00 12 00 00 00 00 00	if r0 == 0x0 goto +0x12 <LBB70_58>

000000000000e188 <LBB70_55>
    7217	5f 86 00 00 00 00 00 00	r6 &= r8
    7218	bf 68 00 00 00 00 00 00	r8 = r6
    7219	15 06 01 00 00 00 00 00	if r6 == 0x0 goto +0x1 <LBB70_56>
    7220	05 00 d0 ff 00 00 00 00	goto -0x30 <LBB70_53>

000000000000e1a8 <LBB70_56>
    7221	79 a2 50 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x1b0)
    7222	bf 21 00 00 00 00 00 00	r1 = r2
    7223	67 01 00 00 01 00 00 00	r1 <<= 0x1
    7224	5f 12 00 00 00 00 00 00	r2 &= r1
    7225	18 01 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r1 = -0x7f7f7f7f7f7f7f80 ll
    7227	5f 12 00 00 00 00 00 00	r2 &= r1
    7228	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB70_57>
    7229	05 00 44 00 00 00 00 00	goto +0x44 <LBB70_74>

000000000000e1f0 <LBB70_57>
    7230	79 a1 48 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1b8)
    7231	07 01 00 00 08 00 00 00	r1 += 0x8
    7232	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    7233	0f 14 00 00 00 00 00 00	r4 += r1
    7234	05 00 af ff 00 00 00 00	goto -0x51 <LBB70_51>

000000000000e218 <LBB70_58>
    7235	b7 07 00 00 01 00 00 00	r7 = 0x1
    7236	79 96 18 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x18)
    7237	79 98 28 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x28)
    7238	15 08 0b 00 00 00 00 00	if r8 == 0x0 goto +0xb <LBB70_63>
    7239	65 08 01 00 ff ff ff ff	if r8 s> -0x1 goto +0x1 <LBB70_61>
    7240	05 00 87 fe 00 00 00 00	goto -0x179 <LBB70_26>

000000000000e248 <LBB70_61>
    7241	bf 81 00 00 00 00 00 00	r1 = r8
    7242	b7 02 00 00 01 00 00 00	r2 = 0x1
    7243	85 10 00 00 49 f2 ff ff	call -0xdb7 ; <__rust_alloc>
    7244	bf 07 00 00 00 00 00 00	r7 = r0
    7245	55 07 04 00 00 00 00 00	if r7 != 0x0 goto +0x4 <LBB70_63>
    7246	b7 01 00 00 01 00 00 00	r1 = 0x1
    7247	bf 82 00 00 00 00 00 00	r2 = r8
    7248	85 10 00 00 56 05 00 00	call 0x556 ; <alloc::alloc::handle_alloc_error>
    7249	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e290 <LBB70_63>
    7250	bf 71 00 00 00 00 00 00	r1 = r7
    7251	bf 62 00 00 00 00 00 00	r2 = r6
    7252	bf 83 00 00 00 00 00 00	r3 = r8
    7253	85 10 00 00 02 14 00 00	call 0x1402 ; <memcpy>
    7254	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    7255	7b 1a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r1
    7256	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    7257	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    7258	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    7259	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    7260	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    7261	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB70_65>
    7262	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7263	b7 03 00 00 01 00 00 00	r3 = 0x1
    7264	85 10 00 00 4e f2 ff ff	call -0xdb2 ; <__rust_dealloc>

000000000000e308 <LBB70_65>
    7265	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    7266	b7 06 00 00 00 00 00 00	r6 = 0x0
    7267	15 02 81 fe 00 00 00 00	if r2 == 0x0 goto -0x17f <LBB70_32>
    7268	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    7269	b7 03 00 00 01 00 00 00	r3 = 0x1
    7270	85 10 00 00 48 f2 ff ff	call -0xdb8 ; <__rust_dealloc>
    7271	05 00 7d fe 00 00 00 00	goto -0x183 <LBB70_32>

000000000000e340 <LBB70_67>
    7272	07 06 00 00 20 00 00 00	r6 += 0x20
    7273	07 03 00 00 ff ff ff ff	r3 += -0x1
    7274	55 03 07 00 00 00 00 00	if r3 != 0x0 goto +0x7 <LBB70_70>

000000000000e358 <LBB70_68>
    7275	79 a2 c8 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x238)
    7276	15 02 0d 00 00 00 00 00	if r2 == 0x0 goto +0xd <LBB70_72>
    7277	67 02 00 00 05 00 00 00	r2 <<= 0x5
    7278	79 a1 00 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x200)
    7279	b7 03 00 00 08 00 00 00	r3 = 0x8
    7280	85 10 00 00 3e f2 ff ff	call -0xdc2 ; <__rust_dealloc>
    7281	05 00 08 00 00 00 00 00	goto +0x8 <LBB70_72>

000000000000e390 <LBB70_70>
    7282	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    7283	15 02 f4 ff 00 00 00 00	if r2 == 0x0 goto -0xc <LBB70_67>
    7284	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
    7285	bf 37 00 00 00 00 00 00	r7 = r3
    7286	b7 03 00 00 01 00 00 00	r3 = 0x1
    7287	85 10 00 00 37 f2 ff ff	call -0xdc9 ; <__rust_dealloc>
    7288	bf 73 00 00 00 00 00 00	r3 = r7
    7289	05 00 ee ff 00 00 00 00	goto -0x12 <LBB70_67>

000000000000e3d0 <LBB70_72>
    7290	95 00 00 00 00 00 00 00	exit

000000000000e3d8 <LBB70_73>
    7291	18 01 00 00 d2 8c 01 00 00 00 00 00 00 00 00 00	r1 = 0x18cd2 ll
    7293	b7 02 00 00 20 00 00 00	r2 = 0x20
    7294	18 03 00 00 b8 a0 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a0b8 ll
    7296	85 10 00 00 6a 07 00 00	call 0x76a ; <core::option::expect_failed>
    7297	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e410 <LBB70_74>
    7298	18 01 00 00 b2 8c 01 00 00 00 00 00 00 00 00 00	r1 = 0x18cb2 ll
    7300	b7 02 00 00 20 00 00 00	r2 = 0x20
    7301	18 03 00 00 d0 a0 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a0d0 ll
    7303	85 10 00 00 63 07 00 00	call 0x763 ; <core::option::expect_failed>
    7304	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e448 <LBB70_75>
    7305	bf 09 00 00 00 00 00 00	r9 = r0
    7306	79 a8 38 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0xc8)
    7307	15 06 06 00 00 00 00 00	if r6 == 0x0 goto +0x6 <LBB70_78>
    7308	bf 87 00 00 00 00 00 00	r7 = r8
    7309	07 07 00 00 08 00 00 00	r7 += 0x8
    7310	05 00 0a 00 00 00 00 00	goto +0xa <LBB70_80>

000000000000e478 <LBB70_77>
    7311	07 07 00 00 20 00 00 00	r7 += 0x20
    7312	07 06 00 00 ff ff ff ff	r6 += -0x1
    7313	55 06 07 00 00 00 00 00	if r6 != 0x0 goto +0x7 <LBB70_80>

000000000000e490 <LBB70_78>
    7314	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xc0)
    7315	15 02 0b 00 00 00 00 00	if r2 == 0x0 goto +0xb <LBB70_82>
    7316	67 02 00 00 05 00 00 00	r2 <<= 0x5
    7317	bf 81 00 00 00 00 00 00	r1 = r8
    7318	b7 03 00 00 08 00 00 00	r3 = 0x8
    7319	85 10 00 00 17 f2 ff ff	call -0xde9 ; <__rust_dealloc>
    7320	05 00 06 00 00 00 00 00	goto +0x6 <LBB70_82>

000000000000e4c8 <LBB70_80>
    7321	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    7322	15 02 f4 ff 00 00 00 00	if r2 == 0x0 goto -0xc <LBB70_77>
    7323	79 71 f8 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x8)
    7324	b7 03 00 00 01 00 00 00	r3 = 0x1
    7325	85 10 00 00 11 f2 ff ff	call -0xdef ; <__rust_dealloc>
    7326	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB70_77>

000000000000e4f8 <LBB70_82>
    7327	bf 90 00 00 00 00 00 00	r0 = r9

000000000000e500 <LBB70_83>
    7328	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    7329	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB70_85>

000000000000e510 <LBB70_84>
    7330	79 a1 d8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x228)
    7331	79 a2 e0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x220)
    7332	b7 03 00 00 01 00 00 00	r3 = 0x1
    7333	bf 06 00 00 00 00 00 00	r6 = r0
    7334	85 10 00 00 08 f2 ff ff	call -0xdf8 ; <__rust_dealloc>
    7335	bf 60 00 00 00 00 00 00	r0 = r6

000000000000e540 <LBB70_85>
    7336	7b 0a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r0
    7337	bf a3 00 00 00 00 00 00	r3 = r10
    7338	07 03 00 00 90 fe ff ff	r3 += -0x170
    7339	18 01 00 00 68 8c 01 00 00 00 00 00 00 00 00 00	r1 = 0x18c68 ll
    7341	b7 02 00 00 32 00 00 00	r2 = 0x32
    7342	18 04 00 00 80 a0 01 00 00 00 00 00 00 00 00 00	r4 = 0x1a080 ll
    7344	18 05 00 00 a0 a0 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a0a0 ll
    7346	85 10 00 00 8c 07 00 00	call 0x78c ; <core::result::unwrap_failed>
    7347	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e5a0 <LBB70_86>
    7348	18 01 00 00 80 9f 01 00 00 00 00 00 00 00 00 00	r1 = 0x19f80 ll
    7350	85 10 00 00 5f 01 00 00	call 0x15f ; <borsh::de::unexpected_eof_to_unexpected_length_of_input>
    7351	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    7352	15 01 ef ff 00 00 00 00	if r1 == 0x0 goto -0x11 <LBB70_85>
    7353	05 00 e8 ff 00 00 00 00	goto -0x18 <LBB70_84>

000000000000e5d0 <LBB70_87>
    7354	79 a3 f8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x208)
    7355	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB70_90>
    7356	79 a6 00 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x200)
    7357	07 06 00 00 08 00 00 00	r6 += 0x8
    7358	05 00 0b 00 00 00 00 00	goto +0xb <LBB70_92>

000000000000e5f8 <LBB70_89>
    7359	07 06 00 00 20 00 00 00	r6 += 0x20
    7360	07 03 00 00 ff ff ff ff	r3 += -0x1
    7361	55 03 08 00 00 00 00 00	if r3 != 0x0 goto +0x8 <LBB70_92>

000000000000e610 <LBB70_90>
    7362	79 a1 c8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x238)
    7363	15 01 4f 00 00 00 00 00	if r1 == 0x0 goto +0x4f <LBB70_112>
    7364	79 a2 c8 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x238)
    7365	67 02 00 00 05 00 00 00	r2 <<= 0x5
    7366	79 a1 00 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x200)
    7367	b7 03 00 00 08 00 00 00	r3 = 0x8
    7368	85 10 00 00 e6 f1 ff ff	call -0xe1a ; <__rust_dealloc>
    7369	05 00 49 00 00 00 00 00	goto +0x49 <LBB70_112>

000000000000e650 <LBB70_92>
    7370	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    7371	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB70_89>
    7372	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
    7373	bf 37 00 00 00 00 00 00	r7 = r3
    7374	b7 03 00 00 01 00 00 00	r3 = 0x1
    7375	85 10 00 00 df f1 ff ff	call -0xe21 ; <__rust_dealloc>
    7376	bf 73 00 00 00 00 00 00	r3 = r7
    7377	05 00 ed ff 00 00 00 00	goto -0x13 <LBB70_89>

000000000000e690 <LBB70_94>
    7378	79 a8 70 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x90)
    7379	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    7380	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB70_96>
    7381	79 a1 d8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x228)
    7382	79 a2 e0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x220)
    7383	b7 03 00 00 01 00 00 00	r3 = 0x1
    7384	85 10 00 00 d6 f1 ff ff	call -0xe2a ; <__rust_dealloc>

000000000000e6c8 <LBB70_96>
    7385	79 a3 f8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x208)
    7386	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB70_99>
    7387	79 a6 00 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x200)
    7388	07 06 00 00 08 00 00 00	r6 += 0x8
    7389	05 00 0b 00 00 00 00 00	goto +0xb <LBB70_101>

000000000000e6f0 <LBB70_98>
    7390	07 06 00 00 20 00 00 00	r6 += 0x20
    7391	07 03 00 00 ff ff ff ff	r3 += -0x1
    7392	55 03 08 00 00 00 00 00	if r3 != 0x0 goto +0x8 <LBB70_101>

000000000000e708 <LBB70_99>
    7393	79 a1 c8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x238)
    7394	15 01 34 00 00 00 00 00	if r1 == 0x0 goto +0x34 <LBB70_115>
    7395	79 a2 c8 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x238)
    7396	67 02 00 00 05 00 00 00	r2 <<= 0x5
    7397	79 a1 00 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x200)
    7398	b7 03 00 00 08 00 00 00	r3 = 0x8
    7399	85 10 00 00 c7 f1 ff ff	call -0xe39 ; <__rust_dealloc>
    7400	05 00 2e 00 00 00 00 00	goto +0x2e <LBB70_115>

000000000000e748 <LBB70_101>
    7401	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    7402	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB70_98>
    7403	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
    7404	bf 37 00 00 00 00 00 00	r7 = r3
    7405	b7 03 00 00 01 00 00 00	r3 = 0x1
    7406	85 10 00 00 c0 f1 ff ff	call -0xe40 ; <__rust_dealloc>
    7407	bf 73 00 00 00 00 00 00	r3 = r7
    7408	05 00 ed ff 00 00 00 00	goto -0x13 <LBB70_98>

000000000000e788 <LBB70_103>
    7409	79 a8 70 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x90)
    7410	bf a1 00 00 00 00 00 00	r1 = r10
    7411	07 01 00 00 38 ff ff ff	r1 += -0xc8
    7412	85 10 00 00 19 f2 ff ff	call -0xde7 ; <core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    7413	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    7414	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB70_105>
    7415	79 a1 d8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x228)
    7416	79 a2 e0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x220)
    7417	b7 03 00 00 01 00 00 00	r3 = 0x1
    7418	85 10 00 00 b4 f1 ff ff	call -0xe4c ; <__rust_dealloc>

000000000000e7d8 <LBB70_105>
    7419	79 a3 f8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x208)
    7420	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB70_108>
    7421	79 a6 00 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x200)
    7422	07 06 00 00 08 00 00 00	r6 += 0x8
    7423	05 00 0b 00 00 00 00 00	goto +0xb <LBB70_110>

000000000000e800 <LBB70_107>
    7424	07 06 00 00 20 00 00 00	r6 += 0x20
    7425	07 03 00 00 ff ff ff ff	r3 += -0x1
    7426	55 03 08 00 00 00 00 00	if r3 != 0x0 goto +0x8 <LBB70_110>

000000000000e818 <LBB70_108>
    7427	79 a1 c8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x238)
    7428	15 01 16 00 00 00 00 00	if r1 == 0x0 goto +0x16 <LBB70_113>
    7429	79 a2 c8 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x238)
    7430	67 02 00 00 05 00 00 00	r2 <<= 0x5
    7431	79 a1 00 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x200)
    7432	b7 03 00 00 08 00 00 00	r3 = 0x8
    7433	85 10 00 00 a5 f1 ff ff	call -0xe5b ; <__rust_dealloc>
    7434	05 00 10 00 00 00 00 00	goto +0x10 <LBB70_113>

000000000000e858 <LBB70_110>
    7435	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    7436	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB70_107>
    7437	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
    7438	bf 37 00 00 00 00 00 00	r7 = r3
    7439	b7 03 00 00 01 00 00 00	r3 = 0x1
    7440	85 10 00 00 9e f1 ff ff	call -0xe62 ; <__rust_dealloc>
    7441	bf 73 00 00 00 00 00 00	r3 = r7
    7442	05 00 ed ff 00 00 00 00	goto -0x13 <LBB70_107>

000000000000e898 <LBB70_112>
    7443	79 a0 70 fe 00 00 00 00	r0 = *(u64 *)(r10 - 0x190)
    7444	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    7445	15 01 92 ff 00 00 00 00	if r1 == 0x0 goto -0x6e <LBB70_85>
    7446	05 00 8b ff 00 00 00 00	goto -0x75 <LBB70_84>

000000000000e8b8 <LBB70_115>
    7447	79 a1 70 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x190)
    7448	bf 80 00 00 00 00 00 00	r0 = r8
    7449	15 01 8e ff 00 00 00 00	if r1 == 0x0 goto -0x72 <LBB70_85>
    7450	05 00 03 00 00 00 00 00	goto +0x3 <LBB70_116>

000000000000e8d8 <LBB70_113>
    7451	79 a1 70 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x190)
    7452	bf 80 00 00 00 00 00 00	r0 = r8
    7453	15 01 8a ff 00 00 00 00	if r1 == 0x0 goto -0x76 <LBB70_85>

000000000000e8f0 <LBB70_116>
    7454	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    7455	79 a2 70 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x190)
    7456	b7 03 00 00 01 00 00 00	r3 = 0x1
    7457	85 10 00 00 8d f1 ff ff	call -0xe73 ; <__rust_dealloc>
    7458	bf 80 00 00 00 00 00 00	r0 = r8
    7459	05 00 84 ff 00 00 00 00	goto -0x7c <LBB70_85>

000000000000e920 <LBB70_117>
    7460	b7 01 00 00 61 64 00 00	r1 = 0x6461
    7461	6b 16 10 00 00 00 00 00	*(u16 *)(r6 + 0x10) = r1
    7462	18 01 00 00 62 79 74 65 00 00 00 00 73 20 72 65	r1 = 0x6572207365747962 ll
    7464	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    7465	18 01 00 00 4e 6f 74 20 00 00 00 00 61 6c 6c 20	r1 = 0x206c6c6120746f4e ll
    7467	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    7468	b7 01 00 00 18 00 00 00	r1 = 0x18
    7469	b7 02 00 00 08 00 00 00	r2 = 0x8
    7470	85 10 00 00 66 f1 ff ff	call -0xe9a ; <__rust_alloc>
    7471	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB70_119>
    7472	b7 01 00 00 08 00 00 00	r1 = 0x8
    7473	b7 02 00 00 18 00 00 00	r2 = 0x18
    7474	85 10 00 00 74 04 00 00	call 0x474 ; <alloc::alloc::handle_alloc_error>
    7475	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e9a0 <LBB70_119>
    7476	b7 01 00 00 12 00 00 00	r1 = 0x12
    7477	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    7478	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    7479	7b 60 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r6
    7480	b7 01 00 00 15 00 00 00	r1 = 0x15
    7481	bf 02 00 00 00 00 00 00	r2 = r0
    7482	18 03 00 00 28 9f 01 00 00 00 00 00 00 00 00 00	r3 = 0x19f28 ll
    7484	85 10 00 00 f7 01 00 00	call 0x1f7 ; <std::io::error::Error::_new>
    7485	7b 0a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r0
    7486	79 a1 e0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x220)
    7487	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB70_121>
    7488	79 a1 d8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x228)
    7489	79 a2 e0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x220)
    7490	b7 03 00 00 01 00 00 00	r3 = 0x1
    7491	85 10 00 00 6b f1 ff ff	call -0xe95 ; <__rust_dealloc>

000000000000ea20 <LBB70_121>
    7492	79 a3 f8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x208)
    7493	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB70_124>
    7494	79 a6 00 fe 00 00 00 00	r6 = *(u64 *)(r10 - 0x200)
    7495	07 06 00 00 08 00 00 00	r6 += 0x8
    7496	05 00 0b 00 00 00 00 00	goto +0xb <LBB70_126>

000000000000ea48 <LBB70_123>
    7497	07 06 00 00 20 00 00 00	r6 += 0x20
    7498	07 03 00 00 ff ff ff ff	r3 += -0x1
    7499	55 03 08 00 00 00 00 00	if r3 != 0x0 goto +0x8 <LBB70_126>

000000000000ea60 <LBB70_124>
    7500	79 a1 c8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x238)
    7501	15 01 0e 00 00 00 00 00	if r1 == 0x0 goto +0xe <LBB70_128>
    7502	79 a2 c8 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x238)
    7503	67 02 00 00 05 00 00 00	r2 <<= 0x5
    7504	79 a1 00 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x200)
    7505	b7 03 00 00 08 00 00 00	r3 = 0x8
    7506	85 10 00 00 5c f1 ff ff	call -0xea4 ; <__rust_dealloc>
    7507	05 00 08 00 00 00 00 00	goto +0x8 <LBB70_128>

000000000000eaa0 <LBB70_126>
    7508	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    7509	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB70_123>
    7510	79 61 f8 ff 00 00 00 00	r1 = *(u64 *)(r6 - 0x8)
    7511	bf 39 00 00 00 00 00 00	r9 = r3
    7512	b7 03 00 00 01 00 00 00	r3 = 0x1
    7513	85 10 00 00 55 f1 ff ff	call -0xeab ; <__rust_dealloc>
    7514	bf 93 00 00 00 00 00 00	r3 = r9
    7515	05 00 ed ff 00 00 00 00	goto -0x13 <LBB70_123>

000000000000eae0 <LBB70_128>
    7516	79 a1 70 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x190)
    7517	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB70_130>
    7518	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    7519	79 a2 70 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x190)
    7520	b7 03 00 00 01 00 00 00	r3 = 0x1
    7521	85 10 00 00 4d f1 ff ff	call -0xeb3 ; <__rust_dealloc>

000000000000eb10 <LBB70_130>
    7522	bf 71 00 00 00 00 00 00	r1 = r7
    7523	85 10 00 00 aa f1 ff ff	call -0xe56 ; <core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    7524	bf 81 00 00 00 00 00 00	r1 = r8
    7525	85 10 00 00 a8 f1 ff ff	call -0xe58 ; <core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String,alloc::vec::Vec<u8>>>>
    7526	79 a0 60 fe 00 00 00 00	r0 = *(u64 *)(r10 - 0x1a0)
    7527	05 00 40 ff 00 00 00 00	goto -0xc0 <LBB70_85>

000000000000eb40 <std::io::error::repr_bitpacked::kind_from_prim>
    7528	67 01 00 00 20 00 00 00	r1 <<= 0x20
    7529	77 01 00 00 20 00 00 00	r1 >>= 0x20
    7530	65 01 09 00 13 00 00 00	if r1 s> 0x13 goto +0x9 <LBB0_28>
    7531	65 01 17 00 09 00 00 00	if r1 s> 0x9 goto +0x17 <LBB0_15>
    7532	65 01 24 00 04 00 00 00	if r1 s> 0x4 goto +0x24 <LBB0_9>
    7533	65 01 35 00 01 00 00 00	if r1 s> 0x1 goto +0x35 <LBB0_6>
    7534	b7 00 00 00 00 00 00 00	r0 = 0x0
    7535	15 01 94 00 00 00 00 00	if r1 == 0x0 goto +0x94 <LBB0_97>
    7536	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB0_56>
    7537	05 00 91 00 00 00 00 00	goto +0x91 <LBB0_95>

000000000000eb90 <LBB0_56>
    7538	b7 00 00 00 01 00 00 00	r0 = 0x1
    7539	05 00 90 00 00 00 00 00	goto +0x90 <LBB0_97>

000000000000eba0 <LBB0_28>
    7540	65 01 07 00 1d 00 00 00	if r1 s> 0x1d goto +0x7 <LBB0_42>
    7541	65 01 21 00 18 00 00 00	if r1 s> 0x18 goto +0x21 <LBB0_36>
    7542	65 01 32 00 15 00 00 00	if r1 s> 0x15 goto +0x32 <LBB0_33>
    7543	15 01 5b 00 14 00 00 00	if r1 == 0x14 goto +0x5b <LBB0_75>
    7544	15 01 01 00 15 00 00 00	if r1 == 0x15 goto +0x1 <LBB0_76>
    7545	05 00 89 00 00 00 00 00	goto +0x89 <LBB0_95>

000000000000ebd0 <LBB0_76>
    7546	b7 00 00 00 15 00 00 00	r0 = 0x15
    7547	05 00 88 00 00 00 00 00	goto +0x88 <LBB0_97>

000000000000ebe0 <LBB0_42>
    7548	65 01 0d 00 22 00 00 00	if r1 s> 0x22 goto +0xd <LBB0_49>
    7549	65 01 31 00 1f 00 00 00	if r1 s> 0x1f goto +0x31 <LBB0_46>
    7550	15 01 56 00 1e 00 00 00	if r1 == 0x1e goto +0x56 <LBB0_85>
    7551	15 01 01 00 1f 00 00 00	if r1 == 0x1f goto +0x1 <LBB0_86>
    7552	05 00 82 00 00 00 00 00	goto +0x82 <LBB0_95>

000000000000ec08 <LBB0_86>
    7553	b7 00 00 00 1f 00 00 00	r0 = 0x1f
    7554	05 00 81 00 00 00 00 00	goto +0x81 <LBB0_97>

000000000000ec18 <LBB0_15>
    7555	65 01 19 00 0e 00 00 00	if r1 s> 0xe goto +0x19 <LBB0_22>
    7556	65 01 30 00 0b 00 00 00	if r1 s> 0xb goto +0x30 <LBB0_19>
    7557	15 01 51 00 0a 00 00 00	if r1 == 0xa goto +0x51 <LBB0_65>
    7558	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB0_66>
    7559	05 00 7b 00 00 00 00 00	goto +0x7b <LBB0_95>

000000000000ec40 <LBB0_66>
    7560	b7 00 00 00 0b 00 00 00	r0 = 0xb
    7561	05 00 7a 00 00 00 00 00	goto +0x7a <LBB0_97>

000000000000ec50 <LBB0_49>
    7562	65 01 30 00 25 00 00 00	if r1 s> 0x25 goto +0x30 <LBB0_53>
    7563	15 01 4d 00 23 00 00 00	if r1 == 0x23 goto +0x4d <LBB0_90>
    7564	15 01 4e 00 24 00 00 00	if r1 == 0x24 goto +0x4e <LBB0_93>
    7565	15 01 01 00 25 00 00 00	if r1 == 0x25 goto +0x1 <LBB0_92>
    7566	05 00 74 00 00 00 00 00	goto +0x74 <LBB0_95>

000000000000ec78 <LBB0_92>
    7567	b7 00 00 00 25 00 00 00	r0 = 0x25
    7568	05 00 73 00 00 00 00 00	goto +0x73 <LBB0_97>

000000000000ec88 <LBB0_9>
    7569	65 01 2f 00 06 00 00 00	if r1 s> 0x6 goto +0x2f <LBB0_12>
    7570	15 01 4a 00 05 00 00 00	if r1 == 0x5 goto +0x4a <LBB0_60>
    7571	15 01 01 00 06 00 00 00	if r1 == 0x6 goto +0x1 <LBB0_61>
    7572	05 00 6e 00 00 00 00 00	goto +0x6e <LBB0_95>

000000000000eca8 <LBB0_61>
    7573	b7 00 00 00 06 00 00 00	r0 = 0x6
    7574	05 00 6d 00 00 00 00 00	goto +0x6d <LBB0_97>

000000000000ecb8 <LBB0_36>
    7575	65 01 2f 00 1a 00 00 00	if r1 s> 0x1a goto +0x2f <LBB0_39>
    7576	15 01 46 00 19 00 00 00	if r1 == 0x19 goto +0x46 <LBB0_80>
    7577	15 01 01 00 1a 00 00 00	if r1 == 0x1a goto +0x1 <LBB0_81>
    7578	05 00 68 00 00 00 00 00	goto +0x68 <LBB0_95>

000000000000ecd8 <LBB0_81>
    7579	b7 00 00 00 1a 00 00 00	r0 = 0x1a
    7580	05 00 67 00 00 00 00 00	goto +0x67 <LBB0_97>

000000000000ece8 <LBB0_22>
    7581	65 01 2f 00 10 00 00 00	if r1 s> 0x10 goto +0x2f <LBB0_25>
    7582	15 01 42 00 0f 00 00 00	if r1 == 0xf goto +0x42 <LBB0_70>
    7583	15 01 01 00 10 00 00 00	if r1 == 0x10 goto +0x1 <LBB0_71>
    7584	05 00 62 00 00 00 00 00	goto +0x62 <LBB0_95>

000000000000ed08 <LBB0_71>
    7585	b7 00 00 00 10 00 00 00	r0 = 0x10
    7586	05 00 61 00 00 00 00 00	goto +0x61 <LBB0_97>

000000000000ed18 <LBB0_6>
    7587	15 01 3f 00 02 00 00 00	if r1 == 0x2 goto +0x3f <LBB0_57>
    7588	15 01 40 00 03 00 00 00	if r1 == 0x3 goto +0x40 <LBB0_58>
    7589	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB0_59>
    7590	05 00 5c 00 00 00 00 00	goto +0x5c <LBB0_95>

000000000000ed38 <LBB0_59>
    7591	b7 00 00 00 04 00 00 00	r0 = 0x4
    7592	05 00 5b 00 00 00 00 00	goto +0x5b <LBB0_97>

000000000000ed48 <LBB0_33>
    7593	15 01 3d 00 16 00 00 00	if r1 == 0x16 goto +0x3d <LBB0_77>
    7594	15 01 3e 00 17 00 00 00	if r1 == 0x17 goto +0x3e <LBB0_78>
    7595	15 01 01 00 18 00 00 00	if r1 == 0x18 goto +0x1 <LBB0_79>
    7596	05 00 56 00 00 00 00 00	goto +0x56 <LBB0_95>

000000000000ed68 <LBB0_79>
    7597	b7 00 00 00 18 00 00 00	r0 = 0x18
    7598	05 00 55 00 00 00 00 00	goto +0x55 <LBB0_97>

000000000000ed78 <LBB0_46>
    7599	15 01 3b 00 20 00 00 00	if r1 == 0x20 goto +0x3b <LBB0_87>
    7600	15 01 3c 00 21 00 00 00	if r1 == 0x21 goto +0x3c <LBB0_88>
    7601	15 01 01 00 22 00 00 00	if r1 == 0x22 goto +0x1 <LBB0_89>
    7602	05 00 50 00 00 00 00 00	goto +0x50 <LBB0_95>

000000000000ed98 <LBB0_89>
    7603	b7 00 00 00 22 00 00 00	r0 = 0x22
    7604	05 00 4f 00 00 00 00 00	goto +0x4f <LBB0_97>

000000000000eda8 <LBB0_19>
    7605	15 01 39 00 0c 00 00 00	if r1 == 0xc goto +0x39 <LBB0_67>
    7606	15 01 3a 00 0d 00 00 00	if r1 == 0xd goto +0x3a <LBB0_68>
    7607	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB0_69>
    7608	05 00 4a 00 00 00 00 00	goto +0x4a <LBB0_95>

000000000000edc8 <LBB0_69>
    7609	b7 00 00 00 0e 00 00 00	r0 = 0xe
    7610	05 00 49 00 00 00 00 00	goto +0x49 <LBB0_97>

000000000000edd8 <LBB0_53>
    7611	15 01 37 00 26 00 00 00	if r1 == 0x26 goto +0x37 <LBB0_94>
    7612	15 01 38 00 27 00 00 00	if r1 == 0x27 goto +0x38 <LBB0_91>
    7613	15 01 01 00 28 00 00 00	if r1 == 0x28 goto +0x1 <LBB0_96>
    7614	05 00 44 00 00 00 00 00	goto +0x44 <LBB0_95>

000000000000edf8 <LBB0_96>
    7615	b7 00 00 00 28 00 00 00	r0 = 0x28
    7616	05 00 43 00 00 00 00 00	goto +0x43 <LBB0_97>

000000000000ee08 <LBB0_12>
    7617	15 01 35 00 07 00 00 00	if r1 == 0x7 goto +0x35 <LBB0_62>
    7618	15 01 36 00 08 00 00 00	if r1 == 0x8 goto +0x36 <LBB0_63>
    7619	15 01 01 00 09 00 00 00	if r1 == 0x9 goto +0x1 <LBB0_64>
    7620	05 00 3e 00 00 00 00 00	goto +0x3e <LBB0_95>

000000000000ee28 <LBB0_64>
    7621	b7 00 00 00 09 00 00 00	r0 = 0x9
    7622	05 00 3d 00 00 00 00 00	goto +0x3d <LBB0_97>

000000000000ee38 <LBB0_39>
    7623	15 01 33 00 1b 00 00 00	if r1 == 0x1b goto +0x33 <LBB0_82>
    7624	15 01 34 00 1c 00 00 00	if r1 == 0x1c goto +0x34 <LBB0_83>
    7625	15 01 01 00 1d 00 00 00	if r1 == 0x1d goto +0x1 <LBB0_84>
    7626	05 00 38 00 00 00 00 00	goto +0x38 <LBB0_95>

000000000000ee58 <LBB0_84>
    7627	b7 00 00 00 1d 00 00 00	r0 = 0x1d
    7628	05 00 37 00 00 00 00 00	goto +0x37 <LBB0_97>

000000000000ee68 <LBB0_25>
    7629	15 01 31 00 11 00 00 00	if r1 == 0x11 goto +0x31 <LBB0_72>
    7630	15 01 32 00 12 00 00 00	if r1 == 0x12 goto +0x32 <LBB0_73>
    7631	15 01 01 00 13 00 00 00	if r1 == 0x13 goto +0x1 <LBB0_74>
    7632	05 00 32 00 00 00 00 00	goto +0x32 <LBB0_95>

000000000000ee88 <LBB0_74>
    7633	b7 00 00 00 13 00 00 00	r0 = 0x13
    7634	05 00 31 00 00 00 00 00	goto +0x31 <LBB0_97>

000000000000ee98 <LBB0_75>
    7635	b7 00 00 00 14 00 00 00	r0 = 0x14
    7636	05 00 2f 00 00 00 00 00	goto +0x2f <LBB0_97>

000000000000eea8 <LBB0_85>
    7637	b7 00 00 00 1e 00 00 00	r0 = 0x1e
    7638	05 00 2d 00 00 00 00 00	goto +0x2d <LBB0_97>

000000000000eeb8 <LBB0_65>
    7639	b7 00 00 00 0a 00 00 00	r0 = 0xa
    7640	05 00 2b 00 00 00 00 00	goto +0x2b <LBB0_97>

000000000000eec8 <LBB0_90>
    7641	b7 00 00 00 23 00 00 00	r0 = 0x23
    7642	05 00 29 00 00 00 00 00	goto +0x29 <LBB0_97>

000000000000eed8 <LBB0_93>
    7643	b7 00 00 00 24 00 00 00	r0 = 0x24
    7644	05 00 27 00 00 00 00 00	goto +0x27 <LBB0_97>

000000000000eee8 <LBB0_60>
    7645	b7 00 00 00 05 00 00 00	r0 = 0x5
    7646	05 00 25 00 00 00 00 00	goto +0x25 <LBB0_97>

000000000000eef8 <LBB0_80>
    7647	b7 00 00 00 19 00 00 00	r0 = 0x19
    7648	05 00 23 00 00 00 00 00	goto +0x23 <LBB0_97>

000000000000ef08 <LBB0_70>
    7649	b7 00 00 00 0f 00 00 00	r0 = 0xf
    7650	05 00 21 00 00 00 00 00	goto +0x21 <LBB0_97>

000000000000ef18 <LBB0_57>
    7651	b7 00 00 00 02 00 00 00	r0 = 0x2
    7652	05 00 1f 00 00 00 00 00	goto +0x1f <LBB0_97>

000000000000ef28 <LBB0_58>
    7653	b7 00 00 00 03 00 00 00	r0 = 0x3
    7654	05 00 1d 00 00 00 00 00	goto +0x1d <LBB0_97>

000000000000ef38 <LBB0_77>
    7655	b7 00 00 00 16 00 00 00	r0 = 0x16
    7656	05 00 1b 00 00 00 00 00	goto +0x1b <LBB0_97>

000000000000ef48 <LBB0_78>
    7657	b7 00 00 00 17 00 00 00	r0 = 0x17
    7658	05 00 19 00 00 00 00 00	goto +0x19 <LBB0_97>

000000000000ef58 <LBB0_87>
    7659	b7 00 00 00 20 00 00 00	r0 = 0x20
    7660	05 00 17 00 00 00 00 00	goto +0x17 <LBB0_97>

000000000000ef68 <LBB0_88>
    7661	b7 00 00 00 21 00 00 00	r0 = 0x21
    7662	05 00 15 00 00 00 00 00	goto +0x15 <LBB0_97>

000000000000ef78 <LBB0_67>
    7663	b7 00 00 00 0c 00 00 00	r0 = 0xc
    7664	05 00 13 00 00 00 00 00	goto +0x13 <LBB0_97>

000000000000ef88 <LBB0_68>
    7665	b7 00 00 00 0d 00 00 00	r0 = 0xd
    7666	05 00 11 00 00 00 00 00	goto +0x11 <LBB0_97>

000000000000ef98 <LBB0_94>
    7667	b7 00 00 00 26 00 00 00	r0 = 0x26
    7668	05 00 0f 00 00 00 00 00	goto +0xf <LBB0_97>

000000000000efa8 <LBB0_91>
    7669	b7 00 00 00 27 00 00 00	r0 = 0x27
    7670	05 00 0d 00 00 00 00 00	goto +0xd <LBB0_97>

000000000000efb8 <LBB0_62>
    7671	b7 00 00 00 07 00 00 00	r0 = 0x7
    7672	05 00 0b 00 00 00 00 00	goto +0xb <LBB0_97>

000000000000efc8 <LBB0_63>
    7673	b7 00 00 00 08 00 00 00	r0 = 0x8
    7674	05 00 09 00 00 00 00 00	goto +0x9 <LBB0_97>

000000000000efd8 <LBB0_82>
    7675	b7 00 00 00 1b 00 00 00	r0 = 0x1b
    7676	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_97>

000000000000efe8 <LBB0_83>
    7677	b7 00 00 00 1c 00 00 00	r0 = 0x1c
    7678	05 00 05 00 00 00 00 00	goto +0x5 <LBB0_97>

000000000000eff8 <LBB0_72>
    7679	b7 00 00 00 11 00 00 00	r0 = 0x11
    7680	05 00 03 00 00 00 00 00	goto +0x3 <LBB0_97>

000000000000f008 <LBB0_73>
    7681	b7 00 00 00 12 00 00 00	r0 = 0x12
    7682	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_97>

000000000000f018 <LBB0_95>
    7683	b7 00 00 00 29 00 00 00	r0 = 0x29

000000000000f020 <LBB0_97>
    7684	95 00 00 00 00 00 00 00	exit

000000000000f028 <core::ptr::drop_in_place<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError>>
    7685	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    7686	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB1_2>
    7687	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7688	b7 03 00 00 01 00 00 00	r3 = 0x1
    7689	85 10 00 00 a5 f0 ff ff	call -0xf5b ; <__rust_dealloc>

000000000000f050 <LBB1_2>
    7690	95 00 00 00 00 00 00 00	exit

000000000000f058 <core::error::Error::cause>
    7691	b7 02 00 00 00 00 00 00	r2 = 0x0
    7692	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    7693	95 00 00 00 00 00 00 00	exit

000000000000f070 <core::error::Error::provide>
    7694	95 00 00 00 00 00 00 00	exit

000000000000f078 <core::error::Error::type_id>
    7695	18 02 00 00 b4 06 af 33 00 00 00 00 02 af d4 57	r2 = 0x57d4af0233af06b4 ll
    7697	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    7698	18 02 00 00 eb eb 4a 38 00 00 00 00 ff c6 fa 26	r2 = 0x26fac6ff384aebeb ll
    7700	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    7701	95 00 00 00 00 00 00 00	exit

000000000000f0b0 <borsh::de::unexpected_eof_to_unexpected_length_of_input>
    7702	bf 16 00 00 00 00 00 00	r6 = r1
    7703	bf 68 00 00 00 00 00 00	r8 = r6
    7704	57 08 00 00 03 00 00 00	r8 &= 0x3
    7705	65 08 03 00 01 00 00 00	if r8 s> 0x1 goto +0x3 <LBB5_3>
    7706	15 08 07 00 00 00 00 00	if r8 == 0x0 goto +0x7 <LBB5_5>
    7707	71 60 0f 00 00 00 00 00	r0 = *(u8 *)(r6 + 0xf)
    7708	05 00 0b 00 00 00 00 00	goto +0xb <LBB5_8>

000000000000f0e8 <LBB5_3>
    7709	15 08 06 00 02 00 00 00	if r8 == 0x2 goto +0x6 <LBB5_6>
    7710	bf 61 00 00 00 00 00 00	r1 = r6
    7711	77 01 00 00 20 00 00 00	r1 >>= 0x20
    7712	85 10 00 00 47 ff ff ff	call -0xb9 ; <std::io::error::repr_bitpacked::kind_from_prim>
    7713	05 00 05 00 00 00 00 00	goto +0x5 <LBB5_7>

000000000000f110 <LBB5_5>
    7714	71 60 10 00 00 00 00 00	r0 = *(u8 *)(r6 + 0x10)
    7715	05 00 04 00 00 00 00 00	goto +0x4 <LBB5_8>

000000000000f120 <LBB5_6>
    7716	bf 61 00 00 00 00 00 00	r1 = r6
    7717	77 01 00 00 20 00 00 00	r1 >>= 0x20
    7718	85 10 00 00 91 02 00 00	call 0x291 ; <std::sys::sbf::decode_error_kind>

000000000000f138 <LBB5_7>
    7719	57 00 00 00 ff 00 00 00	r0 &= 0xff

000000000000f140 <LBB5_8>
    7720	57 00 00 00 ff 00 00 00	r0 &= 0xff
    7721	bf 67 00 00 00 00 00 00	r7 = r6
    7722	55 00 3a 00 25 00 00 00	if r0 != 0x25 goto +0x3a <LBB5_18>
    7723	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    7724	b7 02 00 00 01 00 00 00	r2 = 0x1
    7725	85 10 00 00 67 f0 ff ff	call -0xf99 ; <__rust_alloc>
    7726	bf 07 00 00 00 00 00 00	r7 = r0
    7727	55 07 04 00 00 00 00 00	if r7 != 0x0 goto +0x4 <LBB5_11>
    7728	b7 01 00 00 01 00 00 00	r1 = 0x1
    7729	b7 02 00 00 1a 00 00 00	r2 = 0x1a
    7730	85 10 00 00 74 03 00 00	call 0x374 ; <alloc::alloc::handle_alloc_error>
    7731	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f1a0 <LBB5_11>
    7732	b7 01 00 00 75 74 00 00	r1 = 0x7475
    7733	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    7734	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    7736	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    7737	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    7739	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    7740	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    7742	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    7743	b7 01 00 00 18 00 00 00	r1 = 0x18
    7744	b7 02 00 00 08 00 00 00	r2 = 0x8
    7745	85 10 00 00 53 f0 ff ff	call -0xfad ; <__rust_alloc>
    7746	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB5_13>
    7747	b7 01 00 00 08 00 00 00	r1 = 0x8
    7748	b7 02 00 00 18 00 00 00	r2 = 0x18
    7749	85 10 00 00 61 03 00 00	call 0x361 ; <alloc::alloc::handle_alloc_error>
    7750	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f238 <LBB5_13>
    7751	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    7752	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    7753	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    7754	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    7755	b7 01 00 00 15 00 00 00	r1 = 0x15
    7756	bf 02 00 00 00 00 00 00	r2 = r0
    7757	18 03 00 00 08 a1 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a108 ll
    7759	85 10 00 00 e4 00 00 00	call 0xe4 ; <std::io::error::Error::_new>
    7760	bf 07 00 00 00 00 00 00	r7 = r0
    7761	bf 81 00 00 00 00 00 00	r1 = r8
    7762	07 01 00 00 fe ff ff ff	r1 += -0x2
    7763	b7 02 00 00 02 00 00 00	r2 = 0x2
    7764	2d 12 10 00 00 00 00 00	if r2 > r1 goto +0x10 <LBB5_18>
    7765	15 08 0f 00 00 00 00 00	if r8 == 0x0 goto +0xf <LBB5_18>
    7766	79 68 ff ff 00 00 00 00	r8 = *(u64 *)(r6 - 0x1)
    7767	79 69 07 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x7)
    7768	79 92 00 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x0)
    7769	bf 81 00 00 00 00 00 00	r1 = r8
    7770	8d 00 00 00 02 00 00 00	callx r2
    7771	07 06 00 00 ff ff ff ff	r6 += -0x1
    7772	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    7773	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB5_17>
    7774	79 93 10 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x10)
    7775	bf 81 00 00 00 00 00 00	r1 = r8
    7776	85 10 00 00 4e f0 ff ff	call -0xfb2 ; <__rust_dealloc>

000000000000f308 <LBB5_17>
    7777	bf 61 00 00 00 00 00 00	r1 = r6
    7778	b7 02 00 00 18 00 00 00	r2 = 0x18
    7779	b7 03 00 00 08 00 00 00	r3 = 0x8
    7780	85 10 00 00 4a f0 ff ff	call -0xfb6 ; <__rust_dealloc>

000000000000f328 <LBB5_18>
    7781	bf 70 00 00 00 00 00 00	r0 = r7
    7782	95 00 00 00 00 00 00 00	exit

000000000000f338 <<&T as core::fmt::Debug>::fmt>
    7783	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    7784	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    7785	79 33 08 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x8)
    7786	79 33 18 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x18)
    7787	8d 00 00 00 03 00 00 00	callx r3
    7788	95 00 00 00 00 00 00 00	exit

000000000000f368 <<&T as core::fmt::Debug>::fmt>
    7789	bf 23 00 00 00 00 00 00	r3 = r2
    7790	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    7791	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7792	85 10 00 00 e4 0a 00 00	call 0xae4 ; <<str as core::fmt::Debug>::fmt>
    7793	95 00 00 00 00 00 00 00	exit

000000000000f390 <core::fmt::num::<impl core::fmt::Debug for i32>::fmt>
    7794	bf 26 00 00 00 00 00 00	r6 = r2
    7795	bf 17 00 00 00 00 00 00	r7 = r1
    7796	bf 61 00 00 00 00 00 00	r1 = r6
    7797	85 10 00 00 82 0a 00 00	call 0xa82 ; <core::fmt::Formatter::debug_lower_hex>
    7798	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB39_2>
    7799	bf 61 00 00 00 00 00 00	r1 = r6
    7800	85 10 00 00 83 0a 00 00	call 0xa83 ; <core::fmt::Formatter::debug_upper_hex>
    7801	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB39_4>
    7802	05 00 08 00 00 00 00 00	goto +0x8 <LBB39_3>

000000000000f3d8 <LBB39_4>
    7803	bf 71 00 00 00 00 00 00	r1 = r7
    7804	bf 62 00 00 00 00 00 00	r2 = r6
    7805	85 10 00 00 67 10 00 00	call 0x1067 ; <core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt>
    7806	05 00 07 00 00 00 00 00	goto +0x7 <LBB39_5>

000000000000f3f8 <LBB39_2>
    7807	bf 71 00 00 00 00 00 00	r1 = r7
    7808	bf 62 00 00 00 00 00 00	r2 = r6
    7809	85 10 00 00 33 10 00 00	call 0x1033 ; <core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt>
    7810	05 00 03 00 00 00 00 00	goto +0x3 <LBB39_5>

000000000000f418 <LBB39_3>
    7811	bf 71 00 00 00 00 00 00	r1 = r7
    7812	bf 62 00 00 00 00 00 00	r2 = r6
    7813	85 10 00 00 41 11 00 00	call 0x1141 ; <core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt>

000000000000f430 <LBB39_5>
    7814	95 00 00 00 00 00 00 00	exit

000000000000f438 <core::ptr::drop_in_place<&mut std::io::Write::write_fmt::Adapter<std::sys::sbf::stdio::Stderr>>>
    7815	95 00 00 00 00 00 00 00	exit

000000000000f440 <core::ptr::drop_in_place<i32>>
    7816	95 00 00 00 00 00 00 00	exit

000000000000f448 <core::ptr::drop_in_place<bool>>
    7817	95 00 00 00 00 00 00 00	exit

000000000000f450 <core::ptr::drop_in_place<alloc::string::String>>
    7818	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    7819	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB54_2>
    7820	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7821	b7 03 00 00 01 00 00 00	r3 = 0x1
    7822	85 10 00 00 20 f0 ff ff	call -0xfe0 ; <__rust_dealloc>

000000000000f478 <LBB54_2>
    7823	95 00 00 00 00 00 00 00	exit

000000000000f480 <<alloc::string::String as core::fmt::Debug>::fmt>
    7824	bf 23 00 00 00 00 00 00	r3 = r2
    7825	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    7826	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7827	85 10 00 00 c1 0a 00 00	call 0xac1 ; <<str as core::fmt::Debug>::fmt>
    7828	95 00 00 00 00 00 00 00	exit

000000000000f4a8 <std::io::error::repr_bitpacked::kind_from_prim>
    7829	67 01 00 00 20 00 00 00	r1 <<= 0x20
    7830	77 01 00 00 20 00 00 00	r1 >>= 0x20
    7831	65 01 09 00 13 00 00 00	if r1 s> 0x13 goto +0x9 <LBB208_28>
    7832	65 01 17 00 09 00 00 00	if r1 s> 0x9 goto +0x17 <LBB208_15>
    7833	65 01 24 00 04 00 00 00	if r1 s> 0x4 goto +0x24 <LBB208_9>
    7834	65 01 35 00 01 00 00 00	if r1 s> 0x1 goto +0x35 <LBB208_6>
    7835	b7 00 00 00 00 00 00 00	r0 = 0x0
    7836	15 01 94 00 00 00 00 00	if r1 == 0x0 goto +0x94 <LBB208_97>
    7837	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB208_56>
    7838	05 00 91 00 00 00 00 00	goto +0x91 <LBB208_95>

000000000000f4f8 <LBB208_56>
    7839	b7 00 00 00 01 00 00 00	r0 = 0x1
    7840	05 00 90 00 00 00 00 00	goto +0x90 <LBB208_97>

000000000000f508 <LBB208_28>
    7841	65 01 07 00 1d 00 00 00	if r1 s> 0x1d goto +0x7 <LBB208_42>
    7842	65 01 21 00 18 00 00 00	if r1 s> 0x18 goto +0x21 <LBB208_36>
    7843	65 01 32 00 15 00 00 00	if r1 s> 0x15 goto +0x32 <LBB208_33>
    7844	15 01 5b 00 14 00 00 00	if r1 == 0x14 goto +0x5b <LBB208_75>
    7845	15 01 01 00 15 00 00 00	if r1 == 0x15 goto +0x1 <LBB208_76>
    7846	05 00 89 00 00 00 00 00	goto +0x89 <LBB208_95>

000000000000f538 <LBB208_76>
    7847	b7 00 00 00 15 00 00 00	r0 = 0x15
    7848	05 00 88 00 00 00 00 00	goto +0x88 <LBB208_97>

000000000000f548 <LBB208_42>
    7849	65 01 0d 00 22 00 00 00	if r1 s> 0x22 goto +0xd <LBB208_49>
    7850	65 01 31 00 1f 00 00 00	if r1 s> 0x1f goto +0x31 <LBB208_46>
    7851	15 01 56 00 1e 00 00 00	if r1 == 0x1e goto +0x56 <LBB208_85>
    7852	15 01 01 00 1f 00 00 00	if r1 == 0x1f goto +0x1 <LBB208_86>
    7853	05 00 82 00 00 00 00 00	goto +0x82 <LBB208_95>

000000000000f570 <LBB208_86>
    7854	b7 00 00 00 1f 00 00 00	r0 = 0x1f
    7855	05 00 81 00 00 00 00 00	goto +0x81 <LBB208_97>

000000000000f580 <LBB208_15>
    7856	65 01 19 00 0e 00 00 00	if r1 s> 0xe goto +0x19 <LBB208_22>
    7857	65 01 30 00 0b 00 00 00	if r1 s> 0xb goto +0x30 <LBB208_19>
    7858	15 01 51 00 0a 00 00 00	if r1 == 0xa goto +0x51 <LBB208_65>
    7859	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB208_66>
    7860	05 00 7b 00 00 00 00 00	goto +0x7b <LBB208_95>

000000000000f5a8 <LBB208_66>
    7861	b7 00 00 00 0b 00 00 00	r0 = 0xb
    7862	05 00 7a 00 00 00 00 00	goto +0x7a <LBB208_97>

000000000000f5b8 <LBB208_49>
    7863	65 01 30 00 25 00 00 00	if r1 s> 0x25 goto +0x30 <LBB208_53>
    7864	15 01 4d 00 23 00 00 00	if r1 == 0x23 goto +0x4d <LBB208_90>
    7865	15 01 4e 00 24 00 00 00	if r1 == 0x24 goto +0x4e <LBB208_93>
    7866	15 01 01 00 25 00 00 00	if r1 == 0x25 goto +0x1 <LBB208_92>
    7867	05 00 74 00 00 00 00 00	goto +0x74 <LBB208_95>

000000000000f5e0 <LBB208_92>
    7868	b7 00 00 00 25 00 00 00	r0 = 0x25
    7869	05 00 73 00 00 00 00 00	goto +0x73 <LBB208_97>

000000000000f5f0 <LBB208_9>
    7870	65 01 2f 00 06 00 00 00	if r1 s> 0x6 goto +0x2f <LBB208_12>
    7871	15 01 4a 00 05 00 00 00	if r1 == 0x5 goto +0x4a <LBB208_60>
    7872	15 01 01 00 06 00 00 00	if r1 == 0x6 goto +0x1 <LBB208_61>
    7873	05 00 6e 00 00 00 00 00	goto +0x6e <LBB208_95>

000000000000f610 <LBB208_61>
    7874	b7 00 00 00 06 00 00 00	r0 = 0x6
    7875	05 00 6d 00 00 00 00 00	goto +0x6d <LBB208_97>

000000000000f620 <LBB208_36>
    7876	65 01 2f 00 1a 00 00 00	if r1 s> 0x1a goto +0x2f <LBB208_39>
    7877	15 01 46 00 19 00 00 00	if r1 == 0x19 goto +0x46 <LBB208_80>
    7878	15 01 01 00 1a 00 00 00	if r1 == 0x1a goto +0x1 <LBB208_81>
    7879	05 00 68 00 00 00 00 00	goto +0x68 <LBB208_95>

000000000000f640 <LBB208_81>
    7880	b7 00 00 00 1a 00 00 00	r0 = 0x1a
    7881	05 00 67 00 00 00 00 00	goto +0x67 <LBB208_97>

000000000000f650 <LBB208_22>
    7882	65 01 2f 00 10 00 00 00	if r1 s> 0x10 goto +0x2f <LBB208_25>
    7883	15 01 42 00 0f 00 00 00	if r1 == 0xf goto +0x42 <LBB208_70>
    7884	15 01 01 00 10 00 00 00	if r1 == 0x10 goto +0x1 <LBB208_71>
    7885	05 00 62 00 00 00 00 00	goto +0x62 <LBB208_95>

000000000000f670 <LBB208_71>
    7886	b7 00 00 00 10 00 00 00	r0 = 0x10
    7887	05 00 61 00 00 00 00 00	goto +0x61 <LBB208_97>

000000000000f680 <LBB208_6>
    7888	15 01 3f 00 02 00 00 00	if r1 == 0x2 goto +0x3f <LBB208_57>
    7889	15 01 40 00 03 00 00 00	if r1 == 0x3 goto +0x40 <LBB208_58>
    7890	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB208_59>
    7891	05 00 5c 00 00 00 00 00	goto +0x5c <LBB208_95>

000000000000f6a0 <LBB208_59>
    7892	b7 00 00 00 04 00 00 00	r0 = 0x4
    7893	05 00 5b 00 00 00 00 00	goto +0x5b <LBB208_97>

000000000000f6b0 <LBB208_33>
    7894	15 01 3d 00 16 00 00 00	if r1 == 0x16 goto +0x3d <LBB208_77>
    7895	15 01 3e 00 17 00 00 00	if r1 == 0x17 goto +0x3e <LBB208_78>
    7896	15 01 01 00 18 00 00 00	if r1 == 0x18 goto +0x1 <LBB208_79>
    7897	05 00 56 00 00 00 00 00	goto +0x56 <LBB208_95>

000000000000f6d0 <LBB208_79>
    7898	b7 00 00 00 18 00 00 00	r0 = 0x18
    7899	05 00 55 00 00 00 00 00	goto +0x55 <LBB208_97>

000000000000f6e0 <LBB208_46>
    7900	15 01 3b 00 20 00 00 00	if r1 == 0x20 goto +0x3b <LBB208_87>
    7901	15 01 3c 00 21 00 00 00	if r1 == 0x21 goto +0x3c <LBB208_88>
    7902	15 01 01 00 22 00 00 00	if r1 == 0x22 goto +0x1 <LBB208_89>
    7903	05 00 50 00 00 00 00 00	goto +0x50 <LBB208_95>

000000000000f700 <LBB208_89>
    7904	b7 00 00 00 22 00 00 00	r0 = 0x22
    7905	05 00 4f 00 00 00 00 00	goto +0x4f <LBB208_97>

000000000000f710 <LBB208_19>
    7906	15 01 39 00 0c 00 00 00	if r1 == 0xc goto +0x39 <LBB208_67>
    7907	15 01 3a 00 0d 00 00 00	if r1 == 0xd goto +0x3a <LBB208_68>
    7908	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB208_69>
    7909	05 00 4a 00 00 00 00 00	goto +0x4a <LBB208_95>

000000000000f730 <LBB208_69>
    7910	b7 00 00 00 0e 00 00 00	r0 = 0xe
    7911	05 00 49 00 00 00 00 00	goto +0x49 <LBB208_97>

000000000000f740 <LBB208_53>
    7912	15 01 37 00 26 00 00 00	if r1 == 0x26 goto +0x37 <LBB208_94>
    7913	15 01 38 00 27 00 00 00	if r1 == 0x27 goto +0x38 <LBB208_91>
    7914	15 01 01 00 28 00 00 00	if r1 == 0x28 goto +0x1 <LBB208_96>
    7915	05 00 44 00 00 00 00 00	goto +0x44 <LBB208_95>

000000000000f760 <LBB208_96>
    7916	b7 00 00 00 28 00 00 00	r0 = 0x28
    7917	05 00 43 00 00 00 00 00	goto +0x43 <LBB208_97>

000000000000f770 <LBB208_12>
    7918	15 01 35 00 07 00 00 00	if r1 == 0x7 goto +0x35 <LBB208_62>
    7919	15 01 36 00 08 00 00 00	if r1 == 0x8 goto +0x36 <LBB208_63>
    7920	15 01 01 00 09 00 00 00	if r1 == 0x9 goto +0x1 <LBB208_64>
    7921	05 00 3e 00 00 00 00 00	goto +0x3e <LBB208_95>

000000000000f790 <LBB208_64>
    7922	b7 00 00 00 09 00 00 00	r0 = 0x9
    7923	05 00 3d 00 00 00 00 00	goto +0x3d <LBB208_97>

000000000000f7a0 <LBB208_39>
    7924	15 01 33 00 1b 00 00 00	if r1 == 0x1b goto +0x33 <LBB208_82>
    7925	15 01 34 00 1c 00 00 00	if r1 == 0x1c goto +0x34 <LBB208_83>
    7926	15 01 01 00 1d 00 00 00	if r1 == 0x1d goto +0x1 <LBB208_84>
    7927	05 00 38 00 00 00 00 00	goto +0x38 <LBB208_95>

000000000000f7c0 <LBB208_84>
    7928	b7 00 00 00 1d 00 00 00	r0 = 0x1d
    7929	05 00 37 00 00 00 00 00	goto +0x37 <LBB208_97>

000000000000f7d0 <LBB208_25>
    7930	15 01 31 00 11 00 00 00	if r1 == 0x11 goto +0x31 <LBB208_72>
    7931	15 01 32 00 12 00 00 00	if r1 == 0x12 goto +0x32 <LBB208_73>
    7932	15 01 01 00 13 00 00 00	if r1 == 0x13 goto +0x1 <LBB208_74>
    7933	05 00 32 00 00 00 00 00	goto +0x32 <LBB208_95>

000000000000f7f0 <LBB208_74>
    7934	b7 00 00 00 13 00 00 00	r0 = 0x13
    7935	05 00 31 00 00 00 00 00	goto +0x31 <LBB208_97>

000000000000f800 <LBB208_75>
    7936	b7 00 00 00 14 00 00 00	r0 = 0x14
    7937	05 00 2f 00 00 00 00 00	goto +0x2f <LBB208_97>

000000000000f810 <LBB208_85>
    7938	b7 00 00 00 1e 00 00 00	r0 = 0x1e
    7939	05 00 2d 00 00 00 00 00	goto +0x2d <LBB208_97>

000000000000f820 <LBB208_65>
    7940	b7 00 00 00 0a 00 00 00	r0 = 0xa
    7941	05 00 2b 00 00 00 00 00	goto +0x2b <LBB208_97>

000000000000f830 <LBB208_90>
    7942	b7 00 00 00 23 00 00 00	r0 = 0x23
    7943	05 00 29 00 00 00 00 00	goto +0x29 <LBB208_97>

000000000000f840 <LBB208_93>
    7944	b7 00 00 00 24 00 00 00	r0 = 0x24
    7945	05 00 27 00 00 00 00 00	goto +0x27 <LBB208_97>

000000000000f850 <LBB208_60>
    7946	b7 00 00 00 05 00 00 00	r0 = 0x5
    7947	05 00 25 00 00 00 00 00	goto +0x25 <LBB208_97>

000000000000f860 <LBB208_80>
    7948	b7 00 00 00 19 00 00 00	r0 = 0x19
    7949	05 00 23 00 00 00 00 00	goto +0x23 <LBB208_97>

000000000000f870 <LBB208_70>
    7950	b7 00 00 00 0f 00 00 00	r0 = 0xf
    7951	05 00 21 00 00 00 00 00	goto +0x21 <LBB208_97>

000000000000f880 <LBB208_57>
    7952	b7 00 00 00 02 00 00 00	r0 = 0x2
    7953	05 00 1f 00 00 00 00 00	goto +0x1f <LBB208_97>

000000000000f890 <LBB208_58>
    7954	b7 00 00 00 03 00 00 00	r0 = 0x3
    7955	05 00 1d 00 00 00 00 00	goto +0x1d <LBB208_97>

000000000000f8a0 <LBB208_77>
    7956	b7 00 00 00 16 00 00 00	r0 = 0x16
    7957	05 00 1b 00 00 00 00 00	goto +0x1b <LBB208_97>

000000000000f8b0 <LBB208_78>
    7958	b7 00 00 00 17 00 00 00	r0 = 0x17
    7959	05 00 19 00 00 00 00 00	goto +0x19 <LBB208_97>

000000000000f8c0 <LBB208_87>
    7960	b7 00 00 00 20 00 00 00	r0 = 0x20
    7961	05 00 17 00 00 00 00 00	goto +0x17 <LBB208_97>

000000000000f8d0 <LBB208_88>
    7962	b7 00 00 00 21 00 00 00	r0 = 0x21
    7963	05 00 15 00 00 00 00 00	goto +0x15 <LBB208_97>

000000000000f8e0 <LBB208_67>
    7964	b7 00 00 00 0c 00 00 00	r0 = 0xc
    7965	05 00 13 00 00 00 00 00	goto +0x13 <LBB208_97>

000000000000f8f0 <LBB208_68>
    7966	b7 00 00 00 0d 00 00 00	r0 = 0xd
    7967	05 00 11 00 00 00 00 00	goto +0x11 <LBB208_97>

000000000000f900 <LBB208_94>
    7968	b7 00 00 00 26 00 00 00	r0 = 0x26
    7969	05 00 0f 00 00 00 00 00	goto +0xf <LBB208_97>

000000000000f910 <LBB208_91>
    7970	b7 00 00 00 27 00 00 00	r0 = 0x27
    7971	05 00 0d 00 00 00 00 00	goto +0xd <LBB208_97>

000000000000f920 <LBB208_62>
    7972	b7 00 00 00 07 00 00 00	r0 = 0x7
    7973	05 00 0b 00 00 00 00 00	goto +0xb <LBB208_97>

000000000000f930 <LBB208_63>
    7974	b7 00 00 00 08 00 00 00	r0 = 0x8
    7975	05 00 09 00 00 00 00 00	goto +0x9 <LBB208_97>

000000000000f940 <LBB208_82>
    7976	b7 00 00 00 1b 00 00 00	r0 = 0x1b
    7977	05 00 07 00 00 00 00 00	goto +0x7 <LBB208_97>

000000000000f950 <LBB208_83>
    7978	b7 00 00 00 1c 00 00 00	r0 = 0x1c
    7979	05 00 05 00 00 00 00 00	goto +0x5 <LBB208_97>

000000000000f960 <LBB208_72>
    7980	b7 00 00 00 11 00 00 00	r0 = 0x11
    7981	05 00 03 00 00 00 00 00	goto +0x3 <LBB208_97>

000000000000f970 <LBB208_73>
    7982	b7 00 00 00 12 00 00 00	r0 = 0x12
    7983	05 00 01 00 00 00 00 00	goto +0x1 <LBB208_97>

000000000000f980 <LBB208_95>
    7984	b7 00 00 00 29 00 00 00	r0 = 0x29

000000000000f988 <LBB208_97>
    7985	95 00 00 00 00 00 00 00	exit

000000000000f990 <<std::io::error::Error as core::fmt::Debug>::fmt>
    7986	85 10 00 00 11 00 00 00	call 0x11 ; <std::io::error::<impl core::fmt::Debug for std::io::error::repr_bitpacked::Repr>::fmt>
    7987	95 00 00 00 00 00 00 00	exit

000000000000f9a0 <std::io::error::Error::_new>
    7988	bf 37 00 00 00 00 00 00	r7 = r3
    7989	bf 26 00 00 00 00 00 00	r6 = r2
    7990	bf 18 00 00 00 00 00 00	r8 = r1
    7991	b7 01 00 00 18 00 00 00	r1 = 0x18
    7992	b7 02 00 00 08 00 00 00	r2 = 0x8
    7993	85 10 00 00 5b ef ff ff	call -0x10a5 ; <__rust_alloc>
    7994	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB214_2>
    7995	b7 01 00 00 08 00 00 00	r1 = 0x8
    7996	b7 02 00 00 18 00 00 00	r2 = 0x18
    7997	85 10 00 00 69 02 00 00	call 0x269 ; <alloc::alloc::handle_alloc_error>
    7998	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f9f8 <LBB214_2>
    7999	73 80 10 00 00 00 00 00	*(u8 *)(r0 + 0x10) = r8
    8000	7b 70 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r7
    8001	7b 60 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r6
    8002	07 00 00 00 01 00 00 00	r0 += 0x1
    8003	95 00 00 00 00 00 00 00	exit

000000000000fa20 <std::io::error::<impl core::fmt::Debug for std::io::error::repr_bitpacked::Repr>::fmt>
    8004	bf 26 00 00 00 00 00 00	r6 = r2
    8005	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    8006	bf 71 00 00 00 00 00 00	r1 = r7
    8007	57 01 00 00 03 00 00 00	r1 &= 0x3
    8008	65 01 1f 00 01 00 00 00	if r1 s> 0x1 goto +0x1f <LBB215_3>
    8009	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB215_9>
    8010	bf 71 00 00 00 00 00 00	r1 = r7
    8011	07 01 00 00 ff ff ff ff	r1 += -0x1
    8012	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    8013	bf a1 00 00 00 00 00 00	r1 = r10
    8014	07 01 00 00 e8 ff ff ff	r1 += -0x18
    8015	7b 1a 28 f0 00 00 00 00	*(u64 *)(r10 - 0xfd8) = r1
    8016	18 01 00 00 e0 a1 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a1e0 ll
    8018	7b 1a 30 f0 00 00 00 00	*(u64 *)(r10 - 0xfd0) = r1
    8019	b7 01 00 00 05 00 00 00	r1 = 0x5
    8020	7b 1a 20 f0 00 00 00 00	*(u64 *)(r10 - 0xfe0) = r1
    8021	18 01 00 00 81 8d 01 00 00 00 00 00 00 00 00 00	r1 = 0x18d81 ll
    8023	7b 1a 18 f0 00 00 00 00	*(u64 *)(r10 - 0xfe8) = r1
    8024	18 01 00 00 80 a1 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a180 ll
    8026	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    8027	07 07 00 00 0f 00 00 00	r7 += 0xf
    8028	7b 7a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r7
    8029	b7 01 00 00 04 00 00 00	r1 = 0x4
    8030	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8031	bf a5 00 00 00 00 00 00	r5 = r10
    8032	bf 61 00 00 00 00 00 00	r1 = r6
    8033	18 02 00 00 7b 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d7b ll
    8035	b7 03 00 00 06 00 00 00	r3 = 0x6
    8036	18 04 00 00 60 8b 01 00 00 00 00 00 00 00 00 00	r4 = 0x18b60 ll
    8038	85 10 00 00 a6 09 00 00	call 0x9a6 ; <core::fmt::Formatter::debug_struct_field2_finish>
    8039	05 00 32 00 00 00 00 00	goto +0x32 <LBB215_10>

000000000000fb40 <LBB215_3>
    8040	15 01 34 00 02 00 00 00	if r1 == 0x2 goto +0x34 <LBB215_5>
    8041	77 07 00 00 20 00 00 00	r7 >>= 0x20
    8042	bf 71 00 00 00 00 00 00	r1 = r7
    8043	85 10 00 00 29 ff ff ff	call -0xd7 ; <std::io::error::repr_bitpacked::kind_from_prim>
    8044	57 00 00 00 ff 00 00 00	r0 &= 0xff
    8045	73 0a d0 ff 00 00 00 00	*(u8 *)(r10 - 0x30) = r0
    8046	bf a7 00 00 00 00 00 00	r7 = r10
    8047	07 07 00 00 e8 ff ff ff	r7 += -0x18
    8048	bf 71 00 00 00 00 00 00	r1 = r7
    8049	bf 62 00 00 00 00 00 00	r2 = r6
    8050	18 03 00 00 68 8b 01 00 00 00 00 00 00 00 00 00	r3 = 0x18b68 ll
    8052	b7 04 00 00 04 00 00 00	r4 = 0x4
    8053	85 10 00 00 cd 09 00 00	call 0x9cd ; <core::fmt::Formatter::debug_tuple>
    8054	bf a2 00 00 00 00 00 00	r2 = r10
    8055	07 02 00 00 d0 ff ff ff	r2 += -0x30
    8056	bf 71 00 00 00 00 00 00	r1 = r7
    8057	18 03 00 00 80 a1 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a180 ll
    8059	85 10 00 00 23 06 00 00	call 0x623 ; <core::fmt::builders::DebugTuple::field>
    8060	bf 01 00 00 00 00 00 00	r1 = r0
    8061	85 10 00 00 87 06 00 00	call 0x687 ; <core::fmt::builders::DebugTuple::finish>
    8062	05 00 1b 00 00 00 00 00	goto +0x1b <LBB215_10>

000000000000fbf8 <LBB215_9>
    8063	bf a8 00 00 00 00 00 00	r8 = r10
    8064	07 08 00 00 e8 ff ff ff	r8 += -0x18
    8065	bf 81 00 00 00 00 00 00	r1 = r8
    8066	bf 62 00 00 00 00 00 00	r2 = r6
    8067	18 03 00 00 6b 8d 01 00 00 00 00 00 00 00 00 00	r3 = 0x18d6b ll
    8069	b7 04 00 00 05 00 00 00	r4 = 0x5
    8070	85 10 00 00 79 09 00 00	call 0x979 ; <core::fmt::Formatter::debug_struct>
    8071	bf 74 00 00 00 00 00 00	r4 = r7
    8072	07 04 00 00 10 00 00 00	r4 += 0x10
    8073	bf 81 00 00 00 00 00 00	r1 = r8
    8074	18 02 00 00 60 8b 01 00 00 00 00 00 00 00 00 00	r2 = 0x18b60 ll
    8076	b7 03 00 00 04 00 00 00	r3 = 0x4
    8077	18 05 00 00 80 a1 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a180 ll
    8079	85 10 00 00 73 05 00 00	call 0x573 ; <core::fmt::builders::DebugStruct::field>
    8080	bf 01 00 00 00 00 00 00	r1 = r0
    8081	18 02 00 00 64 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d64 ll
    8083	b7 03 00 00 07 00 00 00	r3 = 0x7
    8084	bf 74 00 00 00 00 00 00	r4 = r7
    8085	18 05 00 00 c0 a1 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a1c0 ll
    8087	85 10 00 00 6b 05 00 00	call 0x56b ; <core::fmt::builders::DebugStruct::field>
    8088	bf 01 00 00 00 00 00 00	r1 = r0
    8089	85 10 00 00 e6 05 00 00	call 0x5e6 ; <core::fmt::builders::DebugStruct::finish>

000000000000fcd0 <LBB215_10>
    8090	bf 06 00 00 00 00 00 00	r6 = r0

000000000000fcd8 <LBB215_11>
    8091	bf 60 00 00 00 00 00 00	r0 = r6
    8092	95 00 00 00 00 00 00 00	exit

000000000000fce8 <LBB215_5>
    8093	77 07 00 00 20 00 00 00	r7 >>= 0x20
    8094	63 7a cc ff 00 00 00 00	*(u32 *)(r10 - 0x34) = r7
    8095	bf a7 00 00 00 00 00 00	r7 = r10
    8096	07 07 00 00 d0 ff ff ff	r7 += -0x30
    8097	bf 71 00 00 00 00 00 00	r1 = r7
    8098	bf 62 00 00 00 00 00 00	r2 = r6
    8099	18 03 00 00 62 8d 01 00 00 00 00 00 00 00 00 00	r3 = 0x18d62 ll
    8101	b7 04 00 00 02 00 00 00	r4 = 0x2
    8102	85 10 00 00 59 09 00 00	call 0x959 ; <core::fmt::Formatter::debug_struct>
    8103	bf a4 00 00 00 00 00 00	r4 = r10
    8104	07 04 00 00 cc ff ff ff	r4 += -0x34
    8105	bf 71 00 00 00 00 00 00	r1 = r7
    8106	18 02 00 00 64 8b 01 00 00 00 00 00 00 00 00 00	r2 = 0x18b64 ll
    8108	b7 03 00 00 04 00 00 00	r3 = 0x4
    8109	18 05 00 00 60 a1 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a160 ll
    8111	85 10 00 00 53 05 00 00	call 0x553 ; <core::fmt::builders::DebugStruct::field>
    8112	b7 01 00 00 27 00 00 00	r1 = 0x27
    8113	73 1a e7 ff 00 00 00 00	*(u8 *)(r10 - 0x19) = r1
    8114	bf a4 00 00 00 00 00 00	r4 = r10
    8115	07 04 00 00 e7 ff ff ff	r4 += -0x19
    8116	bf 01 00 00 00 00 00 00	r1 = r0
    8117	18 02 00 00 60 8b 01 00 00 00 00 00 00 00 00 00	r2 = 0x18b60 ll
    8119	b7 03 00 00 04 00 00 00	r3 = 0x4
    8120	18 05 00 00 80 a1 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a180 ll
    8122	85 10 00 00 48 05 00 00	call 0x548 ; <core::fmt::builders::DebugStruct::field>
    8123	bf 06 00 00 00 00 00 00	r6 = r0
    8124	b7 07 00 00 14 00 00 00	r7 = 0x14
    8125	b7 01 00 00 14 00 00 00	r1 = 0x14
    8126	b7 02 00 00 01 00 00 00	r2 = 0x1
    8127	85 10 00 00 d5 ee ff ff	call -0x112b ; <__rust_alloc>
    8128	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB215_7>
    8129	b7 01 00 00 01 00 00 00	r1 = 0x1
    8130	b7 02 00 00 14 00 00 00	r2 = 0x14
    8131	85 10 00 00 e3 01 00 00	call 0x1e3 ; <alloc::alloc::handle_alloc_error>
    8132	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000fe28 <LBB215_7>
    8133	b7 01 00 00 73 66 75 6c	r1 = 0x6c756673
    8134	63 10 10 00 00 00 00 00	*(u32 *)(r0 + 0x10) = r1
    8135	18 01 00 00 6e 20 73 75 00 00 00 00 63 63 65 73	r1 = 0x736563637573206e ll
    8137	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    8138	18 01 00 00 6f 70 65 72 00 00 00 00 61 74 69 6f	r1 = 0x6f6974617265706f ll
    8140	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    8141	7b 7a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r7
    8142	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
    8143	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    8144	bf a4 00 00 00 00 00 00	r4 = r10
    8145	07 04 00 00 e8 ff ff ff	r4 += -0x18
    8146	bf 61 00 00 00 00 00 00	r1 = r6
    8147	18 02 00 00 64 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d64 ll
    8149	b7 03 00 00 07 00 00 00	r3 = 0x7
    8150	18 05 00 00 a0 a1 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a1a0 ll
    8152	85 10 00 00 2a 05 00 00	call 0x52a ; <core::fmt::builders::DebugStruct::field>
    8153	bf 01 00 00 00 00 00 00	r1 = r0
    8154	85 10 00 00 a5 05 00 00	call 0x5a5 ; <core::fmt::builders::DebugStruct::finish>
    8155	bf 06 00 00 00 00 00 00	r6 = r0
    8156	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    8157	15 02 bd ff 00 00 00 00	if r2 == 0x0 goto -0x43 <LBB215_11>
    8158	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    8159	b7 03 00 00 01 00 00 00	r3 = 0x1
    8160	85 10 00 00 ce ee ff ff	call -0x1132 ; <__rust_dealloc>
    8161	05 00 b9 ff 00 00 00 00	goto -0x47 <LBB215_11>

000000000000ff10 <std::io::stdio::_eprint>
    8162	95 00 00 00 00 00 00 00	exit

000000000000ff18 <std::process::abort>
    8163	85 10 00 00 d6 00 00 00	call 0xd6 ; <std::sys::sbf::abort_internal>
    8164	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ff28 <rust_begin_unwind>
    8165	85 10 00 00 cf 00 00 00	call 0xcf ; <std::sys::sbf::panic>
    8166	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ff38 <<std::io::error::ErrorKind as core::fmt::Debug>::fmt>
    8167	bf 24 00 00 00 00 00 00	r4 = r2
    8168	b7 03 00 00 08 00 00 00	r3 = 0x8
    8169	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    8170	65 01 0a 00 13 00 00 00	if r1 s> 0x13 goto +0xa <LBB487_6>
    8171	65 01 17 00 09 00 00 00	if r1 s> 0x9 goto +0x17 <LBB487_15>
    8172	65 01 24 00 04 00 00 00	if r1 s> 0x4 goto +0x24 <LBB487_23>
    8173	65 01 35 00 01 00 00 00	if r1 s> 0x1 goto +0x35 <LBB487_32>
    8174	18 02 00 00 e8 8a 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ae8 ll
    8176	15 01 bf 00 00 00 00 00	if r1 == 0x0 goto +0xbf <LBB487_81>
    8177	18 02 00 00 12 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d12 ll
    8179	b7 03 00 00 10 00 00 00	r3 = 0x10
    8180	05 00 bb 00 00 00 00 00	goto +0xbb <LBB487_81>

000000000000ffa8 <LBB487_6>
    8181	65 01 07 00 1d 00 00 00	if r1 s> 0x1d goto +0x7 <LBB487_11>
    8182	65 01 20 00 18 00 00 00	if r1 s> 0x18 goto +0x20 <LBB487_26>
    8183	65 01 31 00 15 00 00 00	if r1 s> 0x15 goto +0x31 <LBB487_35>
    8184	15 01 5a 00 14 00 00 00	if r1 == 0x14 goto +0x5a <LBB487_56>
    8185	18 02 00 00 85 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e85 ll
    8187	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8188	05 00 b3 00 00 00 00 00	goto +0xb3 <LBB487_81>

000000000000ffe8 <LBB487_11>
    8189	65 01 0c 00 22 00 00 00	if r1 s> 0x22 goto +0xc <LBB487_19>
    8190	65 01 30 00 1f 00 00 00	if r1 s> 0x1f goto +0x30 <LBB487_38>
    8191	15 01 57 00 1e 00 00 00	if r1 == 0x1e goto +0x57 <LBB487_57>
    8192	18 02 00 00 f0 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ef0 ll
    8194	05 00 ac 00 00 00 00 00	goto +0xac <LBB487_80>

0000000000010018 <LBB487_15>
    8195	65 01 19 00 0e 00 00 00	if r1 s> 0xe goto +0x19 <LBB487_29>
    8196	65 01 30 00 0b 00 00 00	if r1 s> 0xb goto +0x30 <LBB487_41>
    8197	15 01 54 00 0a 00 00 00	if r1 == 0xa goto +0x54 <LBB487_58>
    8198	18 02 00 00 f8 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18df8 ll
    8200	b7 03 00 00 0a 00 00 00	r3 = 0xa
    8201	05 00 a6 00 00 00 00 00	goto +0xa6 <LBB487_81>

0000000000010050 <LBB487_19>
    8202	65 01 30 00 25 00 00 00	if r1 s> 0x25 goto +0x30 <LBB487_44>
    8203	15 01 52 00 23 00 00 00	if r1 == 0x23 goto +0x52 <LBB487_59>
    8204	15 01 55 00 24 00 00 00	if r1 == 0x24 goto +0x55 <LBB487_60>
    8205	18 02 00 00 37 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f37 ll
    8207	b7 03 00 00 0d 00 00 00	r3 = 0xd
    8208	05 00 9f 00 00 00 00 00	goto +0x9f <LBB487_81>

0000000000010088 <LBB487_23>
    8209	65 01 2f 00 06 00 00 00	if r1 s> 0x6 goto +0x2f <LBB487_47>
    8210	15 01 53 00 05 00 00 00	if r1 == 0x5 goto +0x53 <LBB487_61>
    8211	18 02 00 00 c7 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18dc7 ll
    8213	b7 03 00 00 11 00 00 00	r3 = 0x11
    8214	05 00 99 00 00 00 00 00	goto +0x99 <LBB487_81>

00000000000100b8 <LBB487_26>
    8215	65 01 2f 00 1a 00 00 00	if r1 s> 0x1a goto +0x2f <LBB487_50>
    8216	15 01 51 00 19 00 00 00	if r1 == 0x19 goto +0x51 <LBB487_62>
    8217	18 02 00 00 af 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18eaf ll
    8219	b7 03 00 00 17 00 00 00	r3 = 0x17
    8220	05 00 93 00 00 00 00 00	goto +0x93 <LBB487_81>

00000000000100e8 <LBB487_29>
    8221	65 01 2f 00 10 00 00 00	if r1 s> 0x10 goto +0x2f <LBB487_53>
    8222	15 01 4f 00 0f 00 00 00	if r1 == 0xf goto +0x4f <LBB487_63>
    8223	18 02 00 00 32 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e32 ll
    8225	b7 03 00 00 11 00 00 00	r3 = 0x11
    8226	05 00 8d 00 00 00 00 00	goto +0x8d <LBB487_81>

0000000000010118 <LBB487_32>
    8227	15 01 4e 00 02 00 00 00	if r1 == 0x2 goto +0x4e <LBB487_64>
    8228	15 01 51 00 03 00 00 00	if r1 == 0x3 goto +0x51 <LBB487_65>
    8229	18 02 00 00 a6 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18da6 ll
    8231	b7 03 00 00 0f 00 00 00	r3 = 0xf
    8232	05 00 87 00 00 00 00 00	goto +0x87 <LBB487_81>

0000000000010148 <LBB487_35>
    8233	15 01 50 00 16 00 00 00	if r1 == 0x16 goto +0x50 <LBB487_66>
    8234	15 01 52 00 17 00 00 00	if r1 == 0x17 goto +0x52 <LBB487_67>
    8235	18 02 00 00 99 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e99 ll
    8237	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8238	05 00 81 00 00 00 00 00	goto +0x81 <LBB487_81>

0000000000010178 <LBB487_38>
    8239	15 01 51 00 20 00 00 00	if r1 == 0x20 goto +0x51 <LBB487_68>
    8240	15 01 54 00 21 00 00 00	if r1 == 0x21 goto +0x54 <LBB487_69>
    8241	18 02 00 00 19 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f19 ll
    8243	b7 03 00 00 13 00 00 00	r3 = 0x13
    8244	05 00 7b 00 00 00 00 00	goto +0x7b <LBB487_81>

00000000000101a8 <LBB487_41>
    8245	15 01 53 00 0c 00 00 00	if r1 == 0xc goto +0x53 <LBB487_70>
    8246	15 01 56 00 0d 00 00 00	if r1 == 0xd goto +0x56 <LBB487_71>
    8247	18 02 00 00 19 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e19 ll
    8249	b7 03 00 00 0d 00 00 00	r3 = 0xd
    8250	05 00 75 00 00 00 00 00	goto +0x75 <LBB487_81>

00000000000101d8 <LBB487_44>
    8251	15 01 55 00 26 00 00 00	if r1 == 0x26 goto +0x55 <LBB487_72>
    8252	15 01 58 00 27 00 00 00	if r1 == 0x27 goto +0x58 <LBB487_73>
    8253	18 02 00 00 54 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f54 ll
    8255	b7 03 00 00 0d 00 00 00	r3 = 0xd
    8256	05 00 6f 00 00 00 00 00	goto +0x6f <LBB487_81>

0000000000010208 <LBB487_47>
    8257	15 01 57 00 07 00 00 00	if r1 == 0x7 goto +0x57 <LBB487_74>
    8258	15 01 5a 00 08 00 00 00	if r1 == 0x8 goto +0x5a <LBB487_75>
    8259	18 02 00 00 42 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d42 ll
    8261	b7 03 00 00 10 00 00 00	r3 = 0x10
    8262	05 00 69 00 00 00 00 00	goto +0x69 <LBB487_81>

0000000000010238 <LBB487_50>
    8263	15 01 59 00 1b 00 00 00	if r1 == 0x1b goto +0x59 <LBB487_76>
    8264	15 01 5c 00 1c 00 00 00	if r1 == 0x1c goto +0x5c <LBB487_77>
    8265	18 02 00 00 de 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ede ll
    8267	b7 03 00 00 12 00 00 00	r3 = 0x12
    8268	05 00 63 00 00 00 00 00	goto +0x63 <LBB487_81>

0000000000010268 <LBB487_53>
    8269	15 01 5b 00 11 00 00 00	if r1 == 0x11 goto +0x5b <LBB487_78>
    8270	15 01 5e 00 12 00 00 00	if r1 == 0x12 goto +0x5e <LBB487_79>
    8271	18 02 00 00 63 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e63 ll
    8273	b7 03 00 00 16 00 00 00	r3 = 0x16
    8274	05 00 5d 00 00 00 00 00	goto +0x5d <LBB487_81>

0000000000010298 <LBB487_56>
    8275	18 02 00 00 79 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e79 ll
    8277	b7 03 00 00 0c 00 00 00	r3 = 0xc
    8278	05 00 59 00 00 00 00 00	goto +0x59 <LBB487_81>

00000000000102b8 <LBB487_57>
    8279	18 02 00 00 f0 8a 01 00 00 00 00 00 00 00 00 00	r2 = 0x18af0 ll
    8281	05 00 56 00 00 00 00 00	goto +0x56 <LBB487_81>

00000000000102d0 <LBB487_58>
    8282	18 02 00 00 ed 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ded ll
    8284	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8285	05 00 52 00 00 00 00 00	goto +0x52 <LBB487_81>

00000000000102f0 <LBB487_59>
    8286	18 02 00 00 2c 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f2c ll
    8288	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8289	05 00 4e 00 00 00 00 00	goto +0x4e <LBB487_81>

0000000000010310 <LBB487_60>
    8290	18 02 00 00 70 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d70 ll
    8292	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8293	05 00 4a 00 00 00 00 00	goto +0x4a <LBB487_81>

0000000000010330 <LBB487_61>
    8294	18 02 00 00 b5 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18db5 ll
    8296	b7 03 00 00 12 00 00 00	r3 = 0x12
    8297	05 00 46 00 00 00 00 00	goto +0x46 <LBB487_81>

0000000000010350 <LBB487_62>
    8298	18 02 00 00 a4 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ea4 ll
    8300	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8301	05 00 42 00 00 00 00 00	goto +0x42 <LBB487_81>

0000000000010370 <LBB487_63>
    8302	18 02 00 00 26 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e26 ll
    8304	b7 03 00 00 0c 00 00 00	r3 = 0xc
    8305	05 00 3e 00 00 00 00 00	goto +0x3e <LBB487_81>

0000000000010390 <LBB487_64>
    8306	18 02 00 00 86 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d86 ll
    8308	b7 03 00 00 11 00 00 00	r3 = 0x11
    8309	05 00 3a 00 00 00 00 00	goto +0x3a <LBB487_81>

00000000000103b0 <LBB487_65>
    8310	18 02 00 00 97 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18d97 ll
    8312	b7 03 00 00 0f 00 00 00	r3 = 0xf
    8313	05 00 36 00 00 00 00 00	goto +0x36 <LBB487_81>

00000000000103d0 <LBB487_66>
    8314	18 02 00 00 f8 8a 01 00 00 00 00 00 00 00 00 00	r2 = 0x18af8 ll
    8316	05 00 33 00 00 00 00 00	goto +0x33 <LBB487_81>

00000000000103e8 <LBB487_67>
    8317	18 02 00 00 90 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e90 ll
    8319	b7 03 00 00 09 00 00 00	r3 = 0x9
    8320	05 00 2f 00 00 00 00 00	goto +0x2f <LBB487_81>

0000000000010408 <LBB487_68>
    8321	18 02 00 00 fe 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18efe ll
    8323	b7 03 00 00 0c 00 00 00	r3 = 0xc
    8324	05 00 2b 00 00 00 00 00	goto +0x2b <LBB487_81>

0000000000010428 <LBB487_69>
    8325	18 02 00 00 0a 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f0a ll
    8327	b7 03 00 00 0f 00 00 00	r3 = 0xf
    8328	05 00 27 00 00 00 00 00	goto +0x27 <LBB487_81>

0000000000010448 <LBB487_70>
    8329	18 02 00 00 02 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e02 ll
    8331	b7 03 00 00 0d 00 00 00	r3 = 0xd
    8332	05 00 23 00 00 00 00 00	goto +0x23 <LBB487_81>

0000000000010468 <LBB487_71>
    8333	18 02 00 00 0f 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e0f ll
    8335	b7 03 00 00 0a 00 00 00	r3 = 0xa
    8336	05 00 1f 00 00 00 00 00	goto +0x1f <LBB487_81>

0000000000010488 <LBB487_72>
    8337	18 02 00 00 44 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f44 ll
    8339	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8340	05 00 1b 00 00 00 00 00	goto +0x1b <LBB487_81>

00000000000104a8 <LBB487_73>
    8341	18 02 00 00 4f 8f 01 00 00 00 00 00 00 00 00 00	r2 = 0x18f4f ll
    8343	b7 03 00 00 05 00 00 00	r3 = 0x5
    8344	05 00 17 00 00 00 00 00	goto +0x17 <LBB487_81>

00000000000104c8 <LBB487_74>
    8345	18 02 00 00 d8 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18dd8 ll
    8347	b7 03 00 00 0c 00 00 00	r3 = 0xc
    8348	05 00 13 00 00 00 00 00	goto +0x13 <LBB487_81>

00000000000104e8 <LBB487_75>
    8349	18 02 00 00 e4 8d 01 00 00 00 00 00 00 00 00 00	r2 = 0x18de4 ll
    8351	b7 03 00 00 09 00 00 00	r3 = 0x9
    8352	05 00 0f 00 00 00 00 00	goto +0xf <LBB487_81>

0000000000010508 <LBB487_76>
    8353	18 02 00 00 c6 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ec6 ll
    8355	b7 03 00 00 0c 00 00 00	r3 = 0xc
    8356	05 00 0b 00 00 00 00 00	goto +0xb <LBB487_81>

0000000000010528 <LBB487_77>
    8357	18 02 00 00 d2 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18ed2 ll
    8359	b7 03 00 00 0c 00 00 00	r3 = 0xc
    8360	05 00 07 00 00 00 00 00	goto +0x7 <LBB487_81>

0000000000010548 <LBB487_78>
    8361	18 02 00 00 43 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e43 ll
    8363	b7 03 00 00 12 00 00 00	r3 = 0x12
    8364	05 00 03 00 00 00 00 00	goto +0x3 <LBB487_81>

0000000000010568 <LBB487_79>
    8365	18 02 00 00 55 8e 01 00 00 00 00 00 00 00 00 00	r2 = 0x18e55 ll

0000000000010578 <LBB487_80>
    8367	b7 03 00 00 0e 00 00 00	r3 = 0xe

0000000000010580 <LBB487_81>
    8368	bf 41 00 00 00 00 00 00	r1 = r4
    8369	85 10 00 00 40 08 00 00	call 0x840 ; <<core::fmt::Formatter as core::fmt::Write>::write_str>
    8370	95 00 00 00 00 00 00 00	exit

0000000000010598 <std::sys::sbf::sol_log>
    8371	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    8372	95 00 00 00 00 00 00 00	exit

00000000000105a8 <std::sys::sbf::panic>
    8373	85 10 00 00 ff ff ff ff	call -0x1 ; <std::sys::sbf::panic>
    8374	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    8375	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000105c0 <std::sys::sbf::decode_error_kind>
    8376	b7 00 00 00 27 00 00 00	r0 = 0x27
    8377	95 00 00 00 00 00 00 00	exit

00000000000105d0 <std::sys::sbf::abort_internal>
    8378	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    8379	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000105e0 <std::alloc::rust_oom>
    8380	18 01 00 00 61 8f 01 00 00 00 00 00 00 00 00 00	r1 = 0x18f61 ll
    8382	b7 02 00 00 2e 00 00 00	r2 = 0x2e
    8383	85 10 00 00 f3 ff ff ff	call -0xd ; <std::sys::sbf::sol_log>
    8384	85 10 00 00 22 ff ff ff	call -0xde ; <std::process::abort>
    8385	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010610 <__rg_oom>
    8386	85 10 00 00 f9 ff ff ff	call -0x7 ; <std::alloc::rust_oom>
    8387	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010620 <hashbrown::raw::Fallibility::capacity_overflow>
    8388	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_2>
    8389	b7 02 00 00 00 00 00 00	r2 = 0x0
    8390	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    8391	95 00 00 00 00 00 00 00	exit

0000000000010640 <LBB2_2>
    8392	b7 01 00 00 01 00 00 00	r1 = 0x1
    8393	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    8394	18 01 00 00 00 a2 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a200 ll
    8396	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    8397	b7 01 00 00 00 00 00 00	r1 = 0x0
    8398	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    8399	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    8400	18 01 00 00 b0 8f 01 00 00 00 00 00 00 00 00 00	r1 = 0x18fb0 ll
    8402	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    8403	bf a1 00 00 00 00 00 00	r1 = r10
    8404	07 01 00 00 d0 ff ff ff	r1 += -0x30
    8405	18 02 00 00 10 a2 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a210 ll
    8407	85 10 00 00 2b 03 00 00	call 0x32b ; <core::panicking::panic_fmt>
    8408	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000106c8 <hashbrown::raw::Fallibility::alloc_err>
    8409	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB3_2>
    8410	7b 41 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r4
    8411	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    8412	95 00 00 00 00 00 00 00	exit

00000000000106e8 <LBB3_2>
    8413	bf 31 00 00 00 00 00 00	r1 = r3
    8414	bf 42 00 00 00 00 00 00	r2 = r4
    8415	85 10 00 00 c7 00 00 00	call 0xc7 ; <alloc::alloc::handle_alloc_error>
    8416	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010708 <core::ptr::drop_in_place<usize>>
    8417	95 00 00 00 00 00 00 00	exit

0000000000010710 <core::ptr::drop_in_place<core::fmt::Error>>
    8418	95 00 00 00 00 00 00 00	exit

0000000000010718 <<&mut W as core::fmt::Write>::write_char>
    8419	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8420	85 10 00 00 31 01 00 00	call 0x131 ; <alloc::string::String::push>
    8421	b7 00 00 00 00 00 00 00	r0 = 0x0
    8422	95 00 00 00 00 00 00 00	exit

0000000000010738 <<&mut W as core::fmt::Write>::write_fmt>
    8423	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    8424	bf a6 00 00 00 00 00 00	r6 = r10
    8425	07 06 00 00 d0 ff ff ff	r6 += -0x30
    8426	bf 61 00 00 00 00 00 00	r1 = r6
    8427	b7 03 00 00 30 00 00 00	r3 = 0x30
    8428	85 10 00 00 6b 0f 00 00	call 0xf6b ; <memcpy>
    8429	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    8430	bf a1 00 00 00 00 00 00	r1 = r10
    8431	07 01 00 00 c8 ff ff ff	r1 += -0x38
    8432	18 02 00 00 28 a2 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a228 ll
    8434	bf 63 00 00 00 00 00 00	r3 = r6
    8435	85 10 00 00 e5 05 00 00	call 0x5e5 ; <core::fmt::write>
    8436	95 00 00 00 00 00 00 00	exit

00000000000107a8 <<&mut W as core::fmt::Write>::write_str>
    8437	bf 36 00 00 00 00 00 00	r6 = r3
    8438	bf 28 00 00 00 00 00 00	r8 = r2
    8439	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    8440	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    8441	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    8442	1f 91 00 00 00 00 00 00	r1 -= r9
    8443	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB18_2>
    8444	bf 71 00 00 00 00 00 00	r1 = r7
    8445	bf 92 00 00 00 00 00 00	r2 = r9
    8446	bf 63 00 00 00 00 00 00	r3 = r6
    8447	85 10 00 00 0a 00 00 00	call 0xa ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    8448	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000010808 <LBB18_2>
    8449	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    8450	0f 91 00 00 00 00 00 00	r1 += r9
    8451	bf 82 00 00 00 00 00 00	r2 = r8
    8452	bf 63 00 00 00 00 00 00	r3 = r6
    8453	85 10 00 00 52 0f 00 00	call 0xf52 ; <memcpy>
    8454	0f 69 00 00 00 00 00 00	r9 += r6
    8455	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    8456	b7 00 00 00 00 00 00 00	r0 = 0x0
    8457	95 00 00 00 00 00 00 00	exit

0000000000010850 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    8458	bf 16 00 00 00 00 00 00	r6 = r1
    8459	bf 24 00 00 00 00 00 00	r4 = r2
    8460	0f 34 00 00 00 00 00 00	r4 += r3
    8461	b7 01 00 00 01 00 00 00	r1 = 0x1
    8462	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB19_2>
    8463	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000010880 <LBB19_2>
    8464	57 01 00 00 01 00 00 00	r1 &= 0x1
    8465	55 01 23 00 00 00 00 00	if r1 != 0x0 goto +0x23 <LBB19_15>
    8466	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    8467	bf 17 00 00 00 00 00 00	r7 = r1
    8468	67 07 00 00 01 00 00 00	r7 <<= 0x1
    8469	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB19_5>
    8470	bf 47 00 00 00 00 00 00	r7 = r4

00000000000108b8 <LBB19_5>
    8471	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB19_7>
    8472	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000108c8 <LBB19_7>
    8473	bf 72 00 00 00 00 00 00	r2 = r7
    8474	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    8475	77 02 00 00 3f 00 00 00	r2 >>= 0x3f
    8476	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB19_9>
    8477	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    8478	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    8479	b7 01 00 00 01 00 00 00	r1 = 0x1
    8480	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    8481	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8482	05 00 02 00 00 00 00 00	goto +0x2 <LBB19_10>

0000000000010918 <LBB19_9>
    8483	b7 01 00 00 00 00 00 00	r1 = 0x0
    8484	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000010928 <LBB19_10>
    8485	bf a1 00 00 00 00 00 00	r1 = r10
    8486	07 01 00 00 d0 ff ff ff	r1 += -0x30
    8487	bf a4 00 00 00 00 00 00	r4 = r10
    8488	07 04 00 00 e8 ff ff ff	r4 += -0x18
    8489	bf 73 00 00 00 00 00 00	r3 = r7
    8490	85 10 00 00 3e 00 00 00	call 0x3e ; <alloc::raw_vec::finish_grow>
    8491	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    8492	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    8493	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB19_13>
    8494	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    8495	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000010980 <LBB19_12>
    8496	95 00 00 00 00 00 00 00	exit

0000000000010988 <LBB19_13>
    8497	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
    8499	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB19_12>
    8500	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB19_16>

00000000000109a8 <LBB19_15>
    8501	85 10 00 00 60 00 00 00	call 0x60 ; <alloc::raw_vec::capacity_overflow>
    8502	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000109b8 <LBB19_16>
    8503	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    8504	85 10 00 00 6e 00 00 00	call 0x6e ; <alloc::alloc::handle_alloc_error>
    8505	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000109d0 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    8506	bf 16 00 00 00 00 00 00	r6 = r1
    8507	07 02 00 00 01 00 00 00	r2 += 0x1
    8508	b7 01 00 00 01 00 00 00	r1 = 0x1
    8509	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB20_2>
    8510	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000109f8 <LBB20_2>
    8511	57 01 00 00 01 00 00 00	r1 &= 0x1
    8512	55 01 23 00 00 00 00 00	if r1 != 0x0 goto +0x23 <LBB20_15>
    8513	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    8514	bf 17 00 00 00 00 00 00	r7 = r1
    8515	67 07 00 00 01 00 00 00	r7 <<= 0x1
    8516	2d 27 01 00 00 00 00 00	if r7 > r2 goto +0x1 <LBB20_5>
    8517	bf 27 00 00 00 00 00 00	r7 = r2

0000000000010a30 <LBB20_5>
    8518	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB20_7>
    8519	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000010a40 <LBB20_7>
    8520	bf 72 00 00 00 00 00 00	r2 = r7
    8521	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    8522	77 02 00 00 3f 00 00 00	r2 >>= 0x3f
    8523	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB20_9>
    8524	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    8525	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    8526	b7 01 00 00 01 00 00 00	r1 = 0x1
    8527	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    8528	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8529	05 00 02 00 00 00 00 00	goto +0x2 <LBB20_10>

0000000000010a90 <LBB20_9>
    8530	b7 01 00 00 00 00 00 00	r1 = 0x0
    8531	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1

0000000000010aa0 <LBB20_10>
    8532	bf a1 00 00 00 00 00 00	r1 = r10
    8533	07 01 00 00 d0 ff ff ff	r1 += -0x30
    8534	bf a4 00 00 00 00 00 00	r4 = r10
    8535	07 04 00 00 e8 ff ff ff	r4 += -0x18
    8536	bf 73 00 00 00 00 00 00	r3 = r7
    8537	85 10 00 00 0f 00 00 00	call 0xf ; <alloc::raw_vec::finish_grow>
    8538	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    8539	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    8540	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB20_13>
    8541	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    8542	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1

0000000000010af8 <LBB20_12>
    8543	95 00 00 00 00 00 00 00	exit

0000000000010b00 <LBB20_13>
    8544	18 02 00 00 01 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x7fffffffffffffff ll
    8546	1d 21 fc ff 00 00 00 00	if r1 == r2 goto -0x4 <LBB20_12>
    8547	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB20_16>

0000000000010b20 <LBB20_15>
    8548	85 10 00 00 31 00 00 00	call 0x31 ; <alloc::raw_vec::capacity_overflow>
    8549	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010b30 <LBB20_16>
    8550	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    8551	85 10 00 00 3f 00 00 00	call 0x3f ; <alloc::alloc::handle_alloc_error>
    8552	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010b48 <alloc::raw_vec::finish_grow>
    8553	bf 37 00 00 00 00 00 00	r7 = r3
    8554	bf 16 00 00 00 00 00 00	r6 = r1
    8555	15 02 0d 00 00 00 00 00	if r2 == 0x0 goto +0xd <LBB21_2>
    8556	79 41 08 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x8)
    8557	15 01 1b 00 00 00 00 00	if r1 == 0x0 goto +0x1b <LBB21_7>
    8558	79 42 10 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x10)
    8559	55 02 0e 00 00 00 00 00	if r2 != 0x0 goto +0xe <LBB21_6>
    8560	b7 01 00 00 00 00 00 00	r1 = 0x0
    8561	b7 00 00 00 01 00 00 00	r0 = 0x1
    8562	15 07 1e 00 00 00 00 00	if r7 == 0x0 goto +0x1e <LBB21_9>
    8563	bf 71 00 00 00 00 00 00	r1 = r7
    8564	b7 02 00 00 01 00 00 00	r2 = 0x1
    8565	85 10 00 00 1f ed ff ff	call -0x12e1 ; <__rust_alloc>
    8566	bf 71 00 00 00 00 00 00	r1 = r7
    8567	15 00 0d 00 00 00 00 00	if r0 == 0x0 goto +0xd <LBB21_10>
    8568	05 00 18 00 00 00 00 00	goto +0x18 <LBB21_9>

0000000000010bc8 <LBB21_2>
    8569	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    8570	b7 01 00 00 00 00 00 00	r1 = 0x0
    8571	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    8572	b7 01 00 00 01 00 00 00	r1 = 0x1
    8573	05 00 16 00 00 00 00 00	goto +0x16 <LBB21_11>

0000000000010bf0 <LBB21_6>
    8574	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    8575	b7 03 00 00 01 00 00 00	r3 = 0x1
    8576	bf 74 00 00 00 00 00 00	r4 = r7
    8577	85 10 00 00 2e ed ff ff	call -0x12d2 ; <__rust_realloc>
    8578	bf 71 00 00 00 00 00 00	r1 = r7
    8579	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB21_10>
    8580	05 00 0c 00 00 00 00 00	goto +0xc <LBB21_9>

0000000000010c28 <LBB21_10>
    8581	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    8582	b7 01 00 00 01 00 00 00	r1 = 0x1
    8583	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    8584	05 00 0b 00 00 00 00 00	goto +0xb <LBB21_11>

0000000000010c48 <LBB21_7>
    8585	b7 01 00 00 00 00 00 00	r1 = 0x0
    8586	b7 00 00 00 01 00 00 00	r0 = 0x1
    8587	15 07 05 00 00 00 00 00	if r7 == 0x0 goto +0x5 <LBB21_9>
    8588	bf 71 00 00 00 00 00 00	r1 = r7
    8589	b7 02 00 00 01 00 00 00	r2 = 0x1
    8590	85 10 00 00 06 ed ff ff	call -0x12fa ; <__rust_alloc>
    8591	bf 71 00 00 00 00 00 00	r1 = r7
    8592	15 00 f4 ff 00 00 00 00	if r0 == 0x0 goto -0xc <LBB21_10>

0000000000010c88 <LBB21_9>
    8593	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    8594	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    8595	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000010ca0 <LBB21_11>
    8596	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    8597	95 00 00 00 00 00 00 00	exit

0000000000010cb0 <alloc::raw_vec::capacity_overflow>
    8598	b7 01 00 00 01 00 00 00	r1 = 0x1
    8599	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    8600	18 01 00 00 58 a2 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a258 ll
    8602	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    8603	b7 01 00 00 00 00 00 00	r1 = 0x0
    8604	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    8605	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    8606	18 01 00 00 18 90 01 00 00 00 00 00 00 00 00 00	r1 = 0x19018 ll
    8608	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    8609	bf a1 00 00 00 00 00 00	r1 = r10
    8610	07 01 00 00 d0 ff ff ff	r1 += -0x30
    8611	18 02 00 00 68 a2 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a268 ll
    8613	85 10 00 00 5d 02 00 00	call 0x25d ; <core::panicking::panic_fmt>
    8614	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010d38 <alloc::alloc::handle_alloc_error>
    8615	85 10 00 00 01 00 00 00	call 0x1 ; <alloc::alloc::handle_alloc_error::rt_error>
    8616	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010d48 <alloc::alloc::handle_alloc_error::rt_error>
    8617	bf 13 00 00 00 00 00 00	r3 = r1
    8618	bf 21 00 00 00 00 00 00	r1 = r2
    8619	bf 32 00 00 00 00 00 00	r2 = r3
    8620	85 10 00 00 51 ed ff ff	call -0x12af ; <__rust_alloc_error_handler>
    8621	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010d70 <<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError as core::error::Error>::description>
    8622	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    8623	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    8624	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    8625	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    8626	95 00 00 00 00 00 00 00	exit

0000000000010d98 <<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError as core::fmt::Display>::fmt>
    8627	bf 23 00 00 00 00 00 00	r3 = r2
    8628	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    8629	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8630	85 10 00 00 90 08 00 00	call 0x890 ; <<str as core::fmt::Display>::fmt>
    8631	95 00 00 00 00 00 00 00	exit

0000000000010dc0 <<<alloc::boxed::Box<dyn core::error::Error+core::marker::Sync+core::marker::Send> as core::convert::From<alloc::string::String>>::from::StringError as core::fmt::Debug>::fmt>
    8632	bf 23 00 00 00 00 00 00	r3 = r2
    8633	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    8634	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8635	85 10 00 00 99 07 00 00	call 0x799 ; <<str as core::fmt::Debug>::fmt>
    8636	95 00 00 00 00 00 00 00	exit

0000000000010de8 <alloc::fmt::format::format_inner>
    8637	bf 27 00 00 00 00 00 00	r7 = r2
    8638	bf 16 00 00 00 00 00 00	r6 = r1
    8639	79 72 08 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x8)
    8640	15 02 29 00 00 00 00 00	if r2 == 0x0 goto +0x29 <LBB69_4>
    8641	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    8642	b7 04 00 00 00 00 00 00	r4 = 0x0
    8643	bf 13 00 00 00 00 00 00	r3 = r1
    8644	07 03 00 00 08 00 00 00	r3 += 0x8

0000000000010e28 <LBB69_2>
    8645	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
    8646	0f 48 00 00 00 00 00 00	r8 += r4
    8647	07 03 00 00 10 00 00 00	r3 += 0x10
    8648	07 02 00 00 ff ff ff ff	r2 += -0x1
    8649	bf 84 00 00 00 00 00 00	r4 = r8
    8650	55 02 fa ff 00 00 00 00	if r2 != 0x0 goto -0x6 <LBB69_2>
    8651	79 72 18 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x18)
    8652	15 02 0e 00 00 00 00 00	if r2 == 0x0 goto +0xe <LBB69_12>
    8653	b7 04 00 00 00 00 00 00	r4 = 0x0
    8654	b7 03 00 00 01 00 00 00	r3 = 0x1
    8655	b7 05 00 00 10 00 00 00	r5 = 0x10
    8656	b7 02 00 00 01 00 00 00	r2 = 0x1
    8657	2d 85 01 00 00 00 00 00	if r5 > r8 goto +0x1 <LBB69_7>
    8658	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000010e98 <LBB69_7>
    8659	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    8660	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB69_9>
    8661	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000010eb0 <LBB69_9>
    8662	6d 84 17 00 00 00 00 00	if r4 s> r8 goto +0x17 <LBB69_17>
    8663	5f 32 00 00 00 00 00 00	r2 &= r3
    8664	57 02 00 00 01 00 00 00	r2 &= 0x1
    8665	55 02 14 00 00 00 00 00	if r2 != 0x0 goto +0x14 <LBB69_17>

0000000000010ed0 <LBB69_11>
    8666	67 08 00 00 01 00 00 00	r8 <<= 0x1

0000000000010ed8 <LBB69_12>
    8667	b7 00 00 00 01 00 00 00	r0 = 0x1
    8668	b7 01 00 00 00 00 00 00	r1 = 0x0
    8669	15 08 12 00 00 00 00 00	if r8 == 0x0 goto +0x12 <LBB69_18>
    8670	65 08 02 00 ff ff ff ff	if r8 s> -0x1 goto +0x2 <LBB69_15>
    8671	85 10 00 00 b6 ff ff ff	call -0x4a ; <alloc::raw_vec::capacity_overflow>
    8672	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010f08 <LBB69_15>
    8673	bf 81 00 00 00 00 00 00	r1 = r8
    8674	b7 02 00 00 01 00 00 00	r2 = 0x1
    8675	85 10 00 00 b1 ec ff ff	call -0x134f ; <__rust_alloc>
    8676	bf 81 00 00 00 00 00 00	r1 = r8
    8677	55 00 0a 00 00 00 00 00	if r0 != 0x0 goto +0xa <LBB69_18>
    8678	b7 01 00 00 01 00 00 00	r1 = 0x1
    8679	bf 82 00 00 00 00 00 00	r2 = r8
    8680	85 10 00 00 be ff ff ff	call -0x42 ; <alloc::alloc::handle_alloc_error>
    8681	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010f50 <LBB69_4>
    8682	b7 08 00 00 00 00 00 00	r8 = 0x0
    8683	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    8684	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB69_17>
    8685	05 00 ec ff 00 00 00 00	goto -0x14 <LBB69_11>

0000000000010f70 <LBB69_17>
    8686	b7 00 00 00 01 00 00 00	r0 = 0x1
    8687	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000010f80 <LBB69_18>
    8688	b7 02 00 00 00 00 00 00	r2 = 0x0
    8689	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    8690	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    8691	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
    8692	bf a1 00 00 00 00 00 00	r1 = r10
    8693	07 01 00 00 a8 ff ff ff	r1 += -0x58
    8694	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    8695	bf a8 00 00 00 00 00 00	r8 = r10
    8696	07 08 00 00 c8 ff ff ff	r8 += -0x38
    8697	bf 81 00 00 00 00 00 00	r1 = r8
    8698	bf 72 00 00 00 00 00 00	r2 = r7
    8699	b7 03 00 00 30 00 00 00	r3 = 0x30
    8700	85 10 00 00 5b 0e 00 00	call 0xe5b ; <memcpy>
    8701	bf a1 00 00 00 00 00 00	r1 = r10
    8702	07 01 00 00 c0 ff ff ff	r1 += -0x40
    8703	18 02 00 00 28 a2 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a228 ll
    8705	bf 83 00 00 00 00 00 00	r3 = r8
    8706	85 10 00 00 d6 04 00 00	call 0x4d6 ; <core::fmt::write>
    8707	55 00 07 00 00 00 00 00	if r0 != 0x0 goto +0x7 <LBB69_20>
    8708	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    8709	7b 16 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r1
    8710	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    8711	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    8712	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    8713	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    8714	95 00 00 00 00 00 00 00	exit

0000000000011058 <LBB69_20>
    8715	bf a3 00 00 00 00 00 00	r3 = r10
    8716	07 03 00 00 f8 ff ff ff	r3 += -0x8
    8717	18 01 00 00 45 90 01 00 00 00 00 00 00 00 00 00	r1 = 0x19045 ll
    8719	b7 02 00 00 33 00 00 00	r2 = 0x33
    8720	18 04 00 00 80 a2 01 00 00 00 00 00 00 00 00 00	r4 = 0x1a280 ll
    8722	18 05 00 00 a0 a2 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a2a0 ll
    8724	85 10 00 00 2a 02 00 00	call 0x22a ; <core::result::unwrap_failed>
    8725	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000110b0 <alloc::string::String::push>
    8726	bf 27 00 00 00 00 00 00	r7 = r2
    8727	bf 16 00 00 00 00 00 00	r6 = r1
    8728	bf 71 00 00 00 00 00 00	r1 = r7
    8729	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8730	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8731	b7 02 00 00 80 00 00 00	r2 = 0x80
    8732	2d 12 18 00 00 00 00 00	if r2 > r1 goto +0x18 <LBB80_9>
    8733	b7 02 00 00 00 00 00 00	r2 = 0x0
    8734	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    8735	b7 02 00 00 00 08 00 00	r2 = 0x800
    8736	2d 12 20 00 00 00 00 00	if r2 > r1 goto +0x20 <LBB80_3>
    8737	bf 71 00 00 00 00 00 00	r1 = r7
    8738	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8739	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8740	b7 02 00 00 00 00 01 00	r2 = 0x10000
    8741	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB80_4>
    8742	05 00 23 00 00 00 00 00	goto +0x23 <LBB80_5>

0000000000011138 <LBB80_4>
    8743	bf 71 00 00 00 00 00 00	r1 = r7
    8744	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    8745	47 01 00 00 80 00 00 00	r1 |= 0x80
    8746	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
    8747	bf 71 00 00 00 00 00 00	r1 = r7
    8748	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    8749	47 01 00 00 e0 00 00 00	r1 |= 0xe0
    8750	73 1a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r1
    8751	77 07 00 00 06 00 00 00	r7 >>= 0x6
    8752	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    8753	47 07 00 00 80 00 00 00	r7 |= 0x80
    8754	73 7a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r7
    8755	b7 07 00 00 03 00 00 00	r7 = 0x3
    8756	05 00 28 00 00 00 00 00	goto +0x28 <LBB80_6>

00000000000111a8 <LBB80_9>
    8757	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    8758	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    8759	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB80_11>
    8760	bf 61 00 00 00 00 00 00	r1 = r6
    8761	85 10 00 00 00 ff ff ff	call -0x100 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    8762	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

00000000000111d8 <LBB80_11>
    8763	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    8764	0f 21 00 00 00 00 00 00	r1 += r2
    8765	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    8766	07 02 00 00 01 00 00 00	r2 += 0x1
    8767	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    8768	05 00 2d 00 00 00 00 00	goto +0x2d <LBB80_12>

0000000000011208 <LBB80_3>
    8769	bf 71 00 00 00 00 00 00	r1 = r7
    8770	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    8771	47 01 00 00 80 00 00 00	r1 |= 0x80
    8772	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    8773	77 07 00 00 06 00 00 00	r7 >>= 0x6
    8774	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    8775	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    8776	b7 07 00 00 02 00 00 00	r7 = 0x2
    8777	05 00 13 00 00 00 00 00	goto +0x13 <LBB80_6>

0000000000011250 <LBB80_5>
    8778	bf 71 00 00 00 00 00 00	r1 = r7
    8779	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    8780	47 01 00 00 80 00 00 00	r1 |= 0x80
    8781	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
    8782	bf 71 00 00 00 00 00 00	r1 = r7
    8783	77 01 00 00 06 00 00 00	r1 >>= 0x6
    8784	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    8785	47 01 00 00 80 00 00 00	r1 |= 0x80
    8786	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
    8787	bf 71 00 00 00 00 00 00	r1 = r7
    8788	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    8789	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    8790	47 01 00 00 80 00 00 00	r1 |= 0x80
    8791	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    8792	77 07 00 00 12 00 00 00	r7 >>= 0x12
    8793	57 07 00 00 07 00 00 00	r7 &= 0x7
    8794	47 07 00 00 f0 00 00 00	r7 |= 0xf0
    8795	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    8796	b7 07 00 00 04 00 00 00	r7 = 0x4

00000000000112e8 <LBB80_6>
    8797	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    8798	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    8799	1f 81 00 00 00 00 00 00	r1 -= r8
    8800	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB80_8>
    8801	bf 61 00 00 00 00 00 00	r1 = r6
    8802	bf 82 00 00 00 00 00 00	r2 = r8
    8803	bf 73 00 00 00 00 00 00	r3 = r7
    8804	85 10 00 00 a5 fe ff ff	call -0x15b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    8805	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

0000000000011330 <LBB80_8>
    8806	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    8807	0f 81 00 00 00 00 00 00	r1 += r8
    8808	bf a2 00 00 00 00 00 00	r2 = r10
    8809	07 02 00 00 fc ff ff ff	r2 += -0x4
    8810	bf 73 00 00 00 00 00 00	r3 = r7
    8811	85 10 00 00 ec 0d 00 00	call 0xdec ; <memcpy>
    8812	0f 78 00 00 00 00 00 00	r8 += r7
    8813	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000011370 <LBB80_12>
    8814	95 00 00 00 00 00 00 00	exit

0000000000011378 <<alloc::string::FromUtf8Error as core::fmt::Display>::fmt>
    8815	07 01 00 00 18 00 00 00	r1 += 0x18
    8816	85 10 00 00 24 0a 00 00	call 0xa24 ; <<core::str::error::Utf8Error as core::fmt::Display>::fmt>
    8817	95 00 00 00 00 00 00 00	exit

0000000000011390 <<alloc::string::String as core::clone::Clone>::clone>
    8818	bf 17 00 00 00 00 00 00	r7 = r1
    8819	b7 09 00 00 01 00 00 00	r9 = 0x1
    8820	79 28 00 00 00 00 00 00	r8 = *(u64 *)(r2 + 0x0)
    8821	79 26 10 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x10)
    8822	15 06 0c 00 00 00 00 00	if r6 == 0x0 goto +0xc <LBB90_5>
    8823	65 06 02 00 ff ff ff ff	if r6 s> -0x1 goto +0x2 <LBB90_3>
    8824	85 10 00 00 1d ff ff ff	call -0xe3 ; <alloc::raw_vec::capacity_overflow>
    8825	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000113d0 <LBB90_3>
    8826	bf 61 00 00 00 00 00 00	r1 = r6
    8827	b7 02 00 00 01 00 00 00	r2 = 0x1
    8828	85 10 00 00 18 ec ff ff	call -0x13e8 ; <__rust_alloc>
    8829	bf 09 00 00 00 00 00 00	r9 = r0
    8830	55 09 04 00 00 00 00 00	if r9 != 0x0 goto +0x4 <LBB90_5>
    8831	b7 01 00 00 01 00 00 00	r1 = 0x1
    8832	bf 62 00 00 00 00 00 00	r2 = r6
    8833	85 10 00 00 25 ff ff ff	call -0xdb ; <alloc::alloc::handle_alloc_error>
    8834	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000011418 <LBB90_5>
    8835	bf 91 00 00 00 00 00 00	r1 = r9
    8836	bf 82 00 00 00 00 00 00	r2 = r8
    8837	bf 63 00 00 00 00 00 00	r3 = r6
    8838	85 10 00 00 d1 0d 00 00	call 0xdd1 ; <memcpy>
    8839	7b 67 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r6
    8840	7b 67 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r6
    8841	7b 97 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r9
    8842	95 00 00 00 00 00 00 00	exit

0000000000011458 <core::ops::function::FnOnce::call_once>
    8843	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

0000000000011460 <LBB0_1>
    8844	05 00 ff ff 00 00 00 00	goto -0x1 <LBB0_1>

0000000000011468 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>
    8845	95 00 00 00 00 00 00 00	exit

0000000000011470 <core::ptr::drop_in_place<core::fmt::Error>>
    8846	95 00 00 00 00 00 00 00	exit

0000000000011478 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
    8847	bf 26 00 00 00 00 00 00	r6 = r2
    8848	bf 17 00 00 00 00 00 00	r7 = r1
    8849	85 10 00 00 83 0c 00 00	call 0xc83 ; <core::fmt::num::<impl core::fmt::Debug for u64>::fmt>
    8850	b7 08 00 00 01 00 00 00	r8 = 0x1
    8851	55 00 15 00 00 00 00 00	if r0 != 0x0 goto +0x15 <LBB94_3>
    8852	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    8853	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    8854	18 03 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r3 = 0x19090 ll
    8856	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    8857	18 03 00 00 b8 a2 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a2b8 ll
    8859	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    8860	b7 03 00 00 00 00 00 00	r3 = 0x0
    8861	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8862	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    8863	7b 8a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r8
    8864	bf a3 00 00 00 00 00 00	r3 = r10
    8865	07 03 00 00 d0 ff ff ff	r3 += -0x30
    8866	85 10 00 00 36 04 00 00	call 0x436 ; <core::fmt::write>
    8867	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB94_3>
    8868	07 07 00 00 08 00 00 00	r7 += 0x8
    8869	bf 71 00 00 00 00 00 00	r1 = r7
    8870	bf 62 00 00 00 00 00 00	r2 = r6
    8871	85 10 00 00 6d 0c 00 00	call 0xc6d ; <core::fmt::num::<impl core::fmt::Debug for u64>::fmt>
    8872	bf 08 00 00 00 00 00 00	r8 = r0

0000000000011548 <LBB94_3>
    8873	bf 80 00 00 00 00 00 00	r0 = r8
    8874	95 00 00 00 00 00 00 00	exit

0000000000011558 <<T as core::any::Any>::type_id>
    8875	18 02 00 00 b2 c3 62 91 00 00 00 00 e7 2d 15 a4	r2 = -0x5bead2186e9d3c4e ll
    8877	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    8878	18 02 00 00 44 33 80 78 00 00 00 00 d3 a5 22 e7	r2 = -0x18dd5a2c877fccbc ll
    8880	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    8881	95 00 00 00 00 00 00 00	exit

0000000000011590 <<core::cell::BorrowError as core::fmt::Debug>::fmt>
    8882	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    8883	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    8884	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    8885	18 02 00 00 d9 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190d9 ll
    8887	b7 03 00 00 0b 00 00 00	r3 = 0xb
    8888	8d 00 00 00 04 00 00 00	callx r4
    8889	95 00 00 00 00 00 00 00	exit

00000000000115d0 <core::char::methods::<impl char>::escape_debug_ext>
    8890	bf 27 00 00 00 00 00 00	r7 = r2
    8891	bf 16 00 00 00 00 00 00	r6 = r1
    8892	bf 71 00 00 00 00 00 00	r1 = r7
    8893	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8894	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8895	65 01 0a 00 0c 00 00 00	if r1 s> 0xc goto +0xa <LBB116_4>
    8896	15 01 16 00 00 00 00 00	if r1 == 0x0 goto +0x16 <LBB116_16>
    8897	15 01 1b 00 09 00 00 00	if r1 == 0x9 goto +0x1b <LBB116_10>
    8898	15 01 01 00 0a 00 00 00	if r1 == 0xa goto +0x1 <LBB116_12>
    8899	05 00 27 00 00 00 00 00	goto +0x27 <LBB116_9>

0000000000011620 <LBB116_12>
    8900	b7 01 00 00 00 02 00 00	r1 = 0x200
    8901	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8902	b7 01 00 00 00 00 00 00	r1 = 0x0
    8903	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8904	b7 01 00 00 5c 6e 00 00	r1 = 0x6e5c
    8905	05 00 3c 00 00 00 00 00	goto +0x3c <LBB116_17>

0000000000011650 <LBB116_4>
    8906	65 01 1e 00 26 00 00 00	if r1 s> 0x26 goto +0x1e <LBB116_7>
    8907	15 01 17 00 0d 00 00 00	if r1 == 0xd goto +0x17 <LBB116_11>
    8908	15 01 01 00 22 00 00 00	if r1 == 0x22 goto +0x1 <LBB116_14>
    8909	05 00 1d 00 00 00 00 00	goto +0x1d <LBB116_9>

0000000000011670 <LBB116_14>
    8910	bf 31 00 00 00 00 00 00	r1 = r3
    8911	57 01 00 00 00 00 01 00	r1 &= 0x10000
    8912	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB116_9>
    8913	b7 01 00 00 00 02 00 00	r1 = 0x200
    8914	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8915	b7 01 00 00 00 00 00 00	r1 = 0x0
    8916	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8917	b7 01 00 00 5c 22 00 00	r1 = 0x225c
    8918	05 00 2f 00 00 00 00 00	goto +0x2f <LBB116_17>

00000000000116b8 <LBB116_16>
    8919	b7 01 00 00 00 02 00 00	r1 = 0x200
    8920	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8921	b7 01 00 00 00 00 00 00	r1 = 0x0
    8922	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8923	b7 01 00 00 5c 30 00 00	r1 = 0x305c
    8924	05 00 29 00 00 00 00 00	goto +0x29 <LBB116_17>

00000000000116e8 <LBB116_10>
    8925	b7 01 00 00 00 02 00 00	r1 = 0x200
    8926	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8927	b7 01 00 00 00 00 00 00	r1 = 0x0
    8928	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8929	b7 01 00 00 5c 74 00 00	r1 = 0x745c
    8930	05 00 23 00 00 00 00 00	goto +0x23 <LBB116_17>

0000000000011718 <LBB116_11>
    8931	b7 01 00 00 00 02 00 00	r1 = 0x200
    8932	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8933	b7 01 00 00 00 00 00 00	r1 = 0x0
    8934	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8935	b7 01 00 00 5c 72 00 00	r1 = 0x725c
    8936	05 00 1d 00 00 00 00 00	goto +0x1d <LBB116_17>

0000000000011748 <LBB116_7>
    8937	15 01 0e 00 27 00 00 00	if r1 == 0x27 goto +0xe <LBB116_15>
    8938	15 01 16 00 5c 00 00 00	if r1 == 0x5c goto +0x16 <LBB116_13>

0000000000011758 <LBB116_9>
    8939	57 03 00 00 01 00 00 00	r3 &= 0x1
    8940	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB116_22>
    8941	bf 71 00 00 00 00 00 00	r1 = r7
    8942	85 10 00 00 03 0d 00 00	call 0xd03 ; <core::unicode::unicode_data::grapheme_extend::lookup>
    8943	55 00 80 00 00 00 00 00	if r0 != 0x0 goto +0x80 <LBB116_23>

0000000000011780 <LBB116_22>
    8944	bf 71 00 00 00 00 00 00	r1 = r7
    8945	85 10 00 00 50 0b 00 00	call 0xb50 ; <core::unicode::printable::is_printable>
    8946	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB116_28>
    8947	05 00 14 00 00 00 00 00	goto +0x14 <LBB116_25>

00000000000117a0 <LBB116_28>
    8948	63 76 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r7
    8949	b7 01 00 00 80 00 00 00	r1 = 0x80
    8950	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    8951	05 00 0f 00 00 00 00 00	goto +0xf <LBB116_18>

00000000000117c0 <LBB116_15>
    8952	bf 31 00 00 00 00 00 00	r1 = r3
    8953	57 01 00 00 00 01 00 00	r1 &= 0x100
    8954	15 01 f0 ff 00 00 00 00	if r1 == 0x0 goto -0x10 <LBB116_9>
    8955	b7 01 00 00 00 02 00 00	r1 = 0x200
    8956	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8957	b7 01 00 00 00 00 00 00	r1 = 0x0
    8958	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8959	b7 01 00 00 5c 27 00 00	r1 = 0x275c
    8960	05 00 05 00 00 00 00 00	goto +0x5 <LBB116_17>

0000000000011808 <LBB116_13>
    8961	b7 01 00 00 00 02 00 00	r1 = 0x200
    8962	6b 16 0a 00 00 00 00 00	*(u16 *)(r6 + 0xa) = r1
    8963	b7 01 00 00 00 00 00 00	r1 = 0x0
    8964	7b 16 02 00 00 00 00 00	*(u64 *)(r6 + 0x2) = r1
    8965	b7 01 00 00 5c 5c 00 00	r1 = 0x5c5c

0000000000011830 <LBB116_17>
    8966	6b 16 00 00 00 00 00 00	*(u16 *)(r6 + 0x0) = r1

0000000000011838 <LBB116_18>
    8967	95 00 00 00 00 00 00 00	exit

0000000000011840 <LBB116_25>
    8968	18 01 00 00 fc ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xfffffffc ll
    8970	bf 72 00 00 00 00 00 00	r2 = r7
    8971	5f 12 00 00 00 00 00 00	r2 &= r1
    8972	77 02 00 00 01 00 00 00	r2 >>= 0x1
    8973	bf 71 00 00 00 00 00 00	r1 = r7
    8974	4f 21 00 00 00 00 00 00	r1 |= r2
    8975	18 02 00 00 f8 ff ff ff 00 00 00 00 00 00 00 00	r2 = 0xfffffff8 ll
    8977	bf 13 00 00 00 00 00 00	r3 = r1
    8978	5f 23 00 00 00 00 00 00	r3 &= r2
    8979	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8980	4f 31 00 00 00 00 00 00	r1 |= r3
    8981	b7 02 00 00 00 00 00 00	r2 = 0x0
    8982	73 2a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r2
    8983	6b 2a f6 ff 00 00 00 00	*(u16 *)(r10 - 0xa) = r2
    8984	18 02 00 00 e0 ff ff ff 00 00 00 00 00 00 00 00	r2 = 0xffffffe0 ll
    8986	bf 13 00 00 00 00 00 00	r3 = r1
    8987	5f 23 00 00 00 00 00 00	r3 &= r2
    8988	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8989	4f 31 00 00 00 00 00 00	r1 |= r3
    8990	bf 72 00 00 00 00 00 00	r2 = r7
    8991	77 02 00 00 04 00 00 00	r2 >>= 0x4
    8992	57 02 00 00 0f 00 00 00	r2 &= 0xf
    8993	bf 74 00 00 00 00 00 00	r4 = r7
    8994	77 04 00 00 08 00 00 00	r4 >>= 0x8
    8995	57 04 00 00 0f 00 00 00	r4 &= 0xf
    8996	bf 70 00 00 00 00 00 00	r0 = r7
    8997	77 00 00 00 0c 00 00 00	r0 >>= 0xc
    8998	57 00 00 00 0f 00 00 00	r0 &= 0xf
    8999	bf 78 00 00 00 00 00 00	r8 = r7
    9000	77 08 00 00 10 00 00 00	r8 >>= 0x10
    9001	57 08 00 00 0f 00 00 00	r8 &= 0xf
    9002	bf 75 00 00 00 00 00 00	r5 = r7
    9003	77 05 00 00 14 00 00 00	r5 >>= 0x14
    9004	57 05 00 00 0f 00 00 00	r5 &= 0xf
    9005	18 09 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r9 = 0x18d22 ll
    9007	18 03 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r3 = 0x18d22 ll
    9009	0f 53 00 00 00 00 00 00	r3 += r5
    9010	18 05 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r5 = 0x18d22 ll
    9012	0f 85 00 00 00 00 00 00	r5 += r8
    9013	18 08 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r8 = 0x18d22 ll
    9015	0f 08 00 00 00 00 00 00	r8 += r0
    9016	18 00 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r0 = 0x18d22 ll
    9018	0f 40 00 00 00 00 00 00	r0 += r4
    9019	18 04 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r4 = 0x18d22 ll
    9021	0f 24 00 00 00 00 00 00	r4 += r2
    9022	57 07 00 00 0f 00 00 00	r7 &= 0xf
    9023	0f 79 00 00 00 00 00 00	r9 += r7
    9024	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    9025	73 2a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r2
    9026	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    9027	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    9028	71 42 00 00 00 00 00 00	r2 = *(u8 *)(r4 + 0x0)
    9029	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    9030	71 02 00 00 00 00 00 00	r2 = *(u8 *)(r0 + 0x0)
    9031	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9032	71 82 00 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x0)
    9033	73 2a fb ff 00 00 00 00	*(u8 *)(r10 - 0x5) = r2
    9034	71 52 00 00 00 00 00 00	r2 = *(u8 *)(r5 + 0x0)
    9035	73 2a fa ff 00 00 00 00	*(u8 *)(r10 - 0x6) = r2
    9036	71 32 00 00 00 00 00 00	r2 = *(u8 *)(r3 + 0x0)
    9037	73 2a f9 ff 00 00 00 00	*(u8 *)(r10 - 0x7) = r2
    9038	18 02 00 00 00 fe ff ff 00 00 00 00 00 00 00 00	r2 = 0xfffffe00 ll
    9040	bf 13 00 00 00 00 00 00	r3 = r1
    9041	5f 23 00 00 00 00 00 00	r3 &= r2
    9042	77 03 00 00 08 00 00 00	r3 >>= 0x8
    9043	4f 31 00 00 00 00 00 00	r1 |= r3
    9044	18 02 00 00 00 00 fe ff 00 00 00 00 00 00 00 00	r2 = 0xfffe0000 ll
    9046	bf 13 00 00 00 00 00 00	r3 = r1
    9047	5f 23 00 00 00 00 00 00	r3 &= r2
    9048	77 03 00 00 10 00 00 00	r3 >>= 0x10
    9049	4f 31 00 00 00 00 00 00	r1 |= r3
    9050	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    9051	bf 12 00 00 00 00 00 00	r2 = r1
    9052	57 02 00 00 fe ff ff ff	r2 &= -0x2
    9053	77 01 00 00 01 00 00 00	r1 >>= 0x1
    9054	57 01 00 00 55 55 55 55	r1 &= 0x55555555
    9055	1f 12 00 00 00 00 00 00	r2 -= r1
    9056	bf 21 00 00 00 00 00 00	r1 = r2
    9057	57 01 00 00 33 33 33 33	r1 &= 0x33333333
    9058	77 02 00 00 02 00 00 00	r2 >>= 0x2
    9059	57 02 00 00 33 33 33 33	r2 &= 0x33333333
    9060	0f 21 00 00 00 00 00 00	r1 += r2
    9061	bf 12 00 00 00 00 00 00	r2 = r1
    9062	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9063	0f 21 00 00 00 00 00 00	r1 += r2
    9064	57 01 00 00 0f 0f 0f 0f	r1 &= 0xf0f0f0f
    9065	27 01 00 00 01 01 01 01	r1 *= 0x1010101
    9066	77 01 00 00 1a 00 00 00	r1 >>= 0x1a
    9067	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    9068	07 01 00 00 fe ff ff ff	r1 += -0x2
    9069	b7 02 00 00 0b 00 00 00	r2 = 0xb
    9070	2d 12 6d 00 00 00 00 00	if r2 > r1 goto +0x6d <LBB116_27>
    9071	05 00 67 00 00 00 00 00	goto +0x67 <LBB116_24>

0000000000011b80 <LBB116_23>
    9072	18 01 00 00 fc ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xfffffffc ll
    9074	bf 72 00 00 00 00 00 00	r2 = r7
    9075	5f 12 00 00 00 00 00 00	r2 &= r1
    9076	77 02 00 00 01 00 00 00	r2 >>= 0x1
    9077	bf 71 00 00 00 00 00 00	r1 = r7
    9078	4f 21 00 00 00 00 00 00	r1 |= r2
    9079	18 02 00 00 f8 ff ff ff 00 00 00 00 00 00 00 00	r2 = 0xfffffff8 ll
    9081	bf 13 00 00 00 00 00 00	r3 = r1
    9082	5f 23 00 00 00 00 00 00	r3 &= r2
    9083	77 03 00 00 02 00 00 00	r3 >>= 0x2
    9084	4f 31 00 00 00 00 00 00	r1 |= r3
    9085	b7 02 00 00 00 00 00 00	r2 = 0x0
    9086	73 2a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r2
    9087	6b 2a f6 ff 00 00 00 00	*(u16 *)(r10 - 0xa) = r2
    9088	18 02 00 00 e0 ff ff ff 00 00 00 00 00 00 00 00	r2 = 0xffffffe0 ll
    9090	bf 13 00 00 00 00 00 00	r3 = r1
    9091	5f 23 00 00 00 00 00 00	r3 &= r2
    9092	77 03 00 00 04 00 00 00	r3 >>= 0x4
    9093	4f 31 00 00 00 00 00 00	r1 |= r3
    9094	bf 72 00 00 00 00 00 00	r2 = r7
    9095	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9096	57 02 00 00 0f 00 00 00	r2 &= 0xf
    9097	bf 74 00 00 00 00 00 00	r4 = r7
    9098	77 04 00 00 08 00 00 00	r4 >>= 0x8
    9099	57 04 00 00 0f 00 00 00	r4 &= 0xf
    9100	bf 70 00 00 00 00 00 00	r0 = r7
    9101	77 00 00 00 0c 00 00 00	r0 >>= 0xc
    9102	57 00 00 00 0f 00 00 00	r0 &= 0xf
    9103	bf 78 00 00 00 00 00 00	r8 = r7
    9104	77 08 00 00 10 00 00 00	r8 >>= 0x10
    9105	57 08 00 00 0f 00 00 00	r8 &= 0xf
    9106	bf 75 00 00 00 00 00 00	r5 = r7
    9107	77 05 00 00 14 00 00 00	r5 >>= 0x14
    9108	57 05 00 00 0f 00 00 00	r5 &= 0xf
    9109	18 09 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r9 = 0x18d22 ll
    9111	18 03 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r3 = 0x18d22 ll
    9113	0f 53 00 00 00 00 00 00	r3 += r5
    9114	18 05 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r5 = 0x18d22 ll
    9116	0f 85 00 00 00 00 00 00	r5 += r8
    9117	18 08 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r8 = 0x18d22 ll
    9119	0f 08 00 00 00 00 00 00	r8 += r0
    9120	18 00 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r0 = 0x18d22 ll
    9122	0f 40 00 00 00 00 00 00	r0 += r4
    9123	18 04 00 00 22 8d 01 00 00 00 00 00 00 00 00 00	r4 = 0x18d22 ll
    9125	0f 24 00 00 00 00 00 00	r4 += r2
    9126	57 07 00 00 0f 00 00 00	r7 &= 0xf
    9127	0f 79 00 00 00 00 00 00	r9 += r7
    9128	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    9129	73 2a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r2
    9130	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    9131	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    9132	71 42 00 00 00 00 00 00	r2 = *(u8 *)(r4 + 0x0)
    9133	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    9134	71 02 00 00 00 00 00 00	r2 = *(u8 *)(r0 + 0x0)
    9135	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9136	71 82 00 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x0)
    9137	73 2a fb ff 00 00 00 00	*(u8 *)(r10 - 0x5) = r2
    9138	71 52 00 00 00 00 00 00	r2 = *(u8 *)(r5 + 0x0)
    9139	73 2a fa ff 00 00 00 00	*(u8 *)(r10 - 0x6) = r2
    9140	71 32 00 00 00 00 00 00	r2 = *(u8 *)(r3 + 0x0)
    9141	73 2a f9 ff 00 00 00 00	*(u8 *)(r10 - 0x7) = r2
    9142	18 02 00 00 00 fe ff ff 00 00 00 00 00 00 00 00	r2 = 0xfffffe00 ll
    9144	bf 13 00 00 00 00 00 00	r3 = r1
    9145	5f 23 00 00 00 00 00 00	r3 &= r2
    9146	77 03 00 00 08 00 00 00	r3 >>= 0x8
    9147	4f 31 00 00 00 00 00 00	r1 |= r3
    9148	18 02 00 00 00 00 fe ff 00 00 00 00 00 00 00 00	r2 = 0xfffe0000 ll
    9150	bf 13 00 00 00 00 00 00	r3 = r1
    9151	5f 23 00 00 00 00 00 00	r3 &= r2
    9152	77 03 00 00 10 00 00 00	r3 >>= 0x10
    9153	4f 31 00 00 00 00 00 00	r1 |= r3
    9154	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    9155	bf 12 00 00 00 00 00 00	r2 = r1
    9156	57 02 00 00 fe ff ff ff	r2 &= -0x2
    9157	77 01 00 00 01 00 00 00	r1 >>= 0x1
    9158	57 01 00 00 55 55 55 55	r1 &= 0x55555555
    9159	1f 12 00 00 00 00 00 00	r2 -= r1
    9160	bf 21 00 00 00 00 00 00	r1 = r2
    9161	57 01 00 00 33 33 33 33	r1 &= 0x33333333
    9162	77 02 00 00 02 00 00 00	r2 >>= 0x2
    9163	57 02 00 00 33 33 33 33	r2 &= 0x33333333
    9164	0f 21 00 00 00 00 00 00	r1 += r2
    9165	bf 12 00 00 00 00 00 00	r2 = r1
    9166	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9167	0f 21 00 00 00 00 00 00	r1 += r2
    9168	57 01 00 00 0f 0f 0f 0f	r1 &= 0xf0f0f0f
    9169	27 01 00 00 01 01 01 01	r1 *= 0x1010101
    9170	77 01 00 00 1a 00 00 00	r1 >>= 0x1a
    9171	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    9172	07 01 00 00 fe ff ff ff	r1 += -0x2
    9173	b7 02 00 00 0b 00 00 00	r2 = 0xb
    9174	2d 12 05 00 00 00 00 00	if r2 > r1 goto +0x5 <LBB116_27>

0000000000011eb8 <LBB116_24>
    9175	b7 02 00 00 0a 00 00 00	r2 = 0xa
    9176	18 03 00 00 38 a6 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a638 ll
    9178	85 10 00 00 bd 06 00 00	call 0x6bd ; <core::slice::index::slice_start_index_len_fail>
    9179	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000011ee0 <LBB116_27>
    9180	bf a2 00 00 00 00 00 00	r2 = r10
    9181	07 02 00 00 f6 ff ff ff	r2 += -0xa
    9182	0f 12 00 00 00 00 00 00	r2 += r1
    9183	b7 03 00 00 7b 00 00 00	r3 = 0x7b
    9184	73 32 02 00 00 00 00 00	*(u8 *)(r2 + 0x2) = r3
    9185	b7 03 00 00 5c 75 00 00	r3 = 0x755c
    9186	6b 32 00 00 00 00 00 00	*(u16 *)(r2 + 0x0) = r3
    9187	69 a2 fe ff 00 00 00 00	r2 = *(u16 *)(r10 - 0x2)
    9188	6b 26 08 00 00 00 00 00	*(u16 *)(r6 + 0x8) = r2
    9189	79 a2 f6 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xa)
    9190	7b 26 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r2
    9191	b7 02 00 00 0a 00 00 00	r2 = 0xa
    9192	73 26 0b 00 00 00 00 00	*(u8 *)(r6 + 0xb) = r2
    9193	73 16 0a 00 00 00 00 00	*(u8 *)(r6 + 0xa) = r1
    9194	05 00 1c ff 00 00 00 00	goto -0xe4 <LBB116_18>

0000000000011f58 <core::option::expect_failed>
    9195	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    9196	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    9197	b7 01 00 00 00 00 00 00	r1 = 0x0
    9198	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9199	18 01 00 00 c8 a2 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a2c8 ll
    9201	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    9202	b7 01 00 00 01 00 00 00	r1 = 0x1
    9203	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    9204	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    9205	bf a1 00 00 00 00 00 00	r1 = r10
    9206	07 01 00 00 f0 ff ff ff	r1 += -0x10
    9207	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    9208	18 01 00 00 60 7f 01 00 00 00 00 00 00 00 00 00	r1 = 0x17f60 ll
    9210	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    9211	bf a1 00 00 00 00 00 00	r1 = r10
    9212	07 01 00 00 b0 ff ff ff	r1 += -0x50
    9213	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    9214	bf a1 00 00 00 00 00 00	r1 = r10
    9215	07 01 00 00 c0 ff ff ff	r1 += -0x40
    9216	bf 32 00 00 00 00 00 00	r2 = r3
    9217	85 10 00 00 01 00 00 00	call 0x1 ; <core::panicking::panic_fmt>
    9218	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000012018 <core::panicking::panic_fmt>
    9219	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    9220	18 01 00 00 d8 a2 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a2d8 ll
    9222	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9223	18 01 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r1 = 0x19090 ll
    9225	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    9226	b7 01 00 00 01 00 00 00	r1 = 0x1
    9227	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    9228	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    9229	bf a1 00 00 00 00 00 00	r1 = r10
    9230	07 01 00 00 d8 ff ff ff	r1 += -0x28
    9231	85 10 00 00 d5 fb ff ff	call -0x42b ; <rust_begin_unwind>
    9232	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000012088 <core::panicking::panic>
    9233	b7 04 00 00 01 00 00 00	r4 = 0x1
    9234	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    9235	bf a4 00 00 00 00 00 00	r4 = r10
    9236	07 04 00 00 f0 ff ff ff	r4 += -0x10
    9237	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    9238	b7 04 00 00 00 00 00 00	r4 = 0x0
    9239	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    9240	7b 4a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r4
    9241	18 04 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r4 = 0x19090 ll
    9243	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    9244	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    9245	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    9246	bf a1 00 00 00 00 00 00	r1 = r10
    9247	07 01 00 00 c0 ff ff ff	r1 += -0x40
    9248	bf 32 00 00 00 00 00 00	r2 = r3
    9249	85 10 00 00 e1 ff ff ff	call -0x1f ; <core::panicking::panic_fmt>
    9250	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000012118 <core::panicking::panic_bounds_check>
    9251	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    9252	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    9253	b7 01 00 00 00 00 00 00	r1 = 0x0
    9254	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    9255	18 01 00 00 f8 a2 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a2f8 ll
    9257	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    9258	b7 01 00 00 02 00 00 00	r1 = 0x2
    9259	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    9260	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    9261	bf a1 00 00 00 00 00 00	r1 = r10
    9262	07 01 00 00 e0 ff ff ff	r1 += -0x20
    9263	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    9264	bf a1 00 00 00 00 00 00	r1 = r10
    9265	07 01 00 00 a0 ff ff ff	r1 += -0x60
    9266	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    9267	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
    9269	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    9270	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    9271	bf a1 00 00 00 00 00 00	r1 = r10
    9272	07 01 00 00 a8 ff ff ff	r1 += -0x58
    9273	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9274	bf a1 00 00 00 00 00 00	r1 = r10
    9275	07 01 00 00 b0 ff ff ff	r1 += -0x50
    9276	bf 32 00 00 00 00 00 00	r2 = r3
    9277	85 10 00 00 c5 ff ff ff	call -0x3b ; <core::panicking::panic_fmt>
    9278	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000121f8 <core::result::unwrap_failed>
    9279	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    9280	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    9281	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
    9282	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    9283	b7 01 00 00 00 00 00 00	r1 = 0x0
    9284	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    9285	18 01 00 00 18 a3 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a318 ll
    9287	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    9288	b7 01 00 00 02 00 00 00	r1 = 0x2
    9289	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    9290	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    9291	bf a1 00 00 00 00 00 00	r1 = r10
    9292	07 01 00 00 e0 ff ff ff	r1 += -0x20
    9293	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    9294	18 01 00 00 30 7f 01 00 00 00 00 00 00 00 00 00	r1 = 0x17f30 ll
    9296	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    9297	bf a1 00 00 00 00 00 00	r1 = r10
    9298	07 01 00 00 a0 ff ff ff	r1 += -0x60
    9299	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    9300	18 01 00 00 60 7f 01 00 00 00 00 00 00 00 00 00	r1 = 0x17f60 ll
    9302	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    9303	bf a1 00 00 00 00 00 00	r1 = r10
    9304	07 01 00 00 90 ff ff ff	r1 += -0x70
    9305	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9306	bf a1 00 00 00 00 00 00	r1 = r10
    9307	07 01 00 00 b0 ff ff ff	r1 += -0x50
    9308	bf 52 00 00 00 00 00 00	r2 = r5
    9309	85 10 00 00 a5 ff ff ff	call -0x5b ; <core::panicking::panic_fmt>
    9310	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000122f8 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    9311	bf 39 00 00 00 00 00 00	r9 = r3
    9312	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    9313	b7 06 00 00 00 00 00 00	r6 = 0x0
    9314	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    9315	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    9316	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    9317	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    9318	79 11 10 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x10)
    9319	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9320	b7 01 00 00 00 00 00 00	r1 = 0x0
    9321	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    9322	b7 07 00 00 00 00 00 00	r7 = 0x0
    9323	05 00 0c 00 00 00 00 00	goto +0xc <LBB209_1>

0000000000012360 <LBB209_32>
    9324	57 01 00 00 01 00 00 00	r1 &= 0x1
    9325	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    9326	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    9327	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    9328	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    9329	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    9330	8d 00 00 00 04 00 00 00	callx r4
    9331	bf 01 00 00 00 00 00 00	r1 = r0
    9332	b7 00 00 00 01 00 00 00	r0 = 0x1
    9333	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    9334	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    9335	55 01 8a 00 00 00 00 00	if r1 != 0x0 goto +0x8a <LBB209_28>

00000000000123c0 <LBB209_1>
    9336	57 07 00 00 ff 00 00 00	r7 &= 0xff
    9337	b7 00 00 00 00 00 00 00	r0 = 0x0
    9338	55 07 87 00 00 00 00 00	if r7 != 0x0 goto +0x87 <LBB209_28>
    9339	2d 96 65 00 00 00 00 00	if r6 > r9 goto +0x65 <LBB209_26>
    9340	bf 61 00 00 00 00 00 00	r1 = r6

00000000000123e8 <LBB209_4>
    9341	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    9342	0f 12 00 00 00 00 00 00	r2 += r1
    9343	bf 93 00 00 00 00 00 00	r3 = r9
    9344	1f 13 00 00 00 00 00 00	r3 -= r1
    9345	b7 04 00 00 10 00 00 00	r4 = 0x10
    9346	2d 34 42 00 00 00 00 00	if r4 > r3 goto +0x42 <LBB209_18>
    9347	bf 26 00 00 00 00 00 00	r6 = r2
    9348	07 06 00 00 07 00 00 00	r6 += 0x7
    9349	57 06 00 00 f8 ff ff ff	r6 &= -0x8
    9350	bf 64 00 00 00 00 00 00	r4 = r6
    9351	1f 24 00 00 00 00 00 00	r4 -= r2
    9352	15 04 07 00 00 00 00 00	if r4 == 0x0 goto +0x7 <LBB209_8>
    9353	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000012450 <LBB209_7>
    9354	bf 20 00 00 00 00 00 00	r0 = r2
    9355	0f 50 00 00 00 00 00 00	r0 += r5
    9356	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    9357	15 00 44 00 0a 00 00 00	if r0 == 0xa goto +0x44 <LBB209_23>
    9358	07 05 00 00 01 00 00 00	r5 += 0x1
    9359	2d 54 fa ff 00 00 00 00	if r4 > r5 goto -0x6 <LBB209_7>

0000000000012480 <LBB209_8>
    9360	bf 35 00 00 00 00 00 00	r5 = r3
    9361	07 05 00 00 f0 ff ff ff	r5 += -0x10
    9362	18 08 00 00 0a 0a 0a 0a 00 00 00 00 0a 0a 0a 0a	r8 = 0xa0a0a0a0a0a0a0a ll
    9364	2d 54 23 00 00 00 00 00	if r4 > r5 goto +0x23 <LBB209_12>
    9365	b7 00 00 00 08 00 00 00	r0 = 0x8
    9366	0f 60 00 00 00 00 00 00	r0 += r6
    9367	05 00 11 00 00 00 00 00	goto +0x11 <LBB209_10>

00000000000124c0 <LBB209_16>
    9368	79 06 00 00 00 00 00 00	r6 = *(u64 *)(r0 + 0x0)
    9369	bf 67 00 00 00 00 00 00	r7 = r6
    9370	af 87 00 00 00 00 00 00	r7 ^= r8
    9371	18 08 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r8 = -0x101010101010101 ll
    9373	0f 87 00 00 00 00 00 00	r7 += r8
    9374	18 08 00 00 0a 0a 0a 0a 00 00 00 00 0a 0a 0a 0a	r8 = 0xa0a0a0a0a0a0a0a ll
    9376	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
    9377	5f 76 00 00 00 00 00 00	r6 &= r7
    9378	18 07 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r7 = -0x7f7f7f7f7f7f7f80 ll
    9380	5f 76 00 00 00 00 00 00	r6 &= r7
    9381	55 06 12 00 00 00 00 00	if r6 != 0x0 goto +0x12 <LBB209_12>
    9382	07 00 00 00 10 00 00 00	r0 += 0x10
    9383	07 04 00 00 10 00 00 00	r4 += 0x10
    9384	2d 54 0f 00 00 00 00 00	if r4 > r5 goto +0xf <LBB209_12>

0000000000012548 <LBB209_10>
    9385	79 06 f8 ff 00 00 00 00	r6 = *(u64 *)(r0 - 0x8)
    9386	bf 67 00 00 00 00 00 00	r7 = r6
    9387	af 87 00 00 00 00 00 00	r7 ^= r8
    9388	18 08 00 00 ff fe fe fe 00 00 00 00 fe fe fe fe	r8 = -0x101010101010101 ll
    9390	0f 87 00 00 00 00 00 00	r7 += r8
    9391	18 08 00 00 0a 0a 0a 0a 00 00 00 00 0a 0a 0a 0a	r8 = 0xa0a0a0a0a0a0a0a ll
    9393	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
    9394	5f 76 00 00 00 00 00 00	r6 &= r7
    9395	18 07 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r7 = -0x7f7f7f7f7f7f7f80 ll
    9397	5f 76 00 00 00 00 00 00	r6 &= r7
    9398	55 06 01 00 00 00 00 00	if r6 != 0x0 goto +0x1 <LBB209_12>
    9399	05 00 e0 ff 00 00 00 00	goto -0x20 <LBB209_16>

00000000000125c0 <LBB209_12>
    9400	bf 96 00 00 00 00 00 00	r6 = r9
    9401	1d 43 27 00 00 00 00 00	if r3 == r4 goto +0x27 <LBB209_26>
    9402	1f 43 00 00 00 00 00 00	r3 -= r4
    9403	0f 42 00 00 00 00 00 00	r2 += r4
    9404	b7 05 00 00 00 00 00 00	r5 = 0x0

00000000000125e8 <LBB209_14>
    9405	bf 20 00 00 00 00 00 00	r0 = r2
    9406	0f 50 00 00 00 00 00 00	r0 += r5
    9407	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    9408	15 00 0f 00 0a 00 00 00	if r0 == 0xa goto +0xf <LBB209_22>
    9409	07 05 00 00 01 00 00 00	r5 += 0x1
    9410	bf 96 00 00 00 00 00 00	r6 = r9
    9411	2d 53 f9 ff 00 00 00 00	if r3 > r5 goto -0x7 <LBB209_14>
    9412	05 00 1c 00 00 00 00 00	goto +0x1c <LBB209_26>

0000000000012628 <LBB209_18>
    9413	bf 96 00 00 00 00 00 00	r6 = r9
    9414	1d 91 1a 00 00 00 00 00	if r1 == r9 goto +0x1a <LBB209_26>
    9415	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000012640 <LBB209_20>
    9416	bf 24 00 00 00 00 00 00	r4 = r2
    9417	0f 54 00 00 00 00 00 00	r4 += r5
    9418	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    9419	15 04 06 00 0a 00 00 00	if r4 == 0xa goto +0x6 <LBB209_23>
    9420	07 05 00 00 01 00 00 00	r5 += 0x1
    9421	bf 96 00 00 00 00 00 00	r6 = r9
    9422	2d 53 f9 ff 00 00 00 00	if r3 > r5 goto -0x7 <LBB209_20>
    9423	05 00 11 00 00 00 00 00	goto +0x11 <LBB209_26>

0000000000012680 <LBB209_22>
    9424	0f 54 00 00 00 00 00 00	r4 += r5
    9425	bf 45 00 00 00 00 00 00	r5 = r4

0000000000012690 <LBB209_23>
    9426	0f 51 00 00 00 00 00 00	r1 += r5
    9427	bf 16 00 00 00 00 00 00	r6 = r1
    9428	07 06 00 00 01 00 00 00	r6 += 0x1
    9429	2d 19 03 00 00 00 00 00	if r9 > r1 goto +0x3 <LBB209_25>

00000000000126b0 <LBB209_24>
    9430	bf 61 00 00 00 00 00 00	r1 = r6
    9431	2d 96 09 00 00 00 00 00	if r6 > r9 goto +0x9 <LBB209_26>
    9432	05 00 a4 ff 00 00 00 00	goto -0x5c <LBB209_4>

00000000000126c8 <LBB209_25>
    9433	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    9434	0f 12 00 00 00 00 00 00	r2 += r1
    9435	b7 07 00 00 00 00 00 00	r7 = 0x0
    9436	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    9437	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r6
    9438	bf 68 00 00 00 00 00 00	r8 = r6
    9439	15 01 07 00 0a 00 00 00	if r1 == 0xa goto +0x7 <LBB209_27>
    9440	05 00 f5 ff 00 00 00 00	goto -0xb <LBB209_24>

0000000000012708 <LBB209_26>
    9441	b7 07 00 00 01 00 00 00	r7 = 0x1
    9442	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    9443	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    9444	bf 98 00 00 00 00 00 00	r8 = r9
    9445	b7 00 00 00 00 00 00 00	r0 = 0x0
    9446	1d 91 1b 00 00 00 00 00	if r1 == r9 goto +0x1b <LBB209_28>

0000000000012738 <LBB209_27>
    9447	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    9448	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    9449	15 01 0a 00 00 00 00 00	if r1 == 0x0 goto +0xa <LBB209_29>
    9450	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    9451	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    9452	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    9453	18 02 00 00 54 8b 01 00 00 00 00 00 00 00 00 00	r2 = 0x18b54 ll
    9455	b7 03 00 00 04 00 00 00	r3 = 0x4
    9456	8d 00 00 00 04 00 00 00	callx r4
    9457	bf 01 00 00 00 00 00 00	r1 = r0
    9458	b7 00 00 00 01 00 00 00	r0 = 0x1
    9459	55 01 0e 00 00 00 00 00	if r1 != 0x0 goto +0xe <LBB209_28>

00000000000127a0 <LBB209_29>
    9460	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    9461	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    9462	0f 42 00 00 00 00 00 00	r2 += r4
    9463	bf 83 00 00 00 00 00 00	r3 = r8
    9464	1f 43 00 00 00 00 00 00	r3 -= r4
    9465	b7 01 00 00 00 00 00 00	r1 = 0x0
    9466	1d 48 71 ff 00 00 00 00	if r8 == r4 goto -0x8f <LBB209_32>
    9467	bf 31 00 00 00 00 00 00	r1 = r3
    9468	0f 21 00 00 00 00 00 00	r1 += r2
    9469	71 14 ff ff 00 00 00 00	r4 = *(u8 *)(r1 - 0x1)
    9470	b7 01 00 00 01 00 00 00	r1 = 0x1
    9471	15 04 6c ff 0a 00 00 00	if r4 == 0xa goto -0x94 <LBB209_32>
    9472	b7 01 00 00 00 00 00 00	r1 = 0x0
    9473	05 00 6a ff 00 00 00 00	goto -0x96 <LBB209_32>

0000000000012810 <LBB209_28>
    9474	95 00 00 00 00 00 00 00	exit

0000000000012818 <core::fmt::builders::DebugStruct::field>
    9475	bf 28 00 00 00 00 00 00	r8 = r2
    9476	bf 16 00 00 00 00 00 00	r6 = r1
    9477	b7 02 00 00 01 00 00 00	r2 = 0x1
    9478	71 61 08 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x8)
    9479	b7 07 00 00 01 00 00 00	r7 = 0x1
    9480	55 01 73 00 00 00 00 00	if r1 != 0x0 goto +0x73 <LBB210_18>
    9481	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    9482	71 62 09 00 00 00 00 00	r2 = *(u8 *)(r6 + 0x9)
    9483	79 69 00 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x0)
    9484	61 91 34 00 00 00 00 00	r1 = *(u32 *)(r9 + 0x34)
    9485	bf 13 00 00 00 00 00 00	r3 = r1
    9486	57 03 00 00 04 00 00 00	r3 &= 0x4
    9487	7b 4a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r4
    9488	7b 5a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r5
    9489	55 03 28 00 00 00 00 00	if r3 != 0x0 goto +0x28 <LBB210_7>
    9490	bf 21 00 00 00 00 00 00	r1 = r2
    9491	18 02 00 00 f9 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190f9 ll
    9493	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB210_4>
    9494	18 02 00 00 fc 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190fc ll

00000000000128c0 <LBB210_4>
    9496	b7 03 00 00 03 00 00 00	r3 = 0x3
    9497	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB210_6>
    9498	b7 03 00 00 02 00 00 00	r3 = 0x2

00000000000128d8 <LBB210_6>
    9499	79 91 20 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x20)
    9500	79 94 28 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x28)
    9501	79 44 18 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x18)
    9502	8d 00 00 00 04 00 00 00	callx r4
    9503	b7 02 00 00 01 00 00 00	r2 = 0x1
    9504	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    9505	55 00 5a 00 00 00 00 00	if r0 != 0x0 goto +0x5a <LBB210_18>
    9506	79 91 20 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x20)
    9507	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    9508	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9509	bf 82 00 00 00 00 00 00	r2 = r8
    9510	8d 00 00 00 04 00 00 00	callx r4
    9511	b7 02 00 00 01 00 00 00	r2 = 0x1
    9512	55 00 53 00 00 00 00 00	if r0 != 0x0 goto +0x53 <LBB210_18>
    9513	79 91 20 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x20)
    9514	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    9515	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9516	18 02 00 00 f7 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190f7 ll
    9518	b7 03 00 00 02 00 00 00	r3 = 0x2
    9519	8d 00 00 00 04 00 00 00	callx r4
    9520	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)
    9521	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    9522	b7 02 00 00 01 00 00 00	r2 = 0x1
    9523	55 00 48 00 00 00 00 00	if r0 != 0x0 goto +0x48 <LBB210_18>
    9524	79 33 18 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x18)
    9525	bf 92 00 00 00 00 00 00	r2 = r9
    9526	8d 00 00 00 03 00 00 00	callx r3
    9527	b7 02 00 00 01 00 00 00	r2 = 0x1
    9528	bf 07 00 00 00 00 00 00	r7 = r0
    9529	05 00 42 00 00 00 00 00	goto +0x42 <LBB210_18>

00000000000129d0 <LBB210_7>
    9530	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB210_11>
    9531	05 00 0a 00 00 00 00 00	goto +0xa <LBB210_13>

00000000000129e0 <LBB210_11>
    9532	79 91 20 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x20)
    9533	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    9534	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9535	18 02 00 00 fe 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190fe ll
    9537	b7 03 00 00 03 00 00 00	r3 = 0x3
    9538	8d 00 00 00 04 00 00 00	callx r4
    9539	b7 02 00 00 01 00 00 00	r2 = 0x1
    9540	55 00 37 00 00 00 00 00	if r0 != 0x0 goto +0x37 <LBB210_18>
    9541	61 91 34 00 00 00 00 00	r1 = *(u32 *)(r9 + 0x34)

0000000000012a30 <LBB210_13>
    9542	73 7a bf ff 00 00 00 00	*(u8 *)(r10 - 0x41) = r7
    9543	79 92 20 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x20)
    9544	79 93 28 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x28)
    9545	bf a4 00 00 00 00 00 00	r4 = r10
    9546	07 04 00 00 bf ff ff ff	r4 += -0x41
    9547	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    9548	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r3
    9549	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    9550	79 92 00 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x0)
    9551	79 93 08 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x8)
    9552	79 94 10 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x10)
    9553	79 95 18 00 00 00 00 00	r5 = *(u64 *)(r9 + 0x18)
    9554	61 90 30 00 00 00 00 00	r0 = *(u32 *)(r9 + 0x30)
    9555	71 99 38 00 00 00 00 00	r9 = *(u8 *)(r9 + 0x38)
    9556	73 9a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r9
    9557	63 0a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r0
    9558	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    9559	18 01 00 00 38 a3 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a338 ll
    9561	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    9562	7b 5a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r5
    9563	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    9564	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    9565	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    9566	bf a1 00 00 00 00 00 00	r1 = r10
    9567	07 01 00 00 a0 ff ff ff	r1 += -0x60
    9568	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9569	bf 82 00 00 00 00 00 00	r2 = r8
    9570	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    9571	85 10 00 00 fb fe ff ff	call -0x105 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    9572	55 00 16 00 00 00 00 00	if r0 != 0x0 goto +0x16 <LBB210_17>
    9573	bf a1 00 00 00 00 00 00	r1 = r10
    9574	07 01 00 00 a0 ff ff ff	r1 += -0x60
    9575	18 02 00 00 f7 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190f7 ll
    9577	b7 03 00 00 02 00 00 00	r3 = 0x2
    9578	85 10 00 00 f4 fe ff ff	call -0x10c ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    9579	55 00 0f 00 00 00 00 00	if r0 != 0x0 goto +0xf <LBB210_17>
    9580	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    9581	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    9582	bf a2 00 00 00 00 00 00	r2 = r10
    9583	07 02 00 00 c0 ff ff ff	r2 += -0x40
    9584	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    9585	8d 00 00 00 03 00 00 00	callx r3
    9586	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB210_17>
    9587	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    9588	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    9589	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    9590	18 02 00 00 01 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19101 ll
    9592	b7 03 00 00 02 00 00 00	r3 = 0x2
    9593	8d 00 00 00 04 00 00 00	callx r4
    9594	bf 07 00 00 00 00 00 00	r7 = r0

0000000000012bd8 <LBB210_17>
    9595	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000012be0 <LBB210_18>
    9596	73 26 09 00 00 00 00 00	*(u8 *)(r6 + 0x9) = r2
    9597	73 76 08 00 00 00 00 00	*(u8 *)(r6 + 0x8) = r7
    9598	bf 60 00 00 00 00 00 00	r0 = r6
    9599	95 00 00 00 00 00 00 00	exit

0000000000012c00 <core::fmt::builders::DebugStruct::finish>
    9600	bf 16 00 00 00 00 00 00	r6 = r1
    9601	71 61 08 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x8)
    9602	71 62 09 00 00 00 00 00	r2 = *(u8 *)(r6 + 0x9)
    9603	55 02 04 00 00 00 00 00	if r2 != 0x0 goto +0x4 <LBB212_4>
    9604	b7 00 00 00 01 00 00 00	r0 = 0x1
    9605	55 01 17 00 00 00 00 00	if r1 != 0x0 goto +0x17 <LBB212_3>
    9606	b7 00 00 00 00 00 00 00	r0 = 0x0
    9607	05 00 15 00 00 00 00 00	goto +0x15 <LBB212_3>

0000000000012c40 <LBB212_4>
    9608	b7 00 00 00 01 00 00 00	r0 = 0x1
    9609	55 01 12 00 00 00 00 00	if r1 != 0x0 goto +0x12 <LBB212_9>
    9610	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    9611	61 21 34 00 00 00 00 00	r1 = *(u32 *)(r2 + 0x34)
    9612	57 01 00 00 04 00 00 00	r1 &= 0x4
    9613	55 01 07 00 00 00 00 00	if r1 != 0x0 goto +0x7 <LBB212_7>
    9614	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    9615	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    9616	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9617	18 02 00 00 04 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19104 ll
    9619	b7 03 00 00 02 00 00 00	r3 = 0x2
    9620	05 00 06 00 00 00 00 00	goto +0x6 <LBB212_8>

0000000000012ca8 <LBB212_7>
    9621	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    9622	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    9623	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9624	18 02 00 00 03 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19103 ll
    9626	b7 03 00 00 01 00 00 00	r3 = 0x1

0000000000012cd8 <LBB212_8>
    9627	8d 00 00 00 04 00 00 00	callx r4

0000000000012ce0 <LBB212_9>
    9628	73 06 08 00 00 00 00 00	*(u8 *)(r6 + 0x8) = r0

0000000000012ce8 <LBB212_3>
    9629	57 00 00 00 01 00 00 00	r0 &= 0x1
    9630	95 00 00 00 00 00 00 00	exit

0000000000012cf8 <core::fmt::builders::DebugTuple::field>
    9631	bf 28 00 00 00 00 00 00	r8 = r2
    9632	bf 16 00 00 00 00 00 00	r6 = r1
    9633	71 61 10 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x10)
    9634	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB213_2>
    9635	b7 09 00 00 01 00 00 00	r9 = 0x1
    9636	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)

0000000000012d28 <LBB213_15>
    9637	73 96 10 00 00 00 00 00	*(u8 *)(r6 + 0x10) = r9
    9638	07 01 00 00 01 00 00 00	r1 += 0x1
    9639	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    9640	bf 60 00 00 00 00 00 00	r0 = r6
    9641	95 00 00 00 00 00 00 00	exit

0000000000012d50 <LBB213_2>
    9642	79 64 00 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x0)
    9643	79 67 08 00 00 00 00 00	r7 = *(u64 *)(r6 + 0x8)
    9644	61 71 34 00 00 00 00 00	r1 = *(u32 *)(r7 + 0x34)
    9645	bf 12 00 00 00 00 00 00	r2 = r1
    9646	57 02 00 00 04 00 00 00	r2 &= 0x4
    9647	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    9648	55 02 19 00 00 00 00 00	if r2 != 0x0 goto +0x19 <LBB213_8>
    9649	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8
    9650	18 02 00 00 06 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19106 ll
    9652	15 04 02 00 00 00 00 00	if r4 == 0x0 goto +0x2 <LBB213_5>
    9653	18 02 00 00 fc 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190fc ll

0000000000012db8 <LBB213_5>
    9655	b7 09 00 00 01 00 00 00	r9 = 0x1
    9656	b7 03 00 00 01 00 00 00	r3 = 0x1
    9657	bf 48 00 00 00 00 00 00	r8 = r4
    9658	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB213_7>
    9659	b7 03 00 00 02 00 00 00	r3 = 0x2

0000000000012de0 <LBB213_7>
    9660	79 71 20 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x20)
    9661	79 74 28 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x28)
    9662	79 44 18 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x18)
    9663	8d 00 00 00 04 00 00 00	callx r4
    9664	bf 81 00 00 00 00 00 00	r1 = r8
    9665	55 00 e3 ff 00 00 00 00	if r0 != 0x0 goto -0x1d <LBB213_15>
    9666	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    9667	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    9668	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    9669	bf 72 00 00 00 00 00 00	r2 = r7
    9670	8d 00 00 00 03 00 00 00	callx r3
    9671	bf 09 00 00 00 00 00 00	r9 = r0
    9672	bf 81 00 00 00 00 00 00	r1 = r8
    9673	05 00 db ff 00 00 00 00	goto -0x25 <LBB213_15>

0000000000012e50 <LBB213_8>
    9674	7b 4a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r4
    9675	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB213_10>
    9676	05 00 0b 00 00 00 00 00	goto +0xb <LBB213_12>

0000000000012e68 <LBB213_10>
    9677	79 71 20 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x20)
    9678	79 72 28 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x28)
    9679	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9680	18 02 00 00 07 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19107 ll
    9682	b7 03 00 00 02 00 00 00	r3 = 0x2
    9683	8d 00 00 00 04 00 00 00	callx r4
    9684	b7 09 00 00 01 00 00 00	r9 = 0x1
    9685	b7 01 00 00 00 00 00 00	r1 = 0x0
    9686	55 00 ce ff 00 00 00 00	if r0 != 0x0 goto -0x32 <LBB213_15>
    9687	61 71 34 00 00 00 00 00	r1 = *(u32 *)(r7 + 0x34)

0000000000012ec0 <LBB213_12>
    9688	b7 09 00 00 01 00 00 00	r9 = 0x1
    9689	73 9a bf ff 00 00 00 00	*(u8 *)(r10 - 0x41) = r9
    9690	79 72 20 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x20)
    9691	79 73 28 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x28)
    9692	bf a4 00 00 00 00 00 00	r4 = r10
    9693	07 04 00 00 bf ff ff ff	r4 += -0x41
    9694	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    9695	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r3
    9696	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    9697	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    9698	79 73 08 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x8)
    9699	79 74 10 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x10)
    9700	79 75 18 00 00 00 00 00	r5 = *(u64 *)(r7 + 0x18)
    9701	61 70 30 00 00 00 00 00	r0 = *(u32 *)(r7 + 0x30)
    9702	71 77 38 00 00 00 00 00	r7 = *(u8 *)(r7 + 0x38)
    9703	73 7a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r7
    9704	63 0a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r0
    9705	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    9706	18 01 00 00 38 a3 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a338 ll
    9708	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    9709	bf a1 00 00 00 00 00 00	r1 = r10
    9710	07 01 00 00 a0 ff ff ff	r1 += -0x60
    9711	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9712	7b 5a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r5
    9713	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    9714	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    9715	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    9716	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    9717	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    9718	bf a2 00 00 00 00 00 00	r2 = r10
    9719	07 02 00 00 c0 ff ff ff	r2 += -0x40
    9720	bf 81 00 00 00 00 00 00	r1 = r8
    9721	8d 00 00 00 03 00 00 00	callx r3
    9722	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB213_14>
    9723	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    9724	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    9725	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    9726	18 02 00 00 01 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19101 ll
    9728	b7 03 00 00 02 00 00 00	r3 = 0x2
    9729	8d 00 00 00 04 00 00 00	callx r4
    9730	bf 09 00 00 00 00 00 00	r9 = r0

0000000000013018 <LBB213_14>
    9731	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    9732	05 00 a0 ff 00 00 00 00	goto -0x60 <LBB213_15>

0000000000013028 <core::fmt::builders::DebugTuple::finish>
    9733	bf 16 00 00 00 00 00 00	r6 = r1
    9734	71 62 10 00 00 00 00 00	r2 = *(u8 *)(r6 + 0x10)
    9735	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    9736	55 01 05 00 00 00 00 00	if r1 != 0x0 goto +0x5 <LBB214_4>
    9737	bf 21 00 00 00 00 00 00	r1 = r2
    9738	b7 07 00 00 01 00 00 00	r7 = 0x1
    9739	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB214_3>
    9740	b7 07 00 00 00 00 00 00	r7 = 0x0
    9741	05 00 07 00 00 00 00 00	goto +0x7 <LBB214_3>

0000000000013070 <LBB214_4>
    9742	b7 07 00 00 01 00 00 00	r7 = 0x1
    9743	55 02 1e 00 00 00 00 00	if r2 != 0x0 goto +0x1e <LBB214_11>
    9744	55 01 02 00 01 00 00 00	if r1 != 0x1 goto +0x2 <LBB214_7>
    9745	71 61 11 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x11)
    9746	55 01 05 00 00 00 00 00	if r1 != 0x0 goto +0x5 <LBB214_8>

0000000000013098 <LBB214_7>
    9747	79 68 08 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x8)
    9748	05 00 07 00 00 00 00 00	goto +0x7 <LBB214_9>

00000000000130a8 <LBB214_3>
    9749	57 07 00 00 01 00 00 00	r7 &= 0x1
    9750	bf 70 00 00 00 00 00 00	r0 = r7
    9751	95 00 00 00 00 00 00 00	exit

00000000000130c0 <LBB214_8>
    9752	79 68 08 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x8)
    9753	61 81 34 00 00 00 00 00	r1 = *(u32 *)(r8 + 0x34)
    9754	57 01 00 00 04 00 00 00	r1 &= 0x4
    9755	15 01 0a 00 00 00 00 00	if r1 == 0x0 goto +0xa <LBB214_10>

00000000000130e0 <LBB214_9>
    9756	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    9757	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
    9758	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9759	18 02 00 00 bb 90 01 00 00 00 00 00 00 00 00 00	r2 = 0x190bb ll
    9761	b7 03 00 00 01 00 00 00	r3 = 0x1
    9762	8d 00 00 00 04 00 00 00	callx r4
    9763	bf 07 00 00 00 00 00 00	r7 = r0
    9764	73 76 10 00 00 00 00 00	*(u8 *)(r6 + 0x10) = r7
    9765	05 00 ef ff 00 00 00 00	goto -0x11 <LBB214_3>

0000000000013130 <LBB214_10>
    9766	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    9767	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
    9768	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    9769	18 02 00 00 09 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19109 ll
    9771	b7 03 00 00 01 00 00 00	r3 = 0x1
    9772	8d 00 00 00 04 00 00 00	callx r4
    9773	15 00 ee ff 00 00 00 00	if r0 == 0x0 goto -0x12 <LBB214_9>

0000000000013170 <LBB214_11>
    9774	73 76 10 00 00 00 00 00	*(u8 *)(r6 + 0x10) = r7
    9775	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB214_3>

0000000000013180 <core::fmt::Write::write_char>
    9776	b7 03 00 00 00 00 00 00	r3 = 0x0
    9777	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r3
    9778	bf 23 00 00 00 00 00 00	r3 = r2
    9779	67 03 00 00 20 00 00 00	r3 <<= 0x20
    9780	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9781	b7 04 00 00 80 00 00 00	r4 = 0x80
    9782	2d 34 16 00 00 00 00 00	if r4 > r3 goto +0x16 <LBB235_3>
    9783	b7 04 00 00 00 08 00 00	r4 = 0x800
    9784	2d 34 17 00 00 00 00 00	if r4 > r3 goto +0x17 <LBB235_4>
    9785	bf 23 00 00 00 00 00 00	r3 = r2
    9786	67 03 00 00 20 00 00 00	r3 <<= 0x20
    9787	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9788	b7 04 00 00 00 00 01 00	r4 = 0x10000
    9789	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB235_5>
    9790	05 00 1a 00 00 00 00 00	goto +0x1a <LBB235_6>

00000000000131f8 <LBB235_5>
    9791	bf 23 00 00 00 00 00 00	r3 = r2
    9792	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9793	47 03 00 00 80 00 00 00	r3 |= 0x80
    9794	73 3a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r3
    9795	bf 23 00 00 00 00 00 00	r3 = r2
    9796	77 03 00 00 0c 00 00 00	r3 >>= 0xc
    9797	47 03 00 00 e0 00 00 00	r3 |= 0xe0
    9798	73 3a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r3
    9799	77 02 00 00 06 00 00 00	r2 >>= 0x6
    9800	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    9801	47 02 00 00 80 00 00 00	r2 |= 0x80
    9802	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    9803	b7 03 00 00 03 00 00 00	r3 = 0x3
    9804	05 00 1f 00 00 00 00 00	goto +0x1f <LBB235_7>

0000000000013268 <LBB235_3>
    9805	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9806	b7 03 00 00 01 00 00 00	r3 = 0x1
    9807	05 00 1c 00 00 00 00 00	goto +0x1c <LBB235_7>

0000000000013280 <LBB235_4>
    9808	bf 23 00 00 00 00 00 00	r3 = r2
    9809	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9810	47 03 00 00 80 00 00 00	r3 |= 0x80
    9811	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    9812	77 02 00 00 06 00 00 00	r2 >>= 0x6
    9813	47 02 00 00 c0 00 00 00	r2 |= 0xc0
    9814	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9815	b7 03 00 00 02 00 00 00	r3 = 0x2
    9816	05 00 13 00 00 00 00 00	goto +0x13 <LBB235_7>

00000000000132c8 <LBB235_6>
    9817	bf 23 00 00 00 00 00 00	r3 = r2
    9818	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9819	47 03 00 00 80 00 00 00	r3 |= 0x80
    9820	73 3a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r3
    9821	bf 23 00 00 00 00 00 00	r3 = r2
    9822	77 03 00 00 06 00 00 00	r3 >>= 0x6
    9823	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9824	47 03 00 00 80 00 00 00	r3 |= 0x80
    9825	73 3a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r3
    9826	bf 23 00 00 00 00 00 00	r3 = r2
    9827	77 03 00 00 0c 00 00 00	r3 >>= 0xc
    9828	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9829	47 03 00 00 80 00 00 00	r3 |= 0x80
    9830	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    9831	77 02 00 00 12 00 00 00	r2 >>= 0x12
    9832	57 02 00 00 07 00 00 00	r2 &= 0x7
    9833	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    9834	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9835	b7 03 00 00 04 00 00 00	r3 = 0x4

0000000000013360 <LBB235_7>
    9836	bf a2 00 00 00 00 00 00	r2 = r10
    9837	07 02 00 00 fc ff ff ff	r2 += -0x4
    9838	85 10 00 00 f0 fd ff ff	call -0x210 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    9839	95 00 00 00 00 00 00 00	exit

0000000000013380 <core::fmt::Write::write_fmt>
    9840	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    9841	bf a6 00 00 00 00 00 00	r6 = r10
    9842	07 06 00 00 d0 ff ff ff	r6 += -0x30
    9843	bf 61 00 00 00 00 00 00	r1 = r6
    9844	b7 03 00 00 30 00 00 00	r3 = 0x30
    9845	85 10 00 00 e2 09 00 00	call 0x9e2 ; <memcpy>
    9846	bf a1 00 00 00 00 00 00	r1 = r10
    9847	07 01 00 00 c8 ff ff ff	r1 += -0x38
    9848	18 02 00 00 80 a3 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a380 ll
    9850	bf 63 00 00 00 00 00 00	r3 = r6
    9851	85 10 00 00 5d 00 00 00	call 0x5d ; <core::fmt::write>
    9852	95 00 00 00 00 00 00 00	exit

00000000000133e8 <<&mut W as core::fmt::Write>::write_str>
    9853	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    9854	85 10 00 00 e0 fd ff ff	call -0x220 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    9855	95 00 00 00 00 00 00 00	exit

0000000000013400 <<&mut W as core::fmt::Write>::write_char>
    9856	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    9857	b7 03 00 00 00 00 00 00	r3 = 0x0
    9858	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r3
    9859	bf 23 00 00 00 00 00 00	r3 = r2
    9860	67 03 00 00 20 00 00 00	r3 <<= 0x20
    9861	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9862	b7 04 00 00 80 00 00 00	r4 = 0x80
    9863	2d 34 16 00 00 00 00 00	if r4 > r3 goto +0x16 <LBB243_3>
    9864	b7 04 00 00 00 08 00 00	r4 = 0x800
    9865	2d 34 17 00 00 00 00 00	if r4 > r3 goto +0x17 <LBB243_4>
    9866	bf 23 00 00 00 00 00 00	r3 = r2
    9867	67 03 00 00 20 00 00 00	r3 <<= 0x20
    9868	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9869	b7 04 00 00 00 00 01 00	r4 = 0x10000
    9870	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB243_5>
    9871	05 00 1a 00 00 00 00 00	goto +0x1a <LBB243_6>

0000000000013480 <LBB243_5>
    9872	bf 23 00 00 00 00 00 00	r3 = r2
    9873	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9874	47 03 00 00 80 00 00 00	r3 |= 0x80
    9875	73 3a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r3
    9876	bf 23 00 00 00 00 00 00	r3 = r2
    9877	77 03 00 00 0c 00 00 00	r3 >>= 0xc
    9878	47 03 00 00 e0 00 00 00	r3 |= 0xe0
    9879	73 3a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r3
    9880	77 02 00 00 06 00 00 00	r2 >>= 0x6
    9881	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    9882	47 02 00 00 80 00 00 00	r2 |= 0x80
    9883	73 2a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r2
    9884	b7 03 00 00 03 00 00 00	r3 = 0x3
    9885	05 00 1f 00 00 00 00 00	goto +0x1f <LBB243_7>

00000000000134f0 <LBB243_3>
    9886	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9887	b7 03 00 00 01 00 00 00	r3 = 0x1
    9888	05 00 1c 00 00 00 00 00	goto +0x1c <LBB243_7>

0000000000013508 <LBB243_4>
    9889	bf 23 00 00 00 00 00 00	r3 = r2
    9890	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9891	47 03 00 00 80 00 00 00	r3 |= 0x80
    9892	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    9893	77 02 00 00 06 00 00 00	r2 >>= 0x6
    9894	47 02 00 00 c0 00 00 00	r2 |= 0xc0
    9895	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9896	b7 03 00 00 02 00 00 00	r3 = 0x2
    9897	05 00 13 00 00 00 00 00	goto +0x13 <LBB243_7>

0000000000013550 <LBB243_6>
    9898	bf 23 00 00 00 00 00 00	r3 = r2
    9899	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9900	47 03 00 00 80 00 00 00	r3 |= 0x80
    9901	73 3a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r3
    9902	bf 23 00 00 00 00 00 00	r3 = r2
    9903	77 03 00 00 06 00 00 00	r3 >>= 0x6
    9904	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9905	47 03 00 00 80 00 00 00	r3 |= 0x80
    9906	73 3a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r3
    9907	bf 23 00 00 00 00 00 00	r3 = r2
    9908	77 03 00 00 0c 00 00 00	r3 >>= 0xc
    9909	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    9910	47 03 00 00 80 00 00 00	r3 |= 0x80
    9911	73 3a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r3
    9912	77 02 00 00 12 00 00 00	r2 >>= 0x12
    9913	57 02 00 00 07 00 00 00	r2 &= 0x7
    9914	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    9915	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    9916	b7 03 00 00 04 00 00 00	r3 = 0x4

00000000000135e8 <LBB243_7>
    9917	bf a2 00 00 00 00 00 00	r2 = r10
    9918	07 02 00 00 fc ff ff ff	r2 += -0x4
    9919	85 10 00 00 9f fd ff ff	call -0x261 ; <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
    9920	95 00 00 00 00 00 00 00	exit

0000000000013608 <<&mut W as core::fmt::Write>::write_fmt>
    9921	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    9922	bf a6 00 00 00 00 00 00	r6 = r10
    9923	07 06 00 00 d0 ff ff ff	r6 += -0x30
    9924	bf 61 00 00 00 00 00 00	r1 = r6
    9925	b7 03 00 00 30 00 00 00	r3 = 0x30
    9926	85 10 00 00 91 09 00 00	call 0x991 ; <memcpy>
    9927	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    9928	bf a1 00 00 00 00 00 00	r1 = r10
    9929	07 01 00 00 c8 ff ff ff	r1 += -0x38
    9930	18 02 00 00 80 a3 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a380 ll
    9932	bf 63 00 00 00 00 00 00	r3 = r6
    9933	85 10 00 00 0b 00 00 00	call 0xb ; <core::fmt::write>
    9934	95 00 00 00 00 00 00 00	exit

0000000000013678 <core::fmt::Formatter::new>
    9935	b7 04 00 00 03 00 00 00	r4 = 0x3
    9936	73 41 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r4
    9937	b7 04 00 00 20 00 00 00	r4 = 0x20
    9938	7b 41 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r4
    9939	7b 31 28 00 00 00 00 00	*(u64 *)(r1 + 0x28) = r3
    9940	7b 21 20 00 00 00 00 00	*(u64 *)(r1 + 0x20) = r2
    9941	b7 02 00 00 00 00 00 00	r2 = 0x0
    9942	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    9943	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    9944	95 00 00 00 00 00 00 00	exit

00000000000136c8 <core::fmt::write>
    9945	b7 04 00 00 03 00 00 00	r4 = 0x3
    9946	73 4a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r4
    9947	b7 04 00 00 20 00 00 00	r4 = 0x20
    9948	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    9949	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    9950	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    9951	b7 07 00 00 00 00 00 00	r7 = 0x0
    9952	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    9953	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
    9954	79 38 20 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x20)
    9955	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    9956	55 08 1c 00 00 00 00 00	if r8 != 0x0 goto +0x1c <LBB256_4>
    9957	79 36 18 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x18)
    9958	15 06 68 00 00 00 00 00	if r6 == 0x0 goto +0x68 <LBB256_7>
    9959	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    9960	79 18 10 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x10)
    9961	07 08 00 00 08 00 00 00	r8 += 0x8
    9962	67 06 00 00 04 00 00 00	r6 <<= 0x4
    9963	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    9964	07 09 00 00 08 00 00 00	r9 += 0x8

0000000000013768 <LBB256_3>
    9965	79 93 00 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x0)
    9966	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB256_8>
    9967	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    9968	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    9969	79 92 f8 ff 00 00 00 00	r2 = *(u64 *)(r9 - 0x8)
    9970	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    9971	8d 00 00 00 04 00 00 00	callx r4
    9972	55 00 6b 00 00 00 00 00	if r0 != 0x0 goto +0x6b <LBB256_11>

00000000000137a8 <LBB256_8>
    9973	79 81 f8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x8)
    9974	79 83 00 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x0)
    9975	bf a2 00 00 00 00 00 00	r2 = r10
    9976	07 02 00 00 c0 ff ff ff	r2 += -0x40
    9977	8d 00 00 00 03 00 00 00	callx r3
    9978	55 00 65 00 00 00 00 00	if r0 != 0x0 goto +0x65 <LBB256_11>
    9979	07 07 00 00 01 00 00 00	r7 += 0x1
    9980	07 08 00 00 10 00 00 00	r8 += 0x10
    9981	07 09 00 00 10 00 00 00	r9 += 0x10
    9982	07 06 00 00 f0 ff ff ff	r6 += -0x10
    9983	15 06 4f 00 00 00 00 00	if r6 == 0x0 goto +0x4f <LBB256_7>
    9984	05 00 ec ff 00 00 00 00	goto -0x14 <LBB256_3>

0000000000013808 <LBB256_4>
    9985	79 39 28 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x28)
    9986	15 09 4c 00 00 00 00 00	if r9 == 0x0 goto +0x4c <LBB256_7>
    9987	07 08 00 00 18 00 00 00	r8 += 0x18
    9988	27 09 00 00 38 00 00 00	r9 *= 0x38
    9989	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    9990	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    9991	07 06 00 00 08 00 00 00	r6 += 0x8

0000000000013840 <LBB256_6>
    9992	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    9993	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB256_15>
    9994	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    9995	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    9996	79 62 f8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x8)
    9997	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    9998	8d 00 00 00 04 00 00 00	callx r4
    9999	55 00 50 00 00 00 00 00	if r0 != 0x0 goto +0x50 <LBB256_11>

0000000000013880 <LBB256_15>
   10000	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
   10001	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
   10002	61 81 10 00 00 00 00 00	r1 = *(u32 *)(r8 + 0x10)
   10003	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
   10004	71 81 18 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x18)
   10005	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
   10006	61 81 14 00 00 00 00 00	r1 = *(u32 *)(r8 + 0x14)
   10007	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
   10008	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
   10009	79 84 f8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x8)
   10010	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB256_18>
   10011	b7 03 00 00 00 00 00 00	r3 = 0x0
   10012	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB256_19>
   10013	05 00 0c 00 00 00 00 00	goto +0xc <LBB256_21>

00000000000138f0 <LBB256_18>
   10014	b7 03 00 00 01 00 00 00	r3 = 0x1
   10015	05 00 0a 00 00 00 00 00	goto +0xa <LBB256_21>

0000000000013900 <LBB256_19>
   10016	67 01 00 00 04 00 00 00	r1 <<= 0x4
   10017	bf 24 00 00 00 00 00 00	r4 = r2
   10018	0f 14 00 00 00 00 00 00	r4 += r1
   10019	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
   10020	18 00 00 00 58 14 01 00 00 00 00 00 00 00 00 00	r0 = 0x11458 ll
   10022	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB256_21>
   10023	b7 03 00 00 01 00 00 00	r3 = 0x1
   10024	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
   10025	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

0000000000013950 <LBB256_21>
   10026	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   10027	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
   10028	79 81 f0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x10)
   10029	79 84 e8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x18)
   10030	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB256_24>
   10031	b7 03 00 00 00 00 00 00	r3 = 0x0
   10032	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB256_25>
   10033	05 00 0c 00 00 00 00 00	goto +0xc <LBB256_27>

0000000000013990 <LBB256_24>
   10034	b7 03 00 00 01 00 00 00	r3 = 0x1
   10035	05 00 0a 00 00 00 00 00	goto +0xa <LBB256_27>

00000000000139a0 <LBB256_25>
   10036	67 01 00 00 04 00 00 00	r1 <<= 0x4
   10037	bf 24 00 00 00 00 00 00	r4 = r2
   10038	0f 14 00 00 00 00 00 00	r4 += r1
   10039	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
   10040	18 00 00 00 58 14 01 00 00 00 00 00 00 00 00 00	r0 = 0x11458 ll
   10042	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB256_27>
   10043	b7 03 00 00 01 00 00 00	r3 = 0x1
   10044	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
   10045	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

00000000000139f0 <LBB256_27>
   10046	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
   10047	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
   10048	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
   10049	67 01 00 00 04 00 00 00	r1 <<= 0x4
   10050	0f 12 00 00 00 00 00 00	r2 += r1
   10051	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
   10052	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
   10053	bf a2 00 00 00 00 00 00	r2 = r10
   10054	07 02 00 00 c0 ff ff ff	r2 += -0x40
   10055	8d 00 00 00 03 00 00 00	callx r3
   10056	55 00 17 00 00 00 00 00	if r0 != 0x0 goto +0x17 <LBB256_11>
   10057	07 07 00 00 01 00 00 00	r7 += 0x1
   10058	07 08 00 00 38 00 00 00	r8 += 0x38
   10059	07 06 00 00 10 00 00 00	r6 += 0x10
   10060	07 09 00 00 c8 ff ff ff	r9 += -0x38
   10061	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB256_7>
   10062	05 00 b9 ff 00 00 00 00	goto -0x47 <LBB256_6>

0000000000013a78 <LBB256_7>
   10063	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
   10064	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
   10065	2d 71 01 00 00 00 00 00	if r1 > r7 goto +0x1 <LBB256_12>
   10066	05 00 0b 00 00 00 00 00	goto +0xb <LBB256_13>

0000000000013a98 <LBB256_12>
   10067	67 07 00 00 04 00 00 00	r7 <<= 0x4
   10068	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
   10069	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
   10070	0f 71 00 00 00 00 00 00	r1 += r7
   10071	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
   10072	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
   10073	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
   10074	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   10075	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
   10076	8d 00 00 00 04 00 00 00	callx r4
   10077	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB256_11>

0000000000013af0 <LBB256_13>
   10078	b7 00 00 00 00 00 00 00	r0 = 0x0
   10079	05 00 01 00 00 00 00 00	goto +0x1 <LBB256_14>

0000000000013b00 <LBB256_11>
   10080	b7 00 00 00 01 00 00 00	r0 = 0x1

0000000000013b08 <LBB256_14>
   10081	95 00 00 00 00 00 00 00	exit

0000000000013b10 <core::fmt::Formatter::pad_integral>
   10082	bf 48 00 00 00 00 00 00	r8 = r4
   10083	bf 10 00 00 00 00 00 00	r0 = r1
   10084	79 59 08 f0 00 00 00 00	r9 = *(u64 *)(r5 - 0xff8)
   10085	15 02 0a 00 00 00 00 00	if r2 == 0x0 goto +0xa <LBB257_2>
   10086	b7 01 00 00 00 00 11 00	r1 = 0x110000
   10087	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10088	61 07 34 00 00 00 00 00	r7 = *(u32 *)(r0 + 0x34)
   10089	bf 71 00 00 00 00 00 00	r1 = r7
   10090	57 01 00 00 01 00 00 00	r1 &= 0x1
   10091	bf 96 00 00 00 00 00 00	r6 = r9
   10092	15 01 08 00 00 00 00 00	if r1 == 0x0 goto +0x8 <LBB257_5>
   10093	b7 01 00 00 2b 00 00 00	r1 = 0x2b
   10094	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10095	05 00 03 00 00 00 00 00	goto +0x3 <LBB257_4>

0000000000013b80 <LBB257_2>
   10096	b7 01 00 00 2d 00 00 00	r1 = 0x2d
   10097	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10098	61 07 34 00 00 00 00 00	r7 = *(u32 *)(r0 + 0x34)

0000000000013b98 <LBB257_4>
   10099	bf 96 00 00 00 00 00 00	r6 = r9
   10100	07 06 00 00 01 00 00 00	r6 += 0x1

0000000000013ba8 <LBB257_5>
   10101	79 51 00 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0x1000)
   10102	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   10103	b7 04 00 00 00 00 00 00	r4 = 0x0
   10104	bf 71 00 00 00 00 00 00	r1 = r7
   10105	57 01 00 00 04 00 00 00	r1 &= 0x4
   10106	bf 85 00 00 00 00 00 00	r5 = r8
   10107	15 01 21 00 00 00 00 00	if r1 == 0x0 goto +0x21 <LBB257_14>
   10108	b7 01 00 00 20 00 00 00	r1 = 0x20
   10109	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r0
   10110	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
   10111	2d 51 05 00 00 00 00 00	if r1 > r5 goto +0x5 <LBB257_8>
   10112	bf 31 00 00 00 00 00 00	r1 = r3
   10113	bf 58 00 00 00 00 00 00	r8 = r5
   10114	bf 52 00 00 00 00 00 00	r2 = r5
   10115	85 10 00 00 54 04 00 00	call 0x454 ; <core::str::count::do_count_chars>
   10116	05 00 0b 00 00 00 00 00	goto +0xb <LBB257_13>

0000000000013c28 <LBB257_8>
   10117	bf 51 00 00 00 00 00 00	r1 = r5
   10118	b7 00 00 00 00 00 00 00	r0 = 0x0
   10119	bf 18 00 00 00 00 00 00	r8 = r1
   10120	15 01 07 00 00 00 00 00	if r1 == 0x0 goto +0x7 <LBB257_13>
   10121	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10122	bf 82 00 00 00 00 00 00	r2 = r8
   10123	05 00 0a 00 00 00 00 00	goto +0xa <LBB257_10>

0000000000013c60 <LBB257_12>
   10124	0f 30 00 00 00 00 00 00	r0 += r3
   10125	07 01 00 00 01 00 00 00	r1 += 0x1
   10126	07 02 00 00 ff ff ff ff	r2 += -0x1
   10127	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB257_10>

0000000000013c80 <LBB257_13>
   10128	0f 60 00 00 00 00 00 00	r0 += r6
   10129	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
   10130	bf 06 00 00 00 00 00 00	r6 = r0
   10131	bf 85 00 00 00 00 00 00	r5 = r8
   10132	79 a0 d8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x28)
   10133	05 00 07 00 00 00 00 00	goto +0x7 <LBB257_14>

0000000000013cb0 <LBB257_10>
   10134	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
   10135	67 04 00 00 38 00 00 00	r4 <<= 0x38
   10136	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
   10137	b7 03 00 00 01 00 00 00	r3 = 0x1
   10138	65 04 f1 ff bf ff ff ff	if r4 s> -0x41 goto -0xf <LBB257_12>
   10139	b7 03 00 00 00 00 00 00	r3 = 0x0
   10140	05 00 ef ff 00 00 00 00	goto -0x11 <LBB257_12>

0000000000013ce8 <LBB257_14>
   10141	7b 9a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r9
   10142	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0x0)
   10143	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB257_16>
   10144	79 08 28 00 00 00 00 00	r8 = *(u64 *)(r0 + 0x28)
   10145	79 06 20 00 00 00 00 00	r6 = *(u64 *)(r0 + 0x20)
   10146	bf 61 00 00 00 00 00 00	r1 = r6
   10147	bf 82 00 00 00 00 00 00	r2 = r8
   10148	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
   10149	85 10 00 00 81 00 00 00	call 0x81 ; <core::fmt::Formatter::pad_integral::write_prefix>
   10150	b7 07 00 00 01 00 00 00	r7 = 0x1
   10151	55 00 20 00 00 00 00 00	if r0 != 0x0 goto +0x20 <LBB257_44>
   10152	05 00 19 00 00 00 00 00	goto +0x19 <LBB257_43>

0000000000013d48 <LBB257_16>
   10153	79 09 08 00 00 00 00 00	r9 = *(u64 *)(r0 + 0x8)
   10154	2d 69 01 00 00 00 00 00	if r9 > r6 goto +0x1 <LBB257_17>
   10155	05 00 0e 00 00 00 00 00	goto +0xe <LBB257_18>

0000000000013d60 <LBB257_17>
   10156	57 07 00 00 08 00 00 00	r7 &= 0x8
   10157	15 07 01 00 00 00 00 00	if r7 == 0x0 goto +0x1 <LBB257_19>
   10158	05 00 1c 00 00 00 00 00	goto +0x1c <LBB257_29>

0000000000013d78 <LBB257_19>
   10159	1f 69 00 00 00 00 00 00	r9 -= r6
   10160	71 08 38 00 00 00 00 00	r8 = *(u8 *)(r0 + 0x38)
   10161	7b 5a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r5
   10162	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
   10163	65 08 31 00 01 00 00 00	if r8 s> 0x1 goto +0x31 <LBB257_22>
   10164	7b 9a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r9
   10165	15 08 43 00 00 00 00 00	if r8 == 0x0 goto +0x43 <LBB257_25>

0000000000013db0 <LBB257_21>
   10166	b7 01 00 00 00 00 00 00	r1 = 0x0
   10167	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   10168	bf 98 00 00 00 00 00 00	r8 = r9
   10169	05 00 3f 00 00 00 00 00	goto +0x3f <LBB257_25>

0000000000013dd0 <LBB257_18>
   10170	79 08 28 00 00 00 00 00	r8 = *(u64 *)(r0 + 0x28)
   10171	79 06 20 00 00 00 00 00	r6 = *(u64 *)(r0 + 0x20)
   10172	bf 61 00 00 00 00 00 00	r1 = r6
   10173	bf 82 00 00 00 00 00 00	r2 = r8
   10174	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
   10175	85 10 00 00 67 00 00 00	call 0x67 ; <core::fmt::Formatter::pad_integral::write_prefix>
   10176	b7 07 00 00 01 00 00 00	r7 = 0x1
   10177	55 00 06 00 00 00 00 00	if r0 != 0x0 goto +0x6 <LBB257_44>

0000000000013e10 <LBB257_43>
   10178	79 84 18 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x18)
   10179	bf 61 00 00 00 00 00 00	r1 = r6
   10180	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
   10181	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
   10182	8d 00 00 00 04 00 00 00	callx r4
   10183	bf 07 00 00 00 00 00 00	r7 = r0

0000000000013e40 <LBB257_44>
   10184	57 07 00 00 01 00 00 00	r7 &= 0x1
   10185	bf 70 00 00 00 00 00 00	r0 = r7
   10186	95 00 00 00 00 00 00 00	exit

0000000000013e58 <LBB257_29>
   10187	61 01 30 00 00 00 00 00	r1 = *(u32 *)(r0 + 0x30)
   10188	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   10189	b7 01 00 00 30 00 00 00	r1 = 0x30
   10190	63 10 30 00 00 00 00 00	*(u32 *)(r0 + 0x30) = r1
   10191	71 01 38 00 00 00 00 00	r1 = *(u8 *)(r0 + 0x38)
   10192	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   10193	b7 07 00 00 01 00 00 00	r7 = 0x1
   10194	73 70 38 00 00 00 00 00	*(u8 *)(r0 + 0x38) = r7
   10195	79 01 20 00 00 00 00 00	r1 = *(u64 *)(r0 + 0x20)
   10196	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r0
   10197	79 02 28 00 00 00 00 00	r2 = *(u64 *)(r0 + 0x28)
   10198	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10199	bf 28 00 00 00 00 00 00	r8 = r2
   10200	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
   10201	85 10 00 00 4d 00 00 00	call 0x4d ; <core::fmt::Formatter::pad_integral::write_prefix>
   10202	55 00 ed ff 00 00 00 00	if r0 != 0x0 goto -0x13 <LBB257_44>
   10203	1f 69 00 00 00 00 00 00	r9 -= r6
   10204	07 09 00 00 01 00 00 00	r9 += 0x1

0000000000013ee8 <LBB257_39>
   10205	07 09 00 00 ff ff ff ff	r9 += -0x1
   10206	15 09 08 00 00 00 00 00	if r9 == 0x0 goto +0x8 <LBB257_41>
   10207	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
   10208	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10209	b7 02 00 00 30 00 00 00	r2 = 0x30
   10210	8d 00 00 00 03 00 00 00	callx r3
   10211	55 00 e4 ff 00 00 00 00	if r0 != 0x0 goto -0x1c <LBB257_44>
   10212	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB257_39>

0000000000013f28 <LBB257_22>
   10213	15 08 0e 00 02 00 00 00	if r8 == 0x2 goto +0xe <LBB257_24>
   10214	05 00 cf ff 00 00 00 00	goto -0x31 <LBB257_21>

0000000000013f38 <LBB257_41>
   10215	79 84 18 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x18)
   10216	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10217	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
   10218	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
   10219	8d 00 00 00 04 00 00 00	callx r4
   10220	55 00 db ff 00 00 00 00	if r0 != 0x0 goto -0x25 <LBB257_44>
   10221	79 a8 d8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x28)
   10222	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
   10223	73 18 38 00 00 00 00 00	*(u8 *)(r8 + 0x38) = r1
   10224	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
   10225	63 18 30 00 00 00 00 00	*(u32 *)(r8 + 0x30) = r1
   10226	b7 07 00 00 00 00 00 00	r7 = 0x0
   10227	05 00 d4 ff 00 00 00 00	goto -0x2c <LBB257_44>

0000000000013fa0 <LBB257_24>
   10228	bf 98 00 00 00 00 00 00	r8 = r9
   10229	77 08 00 00 01 00 00 00	r8 >>= 0x1
   10230	07 09 00 00 01 00 00 00	r9 += 0x1
   10231	77 09 00 00 01 00 00 00	r9 >>= 0x1
   10232	7b 9a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r9

0000000000013fc8 <LBB257_25>
   10233	07 08 00 00 01 00 00 00	r8 += 0x1
   10234	61 01 30 00 00 00 00 00	r1 = *(u32 *)(r0 + 0x30)
   10235	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10236	79 06 28 00 00 00 00 00	r6 = *(u64 *)(r0 + 0x28)
   10237	79 09 20 00 00 00 00 00	r9 = *(u64 *)(r0 + 0x20)
   10238	b7 07 00 00 01 00 00 00	r7 = 0x1

0000000000013ff8 <LBB257_26>
   10239	07 08 00 00 ff ff ff ff	r8 += -0x1
   10240	15 08 06 00 00 00 00 00	if r8 == 0x0 goto +0x6 <LBB257_28>
   10241	79 63 20 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x20)
   10242	bf 91 00 00 00 00 00 00	r1 = r9
   10243	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
   10244	8d 00 00 00 03 00 00 00	callx r3
   10245	55 00 c2 ff 00 00 00 00	if r0 != 0x0 goto -0x3e <LBB257_44>
   10246	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB257_26>

0000000000014038 <LBB257_28>
   10247	b7 07 00 00 01 00 00 00	r7 = 0x1
   10248	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10249	15 01 be ff 00 00 11 00	if r1 == 0x110000 goto -0x42 <LBB257_44>
   10250	bf 91 00 00 00 00 00 00	r1 = r9
   10251	bf 62 00 00 00 00 00 00	r2 = r6
   10252	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
   10253	79 a4 c0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x40)
   10254	79 a5 c8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x38)
   10255	85 10 00 00 17 00 00 00	call 0x17 ; <core::fmt::Formatter::pad_integral::write_prefix>
   10256	55 00 b7 ff 00 00 00 00	if r0 != 0x0 goto -0x49 <LBB257_44>
   10257	79 64 18 00 00 00 00 00	r4 = *(u64 *)(r6 + 0x18)
   10258	bf 91 00 00 00 00 00 00	r1 = r9
   10259	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
   10260	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
   10261	8d 00 00 00 04 00 00 00	callx r4
   10262	55 00 b1 ff 00 00 00 00	if r0 != 0x0 goto -0x4f <LBB257_44>
   10263	b7 07 00 00 00 00 00 00	r7 = 0x0
   10264	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)

00000000000140c8 <LBB257_33>
   10265	bf 81 00 00 00 00 00 00	r1 = r8
   10266	1d 78 08 00 00 00 00 00	if r8 == r7 goto +0x8 <LBB257_36>
   10267	79 63 20 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x20)
   10268	bf 91 00 00 00 00 00 00	r1 = r9
   10269	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
   10270	8d 00 00 00 03 00 00 00	callx r3
   10271	07 07 00 00 01 00 00 00	r7 += 0x1
   10272	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB257_33>
   10273	07 07 00 00 ff ff ff ff	r7 += -0x1
   10274	bf 71 00 00 00 00 00 00	r1 = r7

0000000000014118 <LBB257_36>
   10275	b7 07 00 00 01 00 00 00	r7 = 0x1
   10276	2d 18 a3 ff 00 00 00 00	if r8 > r1 goto -0x5d <LBB257_44>
   10277	b7 07 00 00 00 00 00 00	r7 = 0x0
   10278	05 00 a1 ff 00 00 00 00	goto -0x5f <LBB257_44>

0000000000014138 <core::fmt::Formatter::pad_integral::write_prefix>
   10279	bf 56 00 00 00 00 00 00	r6 = r5
   10280	bf 47 00 00 00 00 00 00	r7 = r4
   10281	bf 29 00 00 00 00 00 00	r9 = r2
   10282	bf 18 00 00 00 00 00 00	r8 = r1
   10283	bf 31 00 00 00 00 00 00	r1 = r3
   10284	67 01 00 00 20 00 00 00	r1 <<= 0x20
   10285	77 01 00 00 20 00 00 00	r1 >>= 0x20
   10286	15 01 07 00 00 00 11 00	if r1 == 0x110000 goto +0x7 <LBB258_2>
   10287	79 94 20 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x20)
   10288	bf 81 00 00 00 00 00 00	r1 = r8
   10289	bf 32 00 00 00 00 00 00	r2 = r3
   10290	8d 00 00 00 04 00 00 00	callx r4
   10291	bf 01 00 00 00 00 00 00	r1 = r0
   10292	b7 00 00 00 01 00 00 00	r0 = 0x1
   10293	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB258_3>

00000000000141b0 <LBB258_2>
   10294	b7 00 00 00 00 00 00 00	r0 = 0x0
   10295	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB258_4>

00000000000141c0 <LBB258_3>
   10296	95 00 00 00 00 00 00 00	exit

00000000000141c8 <LBB258_4>
   10297	79 94 18 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x18)
   10298	bf 81 00 00 00 00 00 00	r1 = r8
   10299	bf 72 00 00 00 00 00 00	r2 = r7
   10300	bf 63 00 00 00 00 00 00	r3 = r6
   10301	8d 00 00 00 04 00 00 00	callx r4
   10302	05 00 f9 ff 00 00 00 00	goto -0x7 <LBB258_3>

00000000000141f8 <core::fmt::Formatter::pad>
   10303	bf 18 00 00 00 00 00 00	r8 = r1
   10304	79 85 10 00 00 00 00 00	r5 = *(u64 *)(r8 + 0x10)
   10305	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
   10306	bf 14 00 00 00 00 00 00	r4 = r1
   10307	4f 54 00 00 00 00 00 00	r4 |= r5
   10308	15 04 33 00 00 00 00 00	if r4 == 0x0 goto +0x33 <LBB259_2>
   10309	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
   10310	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
   10311	15 05 43 00 00 00 00 00	if r5 == 0x0 goto +0x43 <LBB259_25>
   10312	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
   10313	bf 73 00 00 00 00 00 00	r3 = r7
   10314	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
   10315	0f 23 00 00 00 00 00 00	r3 += r2
   10316	b7 02 00 00 00 00 00 00	r2 = 0x0
   10317	79 84 18 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x18)
   10318	15 04 1a 00 00 00 00 00	if r4 == 0x0 goto +0x1a <LBB259_12>
   10319	b7 06 00 00 00 00 00 00	r6 = 0x0
   10320	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)

0000000000014288 <LBB259_6>
   10321	bf 79 00 00 00 00 00 00	r9 = r7
   10322	1d 39 38 00 00 00 00 00	if r9 == r3 goto +0x38 <LBB259_25>
   10323	bf 97 00 00 00 00 00 00	r7 = r9
   10324	07 07 00 00 01 00 00 00	r7 += 0x1
   10325	71 95 00 00 00 00 00 00	r5 = *(u8 *)(r9 + 0x0)
   10326	bf 50 00 00 00 00 00 00	r0 = r5
   10327	67 00 00 00 38 00 00 00	r0 <<= 0x38
   10328	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
   10329	65 00 0b 00 ff ff ff ff	if r0 s> -0x1 goto +0xb <LBB259_11>
   10330	bf 97 00 00 00 00 00 00	r7 = r9
   10331	07 07 00 00 02 00 00 00	r7 += 0x2
   10332	bf 50 00 00 00 00 00 00	r0 = r5
   10333	b7 05 00 00 e0 00 00 00	r5 = 0xe0
   10334	2d 05 06 00 00 00 00 00	if r5 > r0 goto +0x6 <LBB259_11>
   10335	bf 97 00 00 00 00 00 00	r7 = r9
   10336	07 07 00 00 03 00 00 00	r7 += 0x3
   10337	b7 05 00 00 f0 00 00 00	r5 = 0xf0
   10338	2d 05 02 00 00 00 00 00	if r5 > r0 goto +0x2 <LBB259_11>
   10339	bf 97 00 00 00 00 00 00	r7 = r9
   10340	07 07 00 00 04 00 00 00	r7 += 0x4

0000000000014328 <LBB259_11>
   10341	07 06 00 00 01 00 00 00	r6 += 0x1
   10342	1f 92 00 00 00 00 00 00	r2 -= r9
   10343	0f 72 00 00 00 00 00 00	r2 += r7
   10344	2d 64 e8 ff 00 00 00 00	if r4 > r6 goto -0x18 <LBB259_6>

0000000000014348 <LBB259_12>
   10345	1d 37 21 00 00 00 00 00	if r7 == r3 goto +0x21 <LBB259_25>
   10346	71 73 00 00 00 00 00 00	r3 = *(u8 *)(r7 + 0x0)
   10347	bf 34 00 00 00 00 00 00	r4 = r3
   10348	67 04 00 00 38 00 00 00	r4 <<= 0x38
   10349	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
   10350	65 04 02 00 ff ff ff ff	if r4 s> -0x1 goto +0x2 <LBB259_15>
   10351	b7 04 00 00 e0 00 00 00	r4 = 0xe0
   10352	2d 34 00 00 00 00 00 00	if r4 > r3 goto +0x0 <LBB259_15>

0000000000014388 <LBB259_15>
   10353	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
   10354	79 a6 f0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x10)
   10355	15 02 10 00 00 00 00 00	if r2 == 0x0 goto +0x10 <LBB259_19>
   10356	2d 20 07 00 00 00 00 00	if r0 > r2 goto +0x7 <LBB259_18>
   10357	b7 03 00 00 00 00 00 00	r3 = 0x0
   10358	1d 02 0d 00 00 00 00 00	if r2 == r0 goto +0xd <LBB259_19>
   10359	05 00 0d 00 00 00 00 00	goto +0xd <LBB259_20>

00000000000143c0 <LBB259_2>
   10360	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
   10361	79 84 28 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x28)
   10362	79 44 18 00 00 00 00 00	r4 = *(u64 *)(r4 + 0x18)
   10363	05 00 3f 00 00 00 00 00	goto +0x3f <LBB259_3>

00000000000143e0 <LBB259_18>
   10364	bf 64 00 00 00 00 00 00	r4 = r6
   10365	0f 24 00 00 00 00 00 00	r4 += r2
   10366	b7 03 00 00 00 00 00 00	r3 = 0x0
   10367	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
   10368	67 04 00 00 38 00 00 00	r4 <<= 0x38
   10369	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
   10370	b7 05 00 00 c0 ff ff ff	r5 = -0x40
   10371	6d 45 01 00 00 00 00 00	if r5 s> r4 goto +0x1 <LBB259_20>

0000000000014420 <LBB259_19>
   10372	bf 63 00 00 00 00 00 00	r3 = r6

0000000000014428 <LBB259_20>
   10373	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB259_22>
   10374	bf 20 00 00 00 00 00 00	r0 = r2

0000000000014438 <LBB259_22>
   10375	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
   10376	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB259_24>
   10377	bf 36 00 00 00 00 00 00	r6 = r3

0000000000014450 <LBB259_24>
   10378	7b 6a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r6

0000000000014458 <LBB259_25>
   10379	55 01 06 00 00 00 00 00	if r1 != 0x0 goto +0x6 <LBB259_27>
   10380	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
   10381	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
   10382	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
   10383	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
   10384	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
   10385	05 00 29 00 00 00 00 00	goto +0x29 <LBB259_3>

0000000000014490 <LBB259_27>
   10386	79 87 08 00 00 00 00 00	r7 = *(u64 *)(r8 + 0x8)
   10387	b7 01 00 00 20 00 00 00	r1 = 0x20
   10388	79 a6 e8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x18)
   10389	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
   10390	2d 61 04 00 00 00 00 00	if r1 > r6 goto +0x4 <LBB259_29>
   10391	bf 91 00 00 00 00 00 00	r1 = r9
   10392	bf 62 00 00 00 00 00 00	r2 = r6
   10393	85 10 00 00 3e 03 00 00	call 0x33e ; <core::str::count::do_count_chars>
   10394	05 00 09 00 00 00 00 00	goto +0x9 <LBB259_34>

00000000000144d8 <LBB259_29>
   10395	b7 00 00 00 00 00 00 00	r0 = 0x0
   10396	15 06 07 00 00 00 00 00	if r6 == 0x0 goto +0x7 <LBB259_34>
   10397	bf 91 00 00 00 00 00 00	r1 = r9
   10398	bf 62 00 00 00 00 00 00	r2 = r6
   10399	05 00 0f 00 00 00 00 00	goto +0xf <LBB259_31>

0000000000014500 <LBB259_33>
   10400	0f 30 00 00 00 00 00 00	r0 += r3
   10401	07 01 00 00 01 00 00 00	r1 += 0x1
   10402	07 02 00 00 ff ff ff ff	r2 += -0x1
   10403	55 02 0b 00 00 00 00 00	if r2 != 0x0 goto +0xb <LBB259_31>

0000000000014520 <LBB259_34>
   10404	3d 70 11 00 00 00 00 00	if r0 >= r7 goto +0x11 <LBB259_46>
   10405	1f 07 00 00 00 00 00 00	r7 -= r0
   10406	b7 06 00 00 00 00 00 00	r6 = 0x0
   10407	71 81 38 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x38)
   10408	65 01 17 00 01 00 00 00	if r1 s> 0x1 goto +0x17 <LBB259_38>
   10409	7b 7a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r7
   10410	15 01 1c 00 00 00 00 00	if r1 == 0x0 goto +0x1c <LBB259_42>
   10411	b7 01 00 00 00 00 00 00	r1 = 0x0
   10412	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   10413	bf 76 00 00 00 00 00 00	r6 = r7
   10414	05 00 18 00 00 00 00 00	goto +0x18 <LBB259_42>

0000000000014578 <LBB259_31>
   10415	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
   10416	67 04 00 00 38 00 00 00	r4 <<= 0x38
   10417	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
   10418	b7 03 00 00 01 00 00 00	r3 = 0x1
   10419	65 04 ec ff bf ff ff ff	if r4 s> -0x41 goto -0x14 <LBB259_33>
   10420	b7 03 00 00 00 00 00 00	r3 = 0x0
   10421	05 00 ea ff 00 00 00 00	goto -0x16 <LBB259_33>

00000000000145b0 <LBB259_46>
   10422	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
   10423	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
   10424	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
   10425	bf 92 00 00 00 00 00 00	r2 = r9
   10426	bf 63 00 00 00 00 00 00	r3 = r6

00000000000145d8 <LBB259_3>
   10427	8d 00 00 00 04 00 00 00	callx r4
   10428	bf 07 00 00 00 00 00 00	r7 = r0

00000000000145e8 <LBB259_54>
   10429	57 07 00 00 01 00 00 00	r7 &= 0x1
   10430	bf 70 00 00 00 00 00 00	r0 = r7
   10431	95 00 00 00 00 00 00 00	exit

0000000000014600 <LBB259_38>
   10432	15 01 01 00 02 00 00 00	if r1 == 0x2 goto +0x1 <LBB259_40>
   10433	05 00 04 00 00 00 00 00	goto +0x4 <LBB259_41>

0000000000014610 <LBB259_40>
   10434	bf 76 00 00 00 00 00 00	r6 = r7
   10435	77 06 00 00 01 00 00 00	r6 >>= 0x1
   10436	07 07 00 00 01 00 00 00	r7 += 0x1
   10437	77 07 00 00 01 00 00 00	r7 >>= 0x1

0000000000014630 <LBB259_41>
   10438	7b 7a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r7

0000000000014638 <LBB259_42>
   10439	07 06 00 00 01 00 00 00	r6 += 0x1
   10440	61 89 30 00 00 00 00 00	r9 = *(u32 *)(r8 + 0x30)
   10441	79 81 28 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x28)
   10442	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10443	79 88 20 00 00 00 00 00	r8 = *(u64 *)(r8 + 0x20)
   10444	b7 07 00 00 01 00 00 00	r7 = 0x1

0000000000014668 <LBB259_43>
   10445	07 06 00 00 ff ff ff ff	r6 += -0x1
   10446	15 06 07 00 00 00 00 00	if r6 == 0x0 goto +0x7 <LBB259_45>
   10447	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10448	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
   10449	bf 81 00 00 00 00 00 00	r1 = r8
   10450	bf 92 00 00 00 00 00 00	r2 = r9
   10451	8d 00 00 00 03 00 00 00	callx r3
   10452	55 00 e8 ff 00 00 00 00	if r0 != 0x0 goto -0x18 <LBB259_54>
   10453	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB259_43>

00000000000146b0 <LBB259_45>
   10454	b7 07 00 00 01 00 00 00	r7 = 0x1
   10455	bf 91 00 00 00 00 00 00	r1 = r9
   10456	15 01 e4 ff 00 00 11 00	if r1 == 0x110000 goto -0x1c <LBB259_54>
   10457	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10458	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   10459	bf 81 00 00 00 00 00 00	r1 = r8
   10460	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
   10461	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
   10462	8d 00 00 00 04 00 00 00	callx r4
   10463	55 00 dd ff 00 00 00 00	if r0 != 0x0 goto -0x23 <LBB259_54>
   10464	b7 06 00 00 00 00 00 00	r6 = 0x0
   10465	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x20)

0000000000014710 <LBB259_49>
   10466	bf 71 00 00 00 00 00 00	r1 = r7
   10467	1d 67 09 00 00 00 00 00	if r7 == r6 goto +0x9 <LBB259_52>
   10468	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   10469	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
   10470	bf 81 00 00 00 00 00 00	r1 = r8
   10471	bf 92 00 00 00 00 00 00	r2 = r9
   10472	8d 00 00 00 03 00 00 00	callx r3
   10473	07 06 00 00 01 00 00 00	r6 += 0x1
   10474	15 00 f7 ff 00 00 00 00	if r0 == 0x0 goto -0x9 <LBB259_49>
   10475	07 06 00 00 ff ff ff ff	r6 += -0x1
   10476	bf 61 00 00 00 00 00 00	r1 = r6

0000000000014768 <LBB259_52>
   10477	bf 72 00 00 00 00 00 00	r2 = r7
   10478	b7 07 00 00 01 00 00 00	r7 = 0x1
   10479	2d 12 cd ff 00 00 00 00	if r2 > r1 goto -0x33 <LBB259_54>
   10480	b7 07 00 00 00 00 00 00	r7 = 0x0
   10481	05 00 cb ff 00 00 00 00	goto -0x35 <LBB259_54>

0000000000014790 <<core::fmt::Formatter as core::fmt::Write>::write_str>
   10482	79 14 20 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x20)
   10483	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
   10484	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
   10485	bf 41 00 00 00 00 00 00	r1 = r4
   10486	8d 00 00 00 05 00 00 00	callx r5
   10487	95 00 00 00 00 00 00 00	exit

00000000000147c0 <core::fmt::Formatter::debug_lower_hex>
   10488	61 10 34 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x34)
   10489	57 00 00 00 10 00 00 00	r0 &= 0x10
   10490	77 00 00 00 04 00 00 00	r0 >>= 0x4
   10491	95 00 00 00 00 00 00 00	exit

00000000000147e0 <core::fmt::Formatter::debug_upper_hex>
   10492	61 10 34 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x34)
   10493	57 00 00 00 20 00 00 00	r0 &= 0x20
   10494	77 00 00 00 05 00 00 00	r0 >>= 0x5
   10495	95 00 00 00 00 00 00 00	exit

0000000000014800 <core::fmt::Formatter::debug_struct>
   10496	bf 26 00 00 00 00 00 00	r6 = r2
   10497	bf 17 00 00 00 00 00 00	r7 = r1
   10498	79 61 28 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x28)
   10499	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
   10500	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
   10501	bf 32 00 00 00 00 00 00	r2 = r3
   10502	bf 43 00 00 00 00 00 00	r3 = r4
   10503	8d 00 00 00 05 00 00 00	callx r5
   10504	b7 01 00 00 00 00 00 00	r1 = 0x0
   10505	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 0x9) = r1
   10506	73 07 08 00 00 00 00 00	*(u8 *)(r7 + 0x8) = r0
   10507	7b 67 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r6
   10508	95 00 00 00 00 00 00 00	exit

0000000000014868 <core::fmt::Formatter::debug_struct_field2_finish>
   10509	bf 56 00 00 00 00 00 00	r6 = r5
   10510	bf 47 00 00 00 00 00 00	r7 = r4
   10511	bf 18 00 00 00 00 00 00	r8 = r1
   10512	79 81 28 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x28)
   10513	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   10514	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
   10515	8d 00 00 00 04 00 00 00	callx r4
   10516	b7 01 00 00 00 00 00 00	r1 = 0x0
   10517	73 1a f9 ff 00 00 00 00	*(u8 *)(r10 - 0x7) = r1
   10518	73 0a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r0
   10519	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
   10520	79 63 00 f0 00 00 00 00	r3 = *(u64 *)(r6 - 0x1000)
   10521	79 64 08 f0 00 00 00 00	r4 = *(u64 *)(r6 - 0xff8)
   10522	79 65 10 f0 00 00 00 00	r5 = *(u64 *)(r6 - 0xff0)
   10523	bf a8 00 00 00 00 00 00	r8 = r10
   10524	07 08 00 00 f0 ff ff ff	r8 += -0x10
   10525	bf 81 00 00 00 00 00 00	r1 = r8
   10526	bf 72 00 00 00 00 00 00	r2 = r7
   10527	85 10 00 00 e3 fb ff ff	call -0x41d ; <core::fmt::builders::DebugStruct::field>
   10528	79 62 18 f0 00 00 00 00	r2 = *(u64 *)(r6 - 0xfe8)
   10529	79 63 20 f0 00 00 00 00	r3 = *(u64 *)(r6 - 0xfe0)
   10530	79 64 28 f0 00 00 00 00	r4 = *(u64 *)(r6 - 0xfd8)
   10531	79 65 30 f0 00 00 00 00	r5 = *(u64 *)(r6 - 0xfd0)
   10532	bf 81 00 00 00 00 00 00	r1 = r8
   10533	85 10 00 00 dd fb ff ff	call -0x423 ; <core::fmt::builders::DebugStruct::field>
   10534	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x8)
   10535	71 a2 f9 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x7)
   10536	55 02 04 00 00 00 00 00	if r2 != 0x0 goto +0x4 <LBB277_3>
   10537	b7 00 00 00 01 00 00 00	r0 = 0x1
   10538	55 01 16 00 00 00 00 00	if r1 != 0x0 goto +0x16 <LBB277_8>
   10539	b7 00 00 00 00 00 00 00	r0 = 0x0
   10540	05 00 14 00 00 00 00 00	goto +0x14 <LBB277_8>

0000000000014968 <LBB277_3>
   10541	b7 00 00 00 01 00 00 00	r0 = 0x1
   10542	55 01 12 00 00 00 00 00	if r1 != 0x0 goto +0x12 <LBB277_8>
   10543	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
   10544	61 21 34 00 00 00 00 00	r1 = *(u32 *)(r2 + 0x34)
   10545	57 01 00 00 04 00 00 00	r1 &= 0x4
   10546	55 01 07 00 00 00 00 00	if r1 != 0x0 goto +0x7 <LBB277_6>
   10547	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
   10548	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
   10549	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
   10550	18 02 00 00 04 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19104 ll
   10552	b7 03 00 00 02 00 00 00	r3 = 0x2
   10553	05 00 06 00 00 00 00 00	goto +0x6 <LBB277_7>

00000000000149d0 <LBB277_6>
   10554	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
   10555	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
   10556	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
   10557	18 02 00 00 03 91 01 00 00 00 00 00 00 00 00 00	r2 = 0x19103 ll
   10559	b7 03 00 00 01 00 00 00	r3 = 0x1

0000000000014a00 <LBB277_7>
   10560	8d 00 00 00 04 00 00 00	callx r4

0000000000014a08 <LBB277_8>
   10561	57 00 00 00 01 00 00 00	r0 &= 0x1
   10562	95 00 00 00 00 00 00 00	exit

0000000000014a18 <core::fmt::Formatter::debug_tuple>
   10563	bf 47 00 00 00 00 00 00	r7 = r4
   10564	bf 28 00 00 00 00 00 00	r8 = r2
   10565	bf 16 00 00 00 00 00 00	r6 = r1
   10566	79 81 28 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x28)
   10567	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   10568	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
   10569	bf 32 00 00 00 00 00 00	r2 = r3
   10570	bf 73 00 00 00 00 00 00	r3 = r7
   10571	8d 00 00 00 04 00 00 00	callx r4
   10572	73 06 10 00 00 00 00 00	*(u8 *)(r6 + 0x10) = r0
   10573	7b 86 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r8
   10574	b7 01 00 00 00 00 00 00	r1 = 0x0
   10575	b7 02 00 00 01 00 00 00	r2 = 0x1
   10576	15 07 01 00 00 00 00 00	if r7 == 0x0 goto +0x1 <LBB282_2>
   10577	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000014a90 <LBB282_2>
   10578	73 26 11 00 00 00 00 00	*(u8 *)(r6 + 0x11) = r2
   10579	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
   10580	95 00 00 00 00 00 00 00	exit

0000000000014aa8 <<str as core::fmt::Debug>::fmt>
   10581	bf 29 00 00 00 00 00 00	r9 = r2
   10582	bf 17 00 00 00 00 00 00	r7 = r1
   10583	79 36 20 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x20)
   10584	79 31 28 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x28)
   10585	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   10586	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
   10587	bf 61 00 00 00 00 00 00	r1 = r6
   10588	b7 02 00 00 22 00 00 00	r2 = 0x22
   10589	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
   10590	8d 00 00 00 03 00 00 00	callx r3
   10591	b7 08 00 00 01 00 00 00	r8 = 0x1
   10592	55 00 d3 00 00 00 00 00	if r0 != 0x0 goto +0xd3 <LBB296_17>
   10593	b7 01 00 00 00 00 00 00	r1 = 0x0
   10594	b7 03 00 00 00 00 00 00	r3 = 0x0
   10595	15 09 c4 00 00 00 00 00	if r9 == 0x0 goto +0xc4 <LBB296_12>
   10596	bf 71 00 00 00 00 00 00	r1 = r7
   10597	7b 9a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r9
   10598	0f 91 00 00 00 00 00 00	r1 += r9
   10599	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   10600	b7 09 00 00 00 00 00 00	r9 = 0x0
   10601	bf 73 00 00 00 00 00 00	r3 = r7
   10602	b7 08 00 00 00 00 00 00	r8 = 0x0
   10603	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
   10604	05 00 07 00 00 00 00 00	goto +0x7 <LBB296_3>

0000000000014b68 <LBB296_46>
   10605	0f 89 00 00 00 00 00 00	r9 += r8

0000000000014b70 <LBB296_47>
   10606	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
   10607	1f 18 00 00 00 00 00 00	r8 -= r1
   10608	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
   10609	0f 38 00 00 00 00 00 00	r8 += r3
   10610	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
   10611	1d 13 a8 00 00 00 00 00	if r3 == r1 goto +0xa8 <LBB296_7>

0000000000014ba0 <LBB296_3>
   10612	71 30 00 00 00 00 00 00	r0 = *(u8 *)(r3 + 0x0)
   10613	bf 01 00 00 00 00 00 00	r1 = r0
   10614	67 01 00 00 38 00 00 00	r1 <<= 0x38
   10615	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   10616	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
   10617	65 01 25 00 ff ff ff ff	if r1 s> -0x1 goto +0x25 <LBB296_13>
   10618	bf 31 00 00 00 00 00 00	r1 = r3
   10619	07 01 00 00 02 00 00 00	r1 += 0x2
   10620	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   10621	71 31 01 00 00 00 00 00	r1 = *(u8 *)(r3 + 0x1)
   10622	57 01 00 00 3f 00 00 00	r1 &= 0x3f
   10623	bf 03 00 00 00 00 00 00	r3 = r0
   10624	57 03 00 00 1f 00 00 00	r3 &= 0x1f
   10625	bf 32 00 00 00 00 00 00	r2 = r3
   10626	67 02 00 00 06 00 00 00	r2 <<= 0x6
   10627	4f 12 00 00 00 00 00 00	r2 |= r1
   10628	25 00 01 00 df 00 00 00	if r0 > 0xdf goto +0x1 <LBB296_5>
   10629	05 00 1c 00 00 00 00 00	goto +0x1c <LBB296_14>

0000000000014c30 <LBB296_5>
   10630	67 01 00 00 06 00 00 00	r1 <<= 0x6
   10631	79 a5 d0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x30)
   10632	71 54 02 00 00 00 00 00	r4 = *(u8 *)(r5 + 0x2)
   10633	57 04 00 00 3f 00 00 00	r4 &= 0x3f
   10634	4f 41 00 00 00 00 00 00	r1 |= r4
   10635	07 05 00 00 03 00 00 00	r5 += 0x3
   10636	7b 5a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r5
   10637	bf 34 00 00 00 00 00 00	r4 = r3
   10638	67 04 00 00 0c 00 00 00	r4 <<= 0xc
   10639	bf 12 00 00 00 00 00 00	r2 = r1
   10640	4f 42 00 00 00 00 00 00	r2 |= r4
   10641	b7 04 00 00 f0 00 00 00	r4 = 0xf0
   10642	2d 04 0f 00 00 00 00 00	if r4 > r0 goto +0xf <LBB296_14>
   10643	67 01 00 00 06 00 00 00	r1 <<= 0x6
   10644	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
   10645	71 42 03 00 00 00 00 00	r2 = *(u8 *)(r4 + 0x3)
   10646	57 02 00 00 3f 00 00 00	r2 &= 0x3f
   10647	4f 21 00 00 00 00 00 00	r1 |= r2
   10648	67 03 00 00 12 00 00 00	r3 <<= 0x12
   10649	57 03 00 00 00 00 1c 00	r3 &= 0x1c0000
   10650	4f 31 00 00 00 00 00 00	r1 |= r3
   10651	07 04 00 00 04 00 00 00	r4 += 0x4
   10652	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
   10653	bf 12 00 00 00 00 00 00	r2 = r1
   10654	05 00 03 00 00 00 00 00	goto +0x3 <LBB296_14>

0000000000014cf8 <LBB296_13>
   10655	07 03 00 00 01 00 00 00	r3 += 0x1
   10656	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
   10657	bf 02 00 00 00 00 00 00	r2 = r0

0000000000014d10 <LBB296_14>
   10658	bf a1 00 00 00 00 00 00	r1 = r10
   10659	07 01 00 00 e0 ff ff ff	r1 += -0x20
   10660	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
   10661	b7 03 00 00 01 00 01 00	r3 = 0x10001
   10662	85 10 00 00 13 f9 ff ff	call -0x6ed ; <core::char::methods::<impl char>::escape_debug_ext>
   10663	71 a1 e0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x20)
   10664	15 01 c5 ff 80 00 00 00	if r1 == 0x80 goto -0x3b <LBB296_47>
   10665	71 a1 ea ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x16)
   10666	71 a2 eb ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x15)
   10667	1f 12 00 00 00 00 00 00	r2 -= r1
   10668	57 02 00 00 ff 00 00 00	r2 &= 0xff
   10669	15 02 c0 ff 01 00 00 00	if r2 == 0x1 goto -0x40 <LBB296_47>
   10670	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
   10671	2d 89 37 00 00 00 00 00	if r9 > r8 goto +0x37 <LBB296_27>
   10672	15 09 0a 00 00 00 00 00	if r9 == 0x0 goto +0xa <LBB296_23>
   10673	2d 92 02 00 00 00 00 00	if r2 > r9 goto +0x2 <LBB296_22>
   10674	1d 29 08 00 00 00 00 00	if r9 == r2 goto +0x8 <LBB296_23>
   10675	05 00 33 00 00 00 00 00	goto +0x33 <LBB296_27>

0000000000014da0 <LBB296_22>
   10676	bf 71 00 00 00 00 00 00	r1 = r7
   10677	0f 91 00 00 00 00 00 00	r1 += r9
   10678	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
   10679	67 01 00 00 38 00 00 00	r1 <<= 0x38
   10680	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   10681	b7 03 00 00 c0 ff ff ff	r3 = -0x40
   10682	6d 13 2c 00 00 00 00 00	if r3 s> r1 goto +0x2c <LBB296_27>

0000000000014dd8 <LBB296_23>
   10683	15 08 03 00 00 00 00 00	if r8 == 0x0 goto +0x3 <LBB296_28>
   10684	2d 82 24 00 00 00 00 00	if r2 > r8 goto +0x24 <LBB296_26>
   10685	1d 28 01 00 00 00 00 00	if r8 == r2 goto +0x1 <LBB296_28>
   10686	05 00 28 00 00 00 00 00	goto +0x28 <LBB296_27>

0000000000014df8 <LBB296_28>
   10687	bf 72 00 00 00 00 00 00	r2 = r7
   10688	0f 92 00 00 00 00 00 00	r2 += r9
   10689	bf 83 00 00 00 00 00 00	r3 = r8
   10690	1f 93 00 00 00 00 00 00	r3 -= r9
   10691	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
   10692	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   10693	bf 61 00 00 00 00 00 00	r1 = r6
   10694	8d 00 00 00 04 00 00 00	callx r4
   10695	55 00 52 00 00 00 00 00	if r0 != 0x0 goto +0x52 <LBB296_48>
   10696	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x18)
   10697	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r1
   10698	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
   10699	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10700	57 01 00 00 ff 00 00 00	r1 &= 0xff
   10701	55 01 02 00 80 00 00 00	if r1 != 0x80 goto +0x2 <LBB296_32>
   10702	b7 07 00 00 80 00 00 00	r7 = 0x80
   10703	05 00 34 00 00 00 00 00	goto +0x34 <LBB296_31>

0000000000014e80 <LBB296_32>
   10704	71 a7 fb ff 00 00 00 00	r7 = *(u8 *)(r10 - 0x5)
   10705	71 a1 fa ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x6)

0000000000014e90 <LBB296_33>
   10706	3d 71 3a 00 00 00 00 00	if r1 >= r7 goto +0x3a <LBB296_40>
   10707	bf 19 00 00 00 00 00 00	r9 = r1
   10708	07 09 00 00 01 00 00 00	r9 += 0x1
   10709	73 9a fa ff 00 00 00 00	*(u8 *)(r10 - 0x6) = r9
   10710	25 01 1f 00 09 00 00 00	if r1 > 0x9 goto +0x1f <LBB296_38>
   10711	bf a2 00 00 00 00 00 00	r2 = r10
   10712	07 02 00 00 f0 ff ff ff	r2 += -0x10
   10713	0f 12 00 00 00 00 00 00	r2 += r1
   10714	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
   10715	bf 61 00 00 00 00 00 00	r1 = r6
   10716	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
   10717	8d 00 00 00 03 00 00 00	callx r3
   10718	bf 91 00 00 00 00 00 00	r1 = r9
   10719	55 00 3a 00 00 00 00 00	if r0 != 0x0 goto +0x3a <LBB296_48>
   10720	05 00 f1 ff 00 00 00 00	goto -0xf <LBB296_33>

0000000000014f08 <LBB296_26>
   10721	bf 71 00 00 00 00 00 00	r1 = r7
   10722	0f 81 00 00 00 00 00 00	r1 += r8
   10723	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
   10724	67 01 00 00 38 00 00 00	r1 <<= 0x38
   10725	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   10726	65 01 d8 ff bf ff ff ff	if r1 s> -0x41 goto -0x28 <LBB296_28>

0000000000014f38 <LBB296_27>
   10727	bf 71 00 00 00 00 00 00	r1 = r7
   10728	bf 93 00 00 00 00 00 00	r3 = r9
   10729	bf 84 00 00 00 00 00 00	r4 = r8
   10730	18 05 00 00 c8 a3 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a3c8 ll
   10732	85 10 00 00 d9 02 00 00	call 0x2d9 ; <core::str::slice_error_fail>
   10733	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000014f70 <LBB296_36>
   10734	71 a1 fa ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x6)
   10735	71 a2 fb ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x5)
   10736	3d 21 1c 00 00 00 00 00	if r1 >= r2 goto +0x1c <LBB296_40>
   10737	bf 12 00 00 00 00 00 00	r2 = r1
   10738	07 02 00 00 01 00 00 00	r2 += 0x1
   10739	73 2a fa ff 00 00 00 00	*(u8 *)(r10 - 0x6) = r2
   10740	b7 02 00 00 0a 00 00 00	r2 = 0xa
   10741	2d 12 06 00 00 00 00 00	if r2 > r1 goto +0x6 <LBB296_39>

0000000000014fb0 <LBB296_38>
   10742	57 01 00 00 ff 00 00 00	r1 &= 0xff
   10743	b7 02 00 00 0a 00 00 00	r2 = 0xa
   10744	18 03 00 00 50 a6 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a650 ll
   10746	85 10 00 00 28 fa ff ff	call -0x5d8 ; <core::panicking::panic_bounds_check>
   10747	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000014fe0 <LBB296_39>
   10748	bf a2 00 00 00 00 00 00	r2 = r10
   10749	07 02 00 00 f0 ff ff ff	r2 += -0x10
   10750	0f 12 00 00 00 00 00 00	r2 += r1
   10751	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)

0000000000015000 <LBB296_42>
   10752	bf 61 00 00 00 00 00 00	r1 = r6
   10753	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
   10754	8d 00 00 00 03 00 00 00	callx r3
   10755	55 00 16 00 00 00 00 00	if r0 != 0x0 goto +0x16 <LBB296_48>

0000000000015020 <LBB296_31>
   10756	bf 71 00 00 00 00 00 00	r1 = r7
   10757	57 01 00 00 ff 00 00 00	r1 &= 0xff
   10758	15 01 01 00 80 00 00 00	if r1 == 0x80 goto +0x1 <LBB296_41>
   10759	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB296_36>

0000000000015040 <LBB296_41>
   10760	b7 07 00 00 00 00 00 00	r7 = 0x0
   10761	63 7a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r7
   10762	61 a2 f4 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0xc)
   10763	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
   10764	05 00 f3 ff 00 00 00 00	goto -0xd <LBB296_42>

0000000000015068 <LBB296_40>
   10765	b7 09 00 00 01 00 00 00	r9 = 0x1
   10766	79 a7 a0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x60)
   10767	b7 01 00 00 80 00 00 00	r1 = 0x80
   10768	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
   10769	2d 21 5b ff 00 00 00 00	if r1 > r2 goto -0xa5 <LBB296_46>
   10770	b7 09 00 00 02 00 00 00	r9 = 0x2
   10771	b7 01 00 00 00 08 00 00	r1 = 0x800
   10772	2d 21 58 ff 00 00 00 00	if r1 > r2 goto -0xa8 <LBB296_46>
   10773	b7 09 00 00 03 00 00 00	r9 = 0x3
   10774	b7 01 00 00 00 00 01 00	r1 = 0x10000
   10775	2d 21 55 ff 00 00 00 00	if r1 > r2 goto -0xab <LBB296_46>
   10776	b7 09 00 00 04 00 00 00	r9 = 0x4
   10777	05 00 53 ff 00 00 00 00	goto -0xad <LBB296_46>

00000000000150d0 <LBB296_48>
   10778	b7 08 00 00 01 00 00 00	r8 = 0x1
   10779	05 00 18 00 00 00 00 00	goto +0x18 <LBB296_17>

00000000000150e0 <LBB296_7>
   10780	b7 01 00 00 00 00 00 00	r1 = 0x0
   10781	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
   10782	bf 23 00 00 00 00 00 00	r3 = r2
   10783	b7 08 00 00 01 00 00 00	r8 = 0x1
   10784	15 09 07 00 00 00 00 00	if r9 == 0x0 goto +0x7 <LBB296_12>
   10785	2d 92 14 00 00 00 00 00	if r2 > r9 goto +0x14 <LBB296_10>
   10786	bf 23 00 00 00 00 00 00	r3 = r2
   10787	1f 93 00 00 00 00 00 00	r3 -= r9
   10788	bf 91 00 00 00 00 00 00	r1 = r9
   10789	bf 24 00 00 00 00 00 00	r4 = r2
   10790	1d 94 01 00 00 00 00 00	if r4 == r9 goto +0x1 <LBB296_12>
   10791	05 00 18 00 00 00 00 00	goto +0x18 <LBB296_11>

0000000000015140 <LBB296_12>
   10792	0f 17 00 00 00 00 00 00	r7 += r1
   10793	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
   10794	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   10795	bf 61 00 00 00 00 00 00	r1 = r6
   10796	bf 72 00 00 00 00 00 00	r2 = r7
   10797	8d 00 00 00 04 00 00 00	callx r4
   10798	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB296_17>
   10799	bf 61 00 00 00 00 00 00	r1 = r6
   10800	b7 02 00 00 22 00 00 00	r2 = 0x22
   10801	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
   10802	8d 00 00 00 03 00 00 00	callx r3
   10803	bf 08 00 00 00 00 00 00	r8 = r0

00000000000151a0 <LBB296_17>
   10804	bf 80 00 00 00 00 00 00	r0 = r8
   10805	95 00 00 00 00 00 00 00	exit

00000000000151b0 <LBB296_10>
   10806	bf 23 00 00 00 00 00 00	r3 = r2
   10807	1f 93 00 00 00 00 00 00	r3 -= r9
   10808	bf 71 00 00 00 00 00 00	r1 = r7
   10809	0f 91 00 00 00 00 00 00	r1 += r9
   10810	bf 24 00 00 00 00 00 00	r4 = r2
   10811	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
   10812	67 02 00 00 38 00 00 00	r2 <<= 0x38
   10813	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
   10814	bf 91 00 00 00 00 00 00	r1 = r9
   10815	65 02 e8 ff bf ff ff ff	if r2 s> -0x41 goto -0x18 <LBB296_12>

0000000000015200 <LBB296_11>
   10816	bf 71 00 00 00 00 00 00	r1 = r7
   10817	bf 42 00 00 00 00 00 00	r2 = r4
   10818	bf 93 00 00 00 00 00 00	r3 = r9
   10819	18 05 00 00 b0 a3 01 00 00 00 00 00 00 00 00 00	r5 = 0x1a3b0 ll
   10821	85 10 00 00 80 02 00 00	call 0x280 ; <core::str::slice_error_fail>
   10822	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015238 <<str as core::fmt::Display>::fmt>
   10823	bf 24 00 00 00 00 00 00	r4 = r2
   10824	bf 12 00 00 00 00 00 00	r2 = r1
   10825	bf 31 00 00 00 00 00 00	r1 = r3
   10826	bf 43 00 00 00 00 00 00	r3 = r4
   10827	85 10 00 00 f3 fd ff ff	call -0x20d ; <core::fmt::Formatter::pad>
   10828	95 00 00 00 00 00 00 00	exit

0000000000015268 <<char as core::fmt::Debug>::fmt>
   10829	bf 18 00 00 00 00 00 00	r8 = r1
   10830	79 26 20 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x20)
   10831	79 21 28 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x28)
   10832	79 19 20 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x20)
   10833	bf 61 00 00 00 00 00 00	r1 = r6
   10834	b7 02 00 00 27 00 00 00	r2 = 0x27
   10835	8d 00 00 00 09 00 00 00	callx r9
   10836	b7 01 00 00 01 00 00 00	r1 = 0x1
   10837	55 00 40 00 00 00 00 00	if r0 != 0x0 goto +0x40 <LBB298_15>
   10838	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0x0)
   10839	bf a1 00 00 00 00 00 00	r1 = r10
   10840	07 01 00 00 f0 ff ff ff	r1 += -0x10
   10841	b7 03 00 00 01 01 00 00	r3 = 0x101
   10842	85 10 00 00 5f f8 ff ff	call -0x7a1 ; <core::char::methods::<impl char>::escape_debug_ext>
   10843	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
   10844	55 01 03 00 80 00 00 00	if r1 != 0x80 goto +0x3 <LBB298_4>
   10845	b7 07 00 00 80 00 00 00	r7 = 0x80
   10846	b7 08 00 00 0a 00 00 00	r8 = 0xa
   10847	05 00 24 00 00 00 00 00	goto +0x24 <LBB298_3>

0000000000015300 <LBB298_4>
   10848	71 a7 fb ff 00 00 00 00	r7 = *(u8 *)(r10 - 0x5)
   10849	71 a1 fa ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x6)

0000000000015310 <LBB298_5>
   10850	3d 71 2f 00 00 00 00 00	if r1 >= r7 goto +0x2f <LBB298_14>
   10851	bf 18 00 00 00 00 00 00	r8 = r1
   10852	07 08 00 00 01 00 00 00	r8 += 0x1
   10853	73 8a fa ff 00 00 00 00	*(u8 *)(r10 - 0x6) = r8
   10854	25 01 10 00 09 00 00 00	if r1 > 0x9 goto +0x10 <LBB298_10>
   10855	bf a2 00 00 00 00 00 00	r2 = r10
   10856	07 02 00 00 f0 ff ff ff	r2 += -0x10
   10857	0f 12 00 00 00 00 00 00	r2 += r1
   10858	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
   10859	bf 61 00 00 00 00 00 00	r1 = r6
   10860	8d 00 00 00 09 00 00 00	callx r9
   10861	bf 81 00 00 00 00 00 00	r1 = r8
   10862	55 00 21 00 00 00 00 00	if r0 != 0x0 goto +0x21 <LBB298_16>
   10863	05 00 f2 ff 00 00 00 00	goto -0xe <LBB298_5>

0000000000015380 <LBB298_8>
   10864	71 a1 fa ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x6)
   10865	71 a2 fb ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x5)
   10866	3d 21 1f 00 00 00 00 00	if r1 >= r2 goto +0x1f <LBB298_14>
   10867	bf 12 00 00 00 00 00 00	r2 = r1
   10868	07 02 00 00 01 00 00 00	r2 += 0x1
   10869	73 2a fa ff 00 00 00 00	*(u8 *)(r10 - 0x6) = r2
   10870	2d 18 06 00 00 00 00 00	if r8 > r1 goto +0x6 <LBB298_11>

00000000000153b8 <LBB298_10>
   10871	57 01 00 00 ff 00 00 00	r1 &= 0xff
   10872	b7 02 00 00 0a 00 00 00	r2 = 0xa
   10873	18 03 00 00 50 a6 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a650 ll
   10875	85 10 00 00 a7 f9 ff ff	call -0x659 ; <core::panicking::panic_bounds_check>
   10876	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000153e8 <LBB298_11>
   10877	bf a2 00 00 00 00 00 00	r2 = r10
   10878	07 02 00 00 f0 ff ff ff	r2 += -0x10
   10879	0f 12 00 00 00 00 00 00	r2 += r1
   10880	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
   10881	bf 61 00 00 00 00 00 00	r1 = r6
   10882	8d 00 00 00 09 00 00 00	callx r9
   10883	55 00 0c 00 00 00 00 00	if r0 != 0x0 goto +0xc <LBB298_16>

0000000000015420 <LBB298_3>
   10884	bf 71 00 00 00 00 00 00	r1 = r7
   10885	57 01 00 00 ff 00 00 00	r1 &= 0xff
   10886	15 01 01 00 80 00 00 00	if r1 == 0x80 goto +0x1 <LBB298_12>
   10887	05 00 e8 ff 00 00 00 00	goto -0x18 <LBB298_8>

0000000000015440 <LBB298_12>
   10888	b7 07 00 00 00 00 00 00	r7 = 0x0
   10889	63 7a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r7
   10890	61 a2 f4 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0xc)
   10891	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
   10892	bf 61 00 00 00 00 00 00	r1 = r6
   10893	8d 00 00 00 09 00 00 00	callx r9
   10894	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB298_16>
   10895	05 00 f4 ff 00 00 00 00	goto -0xc <LBB298_3>

0000000000015480 <LBB298_16>
   10896	b7 01 00 00 01 00 00 00	r1 = 0x1
   10897	05 00 04 00 00 00 00 00	goto +0x4 <LBB298_15>

0000000000015490 <LBB298_14>
   10898	bf 61 00 00 00 00 00 00	r1 = r6
   10899	b7 02 00 00 27 00 00 00	r2 = 0x27
   10900	8d 00 00 00 09 00 00 00	callx r9
   10901	bf 01 00 00 00 00 00 00	r1 = r0

00000000000154b0 <LBB298_15>
   10902	bf 10 00 00 00 00 00 00	r0 = r1
   10903	95 00 00 00 00 00 00 00	exit

00000000000154c0 <core::slice::index::slice_start_index_len_fail>
   10904	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
   10905	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
   10906	b7 01 00 00 00 00 00 00	r1 = 0x0
   10907	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   10908	18 01 00 00 e0 a3 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a3e0 ll
   10910	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   10911	b7 01 00 00 02 00 00 00	r1 = 0x2
   10912	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   10913	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   10914	bf a1 00 00 00 00 00 00	r1 = r10
   10915	07 01 00 00 e0 ff ff ff	r1 += -0x20
   10916	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   10917	bf a1 00 00 00 00 00 00	r1 = r10
   10918	07 01 00 00 a8 ff ff ff	r1 += -0x58
   10919	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10920	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
   10922	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10923	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
   10924	bf a1 00 00 00 00 00 00	r1 = r10
   10925	07 01 00 00 a0 ff ff ff	r1 += -0x60
   10926	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   10927	bf a1 00 00 00 00 00 00	r1 = r10
   10928	07 01 00 00 b0 ff ff ff	r1 += -0x50
   10929	bf 32 00 00 00 00 00 00	r2 = r3
   10930	85 10 00 00 50 f9 ff ff	call -0x6b0 ; <core::panicking::panic_fmt>
   10931	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000155a0 <core::slice::index::slice_end_index_len_fail>
   10932	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
   10933	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
   10934	b7 01 00 00 00 00 00 00	r1 = 0x0
   10935	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   10936	18 01 00 00 00 a4 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a400 ll
   10938	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   10939	b7 01 00 00 02 00 00 00	r1 = 0x2
   10940	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   10941	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   10942	bf a1 00 00 00 00 00 00	r1 = r10
   10943	07 01 00 00 e0 ff ff ff	r1 += -0x20
   10944	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   10945	bf a1 00 00 00 00 00 00	r1 = r10
   10946	07 01 00 00 a8 ff ff ff	r1 += -0x58
   10947	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10948	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
   10950	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10951	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
   10952	bf a1 00 00 00 00 00 00	r1 = r10
   10953	07 01 00 00 a0 ff ff ff	r1 += -0x60
   10954	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   10955	bf a1 00 00 00 00 00 00	r1 = r10
   10956	07 01 00 00 b0 ff ff ff	r1 += -0x50
   10957	bf 32 00 00 00 00 00 00	r2 = r3
   10958	85 10 00 00 34 f9 ff ff	call -0x6cc ; <core::panicking::panic_fmt>
   10959	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015680 <core::slice::index::slice_index_order_fail>
   10960	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
   10961	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
   10962	b7 01 00 00 00 00 00 00	r1 = 0x0
   10963	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   10964	18 01 00 00 20 a4 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a420 ll
   10966	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   10967	b7 01 00 00 02 00 00 00	r1 = 0x2
   10968	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   10969	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   10970	bf a1 00 00 00 00 00 00	r1 = r10
   10971	07 01 00 00 e0 ff ff ff	r1 += -0x20
   10972	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   10973	bf a1 00 00 00 00 00 00	r1 = r10
   10974	07 01 00 00 a8 ff ff ff	r1 += -0x58
   10975	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   10976	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
   10978	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10979	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
   10980	bf a1 00 00 00 00 00 00	r1 = r10
   10981	07 01 00 00 a0 ff ff ff	r1 += -0x60
   10982	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   10983	bf a1 00 00 00 00 00 00	r1 = r10
   10984	07 01 00 00 b0 ff ff ff	r1 += -0x50
   10985	bf 32 00 00 00 00 00 00	r2 = r3
   10986	85 10 00 00 18 f9 ff ff	call -0x6e8 ; <core::panicking::panic_fmt>
   10987	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015760 <core::str::converts::from_utf8>
   10988	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   10989	bf 31 00 00 00 00 00 00	r1 = r3
   10990	07 01 00 00 f1 ff ff ff	r1 += -0xf
   10991	b7 05 00 00 00 00 00 00	r5 = 0x0
   10992	b7 04 00 00 01 00 00 00	r4 = 0x1
   10993	2d 31 01 00 00 00 00 00	if r1 > r3 goto +0x1 <LBB322_2>
   10994	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000015798 <LBB322_2>
   10995	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB322_4>
   10996	bf 15 00 00 00 00 00 00	r5 = r1

00000000000157a8 <LBB322_4>
   10997	15 03 bd 00 00 00 00 00	if r3 == 0x0 goto +0xbd <LBB322_57>
   10998	bf 20 00 00 00 00 00 00	r0 = r2
   10999	07 00 00 00 07 00 00 00	r0 += 0x7
   11000	57 00 00 00 f8 ff ff ff	r0 &= -0x8
   11001	1f 20 00 00 00 00 00 00	r0 -= r2
   11002	b7 06 00 00 00 00 00 00	r6 = 0x0
   11003	18 08 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r8 = -0x7f7f7f7f7f7f7f80 ll
   11005	b7 04 00 00 00 00 00 00	r4 = 0x0
   11006	05 00 0f 00 00 00 00 00	goto +0xf <LBB322_6>

00000000000157f8 <LBB322_23>
   11007	3d 31 ba 00 00 00 00 00	if r1 >= r3 goto +0xba <LBB322_25>
   11008	bf 27 00 00 00 00 00 00	r7 = r2
   11009	0f 17 00 00 00 00 00 00	r7 += r1
   11010	71 79 00 00 00 00 00 00	r9 = *(u8 *)(r7 + 0x0)
   11011	67 09 00 00 38 00 00 00	r9 <<= 0x38
   11012	c7 09 00 00 38 00 00 00	r9 s>>= 0x38
   11013	b7 08 00 00 01 00 00 00	r8 = 0x1
   11014	b7 07 00 00 01 00 00 00	r7 = 0x1
   11015	65 09 a5 00 bf ff ff ff	if r9 s> -0x41 goto +0xa5 <LBB322_58>

0000000000015840 <LBB322_26>
   11016	07 01 00 00 01 00 00 00	r1 += 0x1
   11017	bf 14 00 00 00 00 00 00	r4 = r1
   11018	18 08 00 00 80 80 80 80 00 00 00 00 80 80 80 80	r8 = -0x7f7f7f7f7f7f7f80 ll
   11020	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB322_6>
   11021	05 00 a5 00 00 00 00 00	goto +0xa5 <LBB322_57>

0000000000015870 <LBB322_6>
   11022	bf 21 00 00 00 00 00 00	r1 = r2
   11023	0f 41 00 00 00 00 00 00	r1 += r4
   11024	71 19 00 00 00 00 00 00	r9 = *(u8 *)(r1 + 0x0)
   11025	bf 91 00 00 00 00 00 00	r1 = r9
   11026	67 01 00 00 38 00 00 00	r1 <<= 0x38
   11027	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   11028	6d 16 1c 00 00 00 00 00	if r6 s> r1 goto +0x1c <LBB322_17>
   11029	bf 01 00 00 00 00 00 00	r1 = r0
   11030	1f 41 00 00 00 00 00 00	r1 -= r4
   11031	57 01 00 00 07 00 00 00	r1 &= 0x7
   11032	55 01 15 00 00 00 00 00	if r1 != 0x0 goto +0x15 <LBB322_15>
   11033	3d 54 0a 00 00 00 00 00	if r4 >= r5 goto +0xa <LBB322_10>

00000000000158d0 <LBB322_9>
   11034	bf 21 00 00 00 00 00 00	r1 = r2
   11035	0f 41 00 00 00 00 00 00	r1 += r4
   11036	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
   11037	5f 87 00 00 00 00 00 00	r7 &= r8
   11038	55 07 05 00 00 00 00 00	if r7 != 0x0 goto +0x5 <LBB322_10>
   11039	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
   11040	5f 81 00 00 00 00 00 00	r1 &= r8
   11041	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB322_10>
   11042	07 04 00 00 10 00 00 00	r4 += 0x10
   11043	2d 45 f6 ff 00 00 00 00	if r5 > r4 goto -0xa <LBB322_9>

0000000000015920 <LBB322_10>
   11044	3d 34 0a 00 00 00 00 00	if r4 >= r3 goto +0xa <LBB322_16>

0000000000015928 <LBB322_11>
   11045	bf 21 00 00 00 00 00 00	r1 = r2
   11046	0f 41 00 00 00 00 00 00	r1 += r4
   11047	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
   11048	67 01 00 00 38 00 00 00	r1 <<= 0x38
   11049	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   11050	6d 16 04 00 00 00 00 00	if r6 s> r1 goto +0x4 <LBB322_16>
   11051	07 04 00 00 01 00 00 00	r4 += 0x1
   11052	2d 43 f8 ff 00 00 00 00	if r3 > r4 goto -0x8 <LBB322_11>
   11053	05 00 85 00 00 00 00 00	goto +0x85 <LBB322_57>

0000000000015970 <LBB322_15>
   11054	07 04 00 00 01 00 00 00	r4 += 0x1

0000000000015978 <LBB322_16>
   11055	2d 43 de ff 00 00 00 00	if r3 > r4 goto -0x22 <LBB322_6>
   11056	05 00 82 00 00 00 00 00	goto +0x82 <LBB322_57>

0000000000015988 <LBB322_17>
   11057	18 01 00 00 bf 92 01 00 00 00 00 00 00 00 00 00	r1 = 0x192bf ll
   11059	0f 91 00 00 00 00 00 00	r1 += r9
   11060	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
   11061	15 01 09 00 04 00 00 00	if r1 == 0x4 goto +0x9 <LBB322_22>
   11062	15 01 33 00 03 00 00 00	if r1 == 0x3 goto +0x33 <LBB322_21>
   11063	b7 08 00 00 01 00 00 00	r8 = 0x1
   11064	b7 07 00 00 01 00 00 00	r7 = 0x1
   11065	55 01 73 00 02 00 00 00	if r1 != 0x2 goto +0x73 <LBB322_58>
   11066	b7 07 00 00 00 00 00 00	r7 = 0x0
   11067	bf 41 00 00 00 00 00 00	r1 = r4
   11068	07 01 00 00 01 00 00 00	r1 += 0x1
   11069	3d 31 6f 00 00 00 00 00	if r1 >= r3 goto +0x6f <LBB322_58>
   11070	05 00 c0 ff 00 00 00 00	goto -0x40 <LBB322_23>

00000000000159f8 <LBB322_22>
   11071	bf 41 00 00 00 00 00 00	r1 = r4
   11072	07 01 00 00 01 00 00 00	r1 += 0x1
   11073	b7 07 00 00 00 00 00 00	r7 = 0x0
   11074	3d 31 6a 00 00 00 00 00	if r1 >= r3 goto +0x6a <LBB322_58>
   11075	3d 31 7b 00 00 00 00 00	if r1 >= r3 goto +0x7b <LBB322_44>
   11076	bf 27 00 00 00 00 00 00	r7 = r2
   11077	0f 17 00 00 00 00 00 00	r7 += r1
   11078	71 71 00 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x0)
   11079	67 01 00 00 38 00 00 00	r1 <<= 0x38
   11080	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   11081	15 09 3e 00 f0 00 00 00	if r9 == 0xf0 goto +0x3e <LBB322_47>
   11082	15 09 01 00 f4 00 00 00	if r9 == 0xf4 goto +0x1 <LBB322_48>
   11083	05 00 43 00 00 00 00 00	goto +0x43 <LBB322_45>

0000000000015a60 <LBB322_48>
   11084	b7 08 00 00 01 00 00 00	r8 = 0x1
   11085	b7 07 00 00 01 00 00 00	r7 = 0x1
   11086	65 01 5e 00 8f ff ff ff	if r1 s> -0x71 goto +0x5e <LBB322_58>

0000000000015a78 <LBB322_49>
   11087	bf 41 00 00 00 00 00 00	r1 = r4
   11088	07 01 00 00 02 00 00 00	r1 += 0x2
   11089	b7 07 00 00 00 00 00 00	r7 = 0x0
   11090	3d 31 5a 00 00 00 00 00	if r1 >= r3 goto +0x5a <LBB322_58>
   11091	3d 31 75 00 00 00 00 00	if r1 >= r3 goto +0x75 <LBB322_52>
   11092	bf 27 00 00 00 00 00 00	r7 = r2
   11093	0f 17 00 00 00 00 00 00	r7 += r1
   11094	b7 08 00 00 02 00 00 00	r8 = 0x2
   11095	71 71 00 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x0)
   11096	67 01 00 00 38 00 00 00	r1 <<= 0x38
   11097	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   11098	b7 07 00 00 01 00 00 00	r7 = 0x1
   11099	65 01 51 00 bf ff ff ff	if r1 s> -0x41 goto +0x51 <LBB322_58>
   11100	bf 41 00 00 00 00 00 00	r1 = r4
   11101	07 01 00 00 03 00 00 00	r1 += 0x3
   11102	b7 07 00 00 00 00 00 00	r7 = 0x0
   11103	3d 31 4d 00 00 00 00 00	if r1 >= r3 goto +0x4d <LBB322_58>
   11104	3d 31 6d 00 00 00 00 00	if r1 >= r3 goto +0x6d <LBB322_56>
   11105	bf 27 00 00 00 00 00 00	r7 = r2
   11106	0f 17 00 00 00 00 00 00	r7 += r1
   11107	b7 08 00 00 03 00 00 00	r8 = 0x3
   11108	71 79 00 00 00 00 00 00	r9 = *(u8 *)(r7 + 0x0)
   11109	67 09 00 00 38 00 00 00	r9 <<= 0x38
   11110	c7 09 00 00 38 00 00 00	r9 s>>= 0x38
   11111	b7 07 00 00 01 00 00 00	r7 = 0x1
   11112	65 09 44 00 bf ff ff ff	if r9 s> -0x41 goto +0x44 <LBB322_58>
   11113	05 00 9e ff 00 00 00 00	goto -0x62 <LBB322_26>

0000000000015b50 <LBB322_21>
   11114	b7 07 00 00 00 00 00 00	r7 = 0x0
   11115	bf 41 00 00 00 00 00 00	r1 = r4
   11116	07 01 00 00 01 00 00 00	r1 += 0x1
   11117	3d 31 3f 00 00 00 00 00	if r1 >= r3 goto +0x3f <LBB322_58>
   11118	3d 31 55 00 00 00 00 00	if r1 >= r3 goto +0x55 <LBB322_30>
   11119	bf 27 00 00 00 00 00 00	r7 = r2
   11120	0f 17 00 00 00 00 00 00	r7 += r1
   11121	71 71 00 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x0)
   11122	67 01 00 00 38 00 00 00	r1 <<= 0x38
   11123	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
   11124	15 09 22 00 e0 00 00 00	if r9 == 0xe0 goto +0x22 <LBB322_32>
   11125	15 09 01 00 ed 00 00 00	if r9 == 0xed goto +0x1 <LBB322_33>
   11126	05 00 25 00 00 00 00 00	goto +0x25 <LBB322_31>

0000000000015bb8 <LBB322_33>
   11127	b7 08 00 00 01 00 00 00	r8 = 0x1
   11128	b7 07 00 00 01 00 00 00	r7 = 0x1
   11129	65 01 33 00 9f ff ff ff	if r1 s> -0x61 goto +0x33 <LBB322_58>

0000000000015bd0 <LBB322_34>
   11130	bf 41 00 00 00 00 00 00	r1 = r4
   11131	07 01 00 00 02 00 00 00	r1 += 0x2
   11132	b7 07 00 00 00 00 00 00	r7 = 0x0
   11133	3d 31 2f 00 00 00 00 00	if r1 >= r3 goto +0x2f <LBB322_58>
   11134	3d 31 54 00 00 00 00 00	if r1 >= r3 goto +0x54 <LBB322_40>
   11135	bf 27 00 00 00 00 00 00	r7 = r2
   11136	0f 17 00 00 00 00 00 00	r7 += r1
   11137	b7 08 00 00 02 00 00 00	r8 = 0x2
   11138	71 79 00 00 00 00 00 00	r9 = *(u8 *)(r7 + 0x0)
   11139	67 09 00 00 38 00 00 00	r9 <<= 0x38
   11140	c7 09 00 00 38 00 00 00	r9 s>>= 0x38
   11141	b7 07 00 00 01 00 00 00	r7 = 0x1
   11142	65 09 26 00 bf ff ff ff	if r9 s> -0x41 goto +0x26 <LBB322_58>
   11143	05 00 80 ff 00 00 00 00	goto -0x80 <LBB322_26>

0000000000015c40 <LBB322_47>
   11144	07 01 00 00 70 00 00 00	r1 += 0x70
   11145	57 01 00 00 ff 00 00 00	r1 &= 0xff
   11146	b7 08 00 00 01 00 00 00	r8 = 0x1
   11147	b7 07 00 00 01 00 00 00	r7 = 0x1
   11148	b7 09 00 00 30 00 00 00	r9 = 0x30
   11149	2d 19 c1 ff 00 00 00 00	if r9 > r1 goto -0x3f <LBB322_49>
   11150	05 00 1e 00 00 00 00 00	goto +0x1e <LBB322_58>

0000000000015c78 <LBB322_45>
   11151	07 09 00 00 0f 00 00 00	r9 += 0xf
   11152	57 09 00 00 ff 00 00 00	r9 &= 0xff
   11153	b7 08 00 00 01 00 00 00	r8 = 0x1
   11154	b7 07 00 00 01 00 00 00	r7 = 0x1
   11155	25 09 19 00 02 00 00 00	if r9 > 0x2 goto +0x19 <LBB322_58>
   11156	b7 09 00 00 c0 ff ff ff	r9 = -0x40
   11157	6d 19 b9 ff 00 00 00 00	if r9 s> r1 goto -0x47 <LBB322_49>
   11158	05 00 16 00 00 00 00 00	goto +0x16 <LBB322_58>

0000000000015cb8 <LBB322_32>
   11159	57 01 00 00 e0 ff ff ff	r1 &= -0x20
   11160	b7 08 00 00 01 00 00 00	r8 = 0x1
   11161	b7 07 00 00 01 00 00 00	r7 = 0x1
   11162	15 01 df ff a0 ff ff ff	if r1 == -0x60 goto -0x21 <LBB322_34>
   11163	05 00 11 00 00 00 00 00	goto +0x11 <LBB322_58>

0000000000015ce0 <LBB322_31>
   11164	bf 97 00 00 00 00 00 00	r7 = r9
   11165	07 07 00 00 1f 00 00 00	r7 += 0x1f
   11166	57 07 00 00 ff 00 00 00	r7 &= 0xff
   11167	b7 08 00 00 0c 00 00 00	r8 = 0xc
   11168	2d 78 01 00 00 00 00 00	if r8 > r7 goto +0x1 <LBB322_37>
   11169	05 00 05 00 00 00 00 00	goto +0x5 <LBB322_35>

0000000000015d10 <LBB322_37>
   11170	b7 08 00 00 01 00 00 00	r8 = 0x1
   11171	b7 07 00 00 01 00 00 00	r7 = 0x1
   11172	b7 09 00 00 c0 ff ff ff	r9 = -0x40
   11173	6d 19 d4 ff 00 00 00 00	if r9 s> r1 goto -0x2c <LBB322_34>
   11174	05 00 06 00 00 00 00 00	goto +0x6 <LBB322_58>

0000000000015d38 <LBB322_35>
   11175	57 09 00 00 fe 00 00 00	r9 &= 0xfe
   11176	b7 08 00 00 01 00 00 00	r8 = 0x1
   11177	b7 07 00 00 01 00 00 00	r7 = 0x1
   11178	55 09 02 00 ee 00 00 00	if r9 != 0xee goto +0x2 <LBB322_58>
   11179	b7 09 00 00 c0 ff ff ff	r9 = -0x40
   11180	6d 19 cd ff 00 00 00 00	if r9 s> r1 goto -0x33 <LBB322_34>

0000000000015d68 <LBB322_58>
   11181	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x8)
   11182	73 83 11 00 00 00 00 00	*(u8 *)(r3 + 0x11) = r8
   11183	73 73 10 00 00 00 00 00	*(u8 *)(r3 + 0x10) = r7
   11184	7b 43 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r4
   11185	b7 01 00 00 01 00 00 00	r1 = 0x1
   11186	05 00 05 00 00 00 00 00	goto +0x5 <LBB322_59>

0000000000015d98 <LBB322_57>
   11187	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   11188	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
   11189	bf 13 00 00 00 00 00 00	r3 = r1
   11190	7b 23 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r2
   11191	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000015dc0 <LBB322_59>
   11192	7b 13 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r1
   11193	95 00 00 00 00 00 00 00	exit

0000000000015dd0 <LBB322_25>
   11194	bf 32 00 00 00 00 00 00	r2 = r3
   11195	18 03 00 00 70 a4 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a470 ll
   11197	85 10 00 00 65 f8 ff ff	call -0x79b ; <core::panicking::panic_bounds_check>
   11198	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015df8 <LBB322_44>
   11199	bf 32 00 00 00 00 00 00	r2 = r3
   11200	18 03 00 00 b8 a4 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a4b8 ll
   11202	85 10 00 00 60 f8 ff ff	call -0x7a0 ; <core::panicking::panic_bounds_check>
   11203	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015e20 <LBB322_30>
   11204	bf 32 00 00 00 00 00 00	r2 = r3
   11205	18 03 00 00 88 a4 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a488 ll
   11207	85 10 00 00 5b f8 ff ff	call -0x7a5 ; <core::panicking::panic_bounds_check>
   11208	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015e48 <LBB322_52>
   11209	bf 32 00 00 00 00 00 00	r2 = r3
   11210	18 03 00 00 d0 a4 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a4d0 ll
   11212	85 10 00 00 56 f8 ff ff	call -0x7aa ; <core::panicking::panic_bounds_check>
   11213	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015e70 <LBB322_56>
   11214	bf 32 00 00 00 00 00 00	r2 = r3
   11215	18 03 00 00 e8 a4 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a4e8 ll
   11217	85 10 00 00 51 f8 ff ff	call -0x7af ; <core::panicking::panic_bounds_check>
   11218	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015e98 <LBB322_40>
   11219	bf 32 00 00 00 00 00 00	r2 = r3
   11220	18 03 00 00 a0 a4 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a4a0 ll
   11222	85 10 00 00 4c f8 ff ff	call -0x7b4 ; <core::panicking::panic_bounds_check>
   11223	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000015ec0 <core::str::count::do_count_chars>
   11224	bf 17 00 00 00 00 00 00	r7 = r1
   11225	07 07 00 00 07 00 00 00	r7 += 0x7
   11226	57 07 00 00 f8 ff ff ff	r7 &= -0x8
   11227	bf 74 00 00 00 00 00 00	r4 = r7
   11228	1f 14 00 00 00 00 00 00	r4 -= r1
   11229	2d 24 89 00 00 00 00 00	if r4 > r2 goto +0x89 <LBB324_16>
   11230	bf 25 00 00 00 00 00 00	r5 = r2
   11231	1f 45 00 00 00 00 00 00	r5 -= r4
   11232	b7 03 00 00 08 00 00 00	r3 = 0x8
   11233	2d 53 85 00 00 00 00 00	if r3 > r5 goto +0x85 <LBB324_16>
   11234	7b 4a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r4
   11235	bf 53 00 00 00 00 00 00	r3 = r5
   11236	57 03 00 00 07 00 00 00	r3 &= 0x7
   11237	b7 02 00 00 00 00 00 00	r2 = 0x0
   11238	b7 04 00 00 00 00 00 00	r4 = 0x0
   11239	1d 17 07 00 00 00 00 00	if r7 == r1 goto +0x7 <LBB324_9>
   11240	bf 16 00 00 00 00 00 00	r6 = r1
   11241	1f 76 00 00 00 00 00 00	r6 -= r7
   11242	bf 17 00 00 00 00 00 00	r7 = r1
   11243	05 00 0c 00 00 00 00 00	goto +0xc <LBB324_4>

0000000000015f60 <LBB324_8>
   11244	0f 94 00 00 00 00 00 00	r4 += r9
   11245	07 07 00 00 01 00 00 00	r7 += 0x1
   11246	55 08 09 00 01 00 00 00	if r8 != 0x1 goto +0x9 <LBB324_4>

0000000000015f78 <LBB324_9>
   11247	79 a0 f8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x8)
   11248	0f 01 00 00 00 00 00 00	r1 += r0
   11249	15 03 15 00 00 00 00 00	if r3 == 0x0 goto +0x15 <LBB324_14>
   11250	bf 52 00 00 00 00 00 00	r2 = r5
   11251	57 02 00 00 f8 ff ff ff	r2 &= -0x8
   11252	bf 10 00 00 00 00 00 00	r0 = r1
   11253	0f 20 00 00 00 00 00 00	r0 += r2
   11254	b7 02 00 00 00 00 00 00	r2 = 0x0
   11255	05 00 14 00 00 00 00 00	goto +0x14 <LBB324_11>

0000000000015fc0 <LBB324_4>
   11256	71 70 00 00 00 00 00 00	r0 = *(u8 *)(r7 + 0x0)
   11257	67 00 00 00 38 00 00 00	r0 <<= 0x38
   11258	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
   11259	b7 08 00 00 01 00 00 00	r8 = 0x1
   11260	b7 09 00 00 01 00 00 00	r9 = 0x1
   11261	65 00 01 00 bf ff ff ff	if r0 s> -0x41 goto +0x1 <LBB324_6>
   11262	b7 09 00 00 00 00 00 00	r9 = 0x0

0000000000015ff8 <LBB324_6>
   11263	07 06 00 00 01 00 00 00	r6 += 0x1
   11264	15 06 eb ff 00 00 00 00	if r6 == 0x0 goto -0x15 <LBB324_8>
   11265	b7 08 00 00 00 00 00 00	r8 = 0x0
   11266	05 00 e9 ff 00 00 00 00	goto -0x17 <LBB324_8>

0000000000016018 <LBB324_13>
   11267	0f 62 00 00 00 00 00 00	r2 += r6
   11268	07 00 00 00 01 00 00 00	r0 += 0x1
   11269	07 03 00 00 ff ff ff ff	r3 += -0x1
   11270	55 03 05 00 00 00 00 00	if r3 != 0x0 goto +0x5 <LBB324_11>

0000000000016038 <LBB324_14>
   11271	77 05 00 00 03 00 00 00	r5 >>= 0x3
   11272	0f 42 00 00 00 00 00 00	r2 += r4
   11273	18 08 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r8 = 0x101010101010101 ll
   11275	05 00 47 00 00 00 00 00	goto +0x47 <LBB324_15>

0000000000016060 <LBB324_11>
   11276	71 07 00 00 00 00 00 00	r7 = *(u8 *)(r0 + 0x0)
   11277	67 07 00 00 38 00 00 00	r7 <<= 0x38
   11278	c7 07 00 00 38 00 00 00	r7 s>>= 0x38
   11279	b7 06 00 00 01 00 00 00	r6 = 0x1
   11280	65 07 f2 ff bf ff ff ff	if r7 s> -0x41 goto -0xe <LBB324_13>
   11281	b7 06 00 00 00 00 00 00	r6 = 0x0
   11282	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB324_13>

0000000000016098 <LBB324_24>
   11283	15 05 22 00 00 00 00 00	if r5 == 0x0 goto +0x22 <LBB324_26>
   11284	79 56 00 00 00 00 00 00	r6 = *(u64 *)(r5 + 0x0)
   11285	bf 67 00 00 00 00 00 00	r7 = r6
   11286	77 07 00 00 06 00 00 00	r7 >>= 0x6
   11287	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
   11288	77 06 00 00 07 00 00 00	r6 >>= 0x7
   11289	4f 76 00 00 00 00 00 00	r6 |= r7
   11290	5f 86 00 00 00 00 00 00	r6 &= r8
   11291	0f 26 00 00 00 00 00 00	r6 += r2
   11292	79 52 08 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x8)
   11293	bf 27 00 00 00 00 00 00	r7 = r2
   11294	77 07 00 00 06 00 00 00	r7 >>= 0x6
   11295	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
   11296	77 02 00 00 07 00 00 00	r2 >>= 0x7
   11297	4f 72 00 00 00 00 00 00	r2 |= r7
   11298	5f 82 00 00 00 00 00 00	r2 &= r8
   11299	0f 62 00 00 00 00 00 00	r2 += r6
   11300	79 56 10 00 00 00 00 00	r6 = *(u64 *)(r5 + 0x10)
   11301	bf 67 00 00 00 00 00 00	r7 = r6
   11302	77 07 00 00 06 00 00 00	r7 >>= 0x6
   11303	a7 06 00 00 ff ff ff ff	r6 ^= -0x1
   11304	77 06 00 00 07 00 00 00	r6 >>= 0x7
   11305	4f 76 00 00 00 00 00 00	r6 |= r7
   11306	5f 86 00 00 00 00 00 00	r6 &= r8
   11307	0f 26 00 00 00 00 00 00	r6 += r2
   11308	79 52 18 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x18)
   11309	bf 27 00 00 00 00 00 00	r7 = r2
   11310	77 07 00 00 06 00 00 00	r7 >>= 0x6
   11311	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
   11312	77 02 00 00 07 00 00 00	r2 >>= 0x7
   11313	4f 72 00 00 00 00 00 00	r2 |= r7
   11314	5f 82 00 00 00 00 00 00	r2 &= r8
   11315	0f 62 00 00 00 00 00 00	r2 += r6
   11316	07 05 00 00 20 00 00 00	r5 += 0x20
   11317	5d 15 dd ff 00 00 00 00	if r5 != r1 goto -0x23 <LBB324_24>

00000000000161b0 <LBB324_26>
   11318	bf 95 00 00 00 00 00 00	r5 = r9
   11319	67 05 00 00 03 00 00 00	r5 <<= 0x3
   11320	bf 31 00 00 00 00 00 00	r1 = r3
   11321	0f 51 00 00 00 00 00 00	r1 += r5
   11322	bf 45 00 00 00 00 00 00	r5 = r4
   11323	1f 95 00 00 00 00 00 00	r5 -= r9
   11324	57 09 00 00 03 00 00 00	r9 &= 0x3
   11325	bf 26 00 00 00 00 00 00	r6 = r2
   11326	18 07 00 00 ff 00 ff 00 00 00 00 00 ff 00 ff 00	r7 = 0xff00ff00ff00ff ll
   11328	5f 76 00 00 00 00 00 00	r6 &= r7
   11329	77 02 00 00 08 00 00 00	r2 >>= 0x8
   11330	5f 72 00 00 00 00 00 00	r2 &= r7
   11331	0f 62 00 00 00 00 00 00	r2 += r6
   11332	18 06 00 00 01 00 01 00 00 00 00 00 01 00 01 00	r6 = 0x1000100010001 ll
   11334	2f 62 00 00 00 00 00 00	r2 *= r6
   11335	77 02 00 00 30 00 00 00	r2 >>= 0x30
   11336	0f 02 00 00 00 00 00 00	r2 += r0
   11337	15 09 09 00 00 00 00 00	if r9 == 0x0 goto +0x9 <LBB324_15>
   11338	b7 00 00 00 00 00 00 00	r0 = 0x0
   11339	15 03 3c 00 00 00 00 00	if r3 == 0x0 goto +0x3c <LBB324_32>
   11340	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   11341	67 01 00 00 03 00 00 00	r1 <<= 0x3
   11342	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   11343	b7 01 00 00 c0 00 00 00	r1 = 0xc0
   11344	2d 41 23 00 00 00 00 00	if r1 > r4 goto +0x23 <LBB324_30>
   11345	b7 04 00 00 c0 00 00 00	r4 = 0xc0
   11346	05 00 21 00 00 00 00 00	goto +0x21 <LBB324_30>

0000000000016298 <LBB324_15>
   11347	bf 20 00 00 00 00 00 00	r0 = r2
   11348	bf 54 00 00 00 00 00 00	r4 = r5
   11349	bf 13 00 00 00 00 00 00	r3 = r1
   11350	15 04 3d 00 00 00 00 00	if r4 == 0x0 goto +0x3d <LBB324_33>
   11351	b7 01 00 00 c0 00 00 00	r1 = 0xc0
   11352	bf 49 00 00 00 00 00 00	r9 = r4
   11353	2d 41 01 00 00 00 00 00	if r1 > r4 goto +0x1 <LBB324_22>
   11354	b7 09 00 00 c0 00 00 00	r9 = 0xc0

00000000000162d8 <LBB324_22>
   11355	bf 91 00 00 00 00 00 00	r1 = r9
   11356	57 01 00 00 fc 00 00 00	r1 &= 0xfc
   11357	b7 02 00 00 00 00 00 00	r2 = 0x0
   11358	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   11359	15 01 d6 ff 00 00 00 00	if r1 == 0x0 goto -0x2a <LBB324_26>
   11360	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
   11361	67 02 00 00 03 00 00 00	r2 <<= 0x3
   11362	bf 31 00 00 00 00 00 00	r1 = r3
   11363	0f 21 00 00 00 00 00 00	r1 += r2
   11364	b7 02 00 00 00 00 00 00	r2 = 0x0
   11365	bf 35 00 00 00 00 00 00	r5 = r3
   11366	05 00 ac ff 00 00 00 00	goto -0x54 <LBB324_24>

0000000000016338 <LBB324_16>
   11367	b7 00 00 00 00 00 00 00	r0 = 0x0
   11368	15 02 2b 00 00 00 00 00	if r2 == 0x0 goto +0x2b <LBB324_33>

0000000000016348 <LBB324_17>
   11369	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
   11370	67 04 00 00 38 00 00 00	r4 <<= 0x38
   11371	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
   11372	b7 03 00 00 01 00 00 00	r3 = 0x1
   11373	65 04 01 00 bf ff ff ff	if r4 s> -0x41 goto +0x1 <LBB324_19>
   11374	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000016378 <LBB324_19>
   11375	0f 30 00 00 00 00 00 00	r0 += r3
   11376	07 01 00 00 01 00 00 00	r1 += 0x1
   11377	07 02 00 00 ff ff ff ff	r2 += -0x1
   11378	15 02 21 00 00 00 00 00	if r2 == 0x0 goto +0x21 <LBB324_33>
   11379	05 00 f5 ff 00 00 00 00	goto -0xb <LBB324_17>

00000000000163a0 <LBB324_30>
   11380	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   11381	0f 13 00 00 00 00 00 00	r3 += r1
   11382	b7 05 00 00 00 00 00 00	r5 = 0x0
   11383	57 04 00 00 03 00 00 00	r4 &= 0x3
   11384	67 04 00 00 03 00 00 00	r4 <<= 0x3
   11385	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll

00000000000163d8 <LBB324_31>
   11387	79 30 00 00 00 00 00 00	r0 = *(u64 *)(r3 + 0x0)
   11388	bf 06 00 00 00 00 00 00	r6 = r0
   11389	77 06 00 00 06 00 00 00	r6 >>= 0x6
   11390	a7 00 00 00 ff ff ff ff	r0 ^= -0x1
   11391	77 00 00 00 07 00 00 00	r0 >>= 0x7
   11392	4f 60 00 00 00 00 00 00	r0 |= r6
   11393	5f 10 00 00 00 00 00 00	r0 &= r1
   11394	0f 50 00 00 00 00 00 00	r0 += r5
   11395	07 03 00 00 08 00 00 00	r3 += 0x8
   11396	07 04 00 00 f8 ff ff ff	r4 += -0x8
   11397	bf 05 00 00 00 00 00 00	r5 = r0
   11398	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB324_32>
   11399	05 00 f3 ff 00 00 00 00	goto -0xd <LBB324_31>

0000000000016440 <LBB324_32>
   11400	18 01 00 00 ff 00 ff 00 00 00 00 00 ff 00 ff 00	r1 = 0xff00ff00ff00ff ll
   11402	bf 03 00 00 00 00 00 00	r3 = r0
   11403	5f 13 00 00 00 00 00 00	r3 &= r1
   11404	77 00 00 00 08 00 00 00	r0 >>= 0x8
   11405	5f 10 00 00 00 00 00 00	r0 &= r1
   11406	0f 30 00 00 00 00 00 00	r0 += r3
   11407	18 01 00 00 01 00 01 00 00 00 00 00 01 00 01 00	r1 = 0x1000100010001 ll
   11409	2f 10 00 00 00 00 00 00	r0 *= r1
   11410	77 00 00 00 30 00 00 00	r0 >>= 0x30
   11411	0f 20 00 00 00 00 00 00	r0 += r2

00000000000164a0 <LBB324_33>
   11412	95 00 00 00 00 00 00 00	exit

00000000000164a8 <<core::str::error::Utf8Error as core::fmt::Display>::fmt>
   11413	71 13 08 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x8)
   11414	15 03 19 00 00 00 00 00	if r3 == 0x0 goto +0x19 <LBB326_2>
   11415	71 13 09 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x9)
   11416	73 3a af ff 00 00 00 00	*(u8 *)(r10 - 0x51) = r3
   11417	18 03 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r3 = 0x17ec8 ll
   11419	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
   11420	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   11421	18 01 00 00 10 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17e10 ll
   11423	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   11424	bf a1 00 00 00 00 00 00	r1 = r10
   11425	07 01 00 00 af ff ff ff	r1 += -0x51
   11426	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   11427	79 24 28 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x28)
   11428	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
   11429	b7 02 00 00 00 00 00 00	r2 = 0x0
   11430	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
   11431	bf a2 00 00 00 00 00 00	r2 = r10
   11432	07 02 00 00 b0 ff ff ff	r2 += -0x50
   11433	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
   11434	b7 02 00 00 02 00 00 00	r2 = 0x2
   11435	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
   11436	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
   11437	18 02 00 00 40 a4 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a440 ll
   11439	05 00 10 00 00 00 00 00	goto +0x10 <LBB326_3>

0000000000016580 <LBB326_2>
   11440	18 03 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r3 = 0x17ec8 ll
   11442	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
   11443	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   11444	79 24 28 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x28)
   11445	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
   11446	b7 02 00 00 00 00 00 00	r2 = 0x0
   11447	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
   11448	bf a2 00 00 00 00 00 00	r2 = r10
   11449	07 02 00 00 b0 ff ff ff	r2 += -0x50
   11450	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
   11451	b7 02 00 00 01 00 00 00	r2 = 0x1
   11452	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
   11453	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
   11454	18 02 00 00 60 a4 01 00 00 00 00 00 00 00 00 00	r2 = 0x1a460 ll

0000000000016600 <LBB326_3>
   11456	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
   11457	bf a3 00 00 00 00 00 00	r3 = r10
   11458	07 03 00 00 d0 ff ff ff	r3 += -0x30
   11459	bf 42 00 00 00 00 00 00	r2 = r4
   11460	85 10 00 00 14 fa ff ff	call -0x5ec ; <core::fmt::write>
   11461	95 00 00 00 00 00 00 00	exit

0000000000016630 <core::str::slice_error_fail>
   11462	85 10 00 00 01 00 00 00	call 0x1 ; <core::str::slice_error_fail_rt>
   11463	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000016640 <core::str::slice_error_fail_rt>
   11464	bf 30 00 00 00 00 00 00	r0 = r3
   11465	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
   11466	7b 0a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r0
   11467	b7 03 00 00 01 01 00 00	r3 = 0x101
   11468	2d 23 1e 00 00 00 00 00	if r3 > r2 goto +0x1e <LBB347_5>
   11469	b7 06 00 00 00 01 00 00	r6 = 0x100
   11470	71 13 00 01 00 00 00 00	r3 = *(u8 *)(r1 + 0x100)
   11471	67 03 00 00 38 00 00 00	r3 <<= 0x38
   11472	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
   11473	65 03 0f 00 bf ff ff ff	if r3 s> -0x41 goto +0xf <LBB347_7>
   11474	b7 06 00 00 ff 00 00 00	r6 = 0xff
   11475	71 13 ff 00 00 00 00 00	r3 = *(u8 *)(r1 + 0xff)
   11476	67 03 00 00 38 00 00 00	r3 <<= 0x38
   11477	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
   11478	65 03 0a 00 bf ff ff ff	if r3 s> -0x41 goto +0xa <LBB347_7>
   11479	b7 06 00 00 fe 00 00 00	r6 = 0xfe
   11480	71 13 fe 00 00 00 00 00	r3 = *(u8 *)(r1 + 0xfe)
   11481	67 03 00 00 38 00 00 00	r3 <<= 0x38
   11482	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
   11483	65 03 05 00 bf ff ff ff	if r3 s> -0x41 goto +0x5 <LBB347_7>
   11484	b7 06 00 00 fd 00 00 00	r6 = 0xfd
   11485	71 13 fd 00 00 00 00 00	r3 = *(u8 *)(r1 + 0xfd)
   11486	67 03 00 00 38 00 00 00	r3 <<= 0x38
   11487	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
   11488	65 03 00 00 bf ff ff ff	if r3 s> -0x41 goto +0x0 <LBB347_7>

0000000000016708 <LBB347_7>
   11489	bf 13 00 00 00 00 00 00	r3 = r1
   11490	0f 63 00 00 00 00 00 00	r3 += r6
   11491	71 33 00 00 00 00 00 00	r3 = *(u8 *)(r3 + 0x0)
   11492	67 03 00 00 38 00 00 00	r3 <<= 0x38
   11493	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
   11494	65 03 2b 00 bf ff ff ff	if r3 s> -0x41 goto +0x2b <LBB347_9>
   11495	b7 03 00 00 00 00 00 00	r3 = 0x0
   11496	bf 64 00 00 00 00 00 00	r4 = r6
   11497	85 10 00 00 dc ff ff ff	call -0x24 ; <core::str::slice_error_fail>
   11498	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000016758 <LBB347_5>
   11499	7b 2a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r2
   11500	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
   11501	b7 03 00 00 00 00 00 00	r3 = 0x0
   11502	7b 3a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r3
   11503	18 03 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r3 = 0x19090 ll
   11505	7b 3a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r3
   11506	2d 20 01 00 00 00 00 00	if r0 > r2 goto +0x1 <LBB347_12>
   11507	05 00 26 00 00 00 00 00	goto +0x26 <LBB347_10>

00000000000167a0 <LBB347_12>
   11508	2d 20 01 00 00 00 00 00	if r0 > r2 goto +0x1 <LBB347_14>
   11509	bf 40 00 00 00 00 00 00	r0 = r4

00000000000167b0 <LBB347_14>
   11510	7b 0a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r0
   11511	b7 01 00 00 00 00 00 00	r1 = 0x0
   11512	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
   11513	18 01 00 00 90 a5 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a590 ll
   11515	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
   11516	b7 01 00 00 03 00 00 00	r1 = 0x3
   11517	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
   11518	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
   11519	bf a1 00 00 00 00 00 00	r1 = r10
   11520	07 01 00 00 b0 ff ff ff	r1 += -0x50
   11521	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
   11522	bf a1 00 00 00 00 00 00	r1 = r10
   11523	07 01 00 00 50 ff ff ff	r1 += -0xb0
   11524	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   11525	18 01 00 00 60 7f 01 00 00 00 00 00 00 00 00 00	r1 = 0x17f60 ll
   11527	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
   11528	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   11529	bf a1 00 00 00 00 00 00	r1 = r10
   11530	07 01 00 00 40 ff ff ff	r1 += -0xc0
   11531	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   11532	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
   11534	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   11535	bf a1 00 00 00 00 00 00	r1 = r10
   11536	07 01 00 00 70 ff ff ff	r1 += -0x90
   11537	05 00 ca 00 00 00 00 00	goto +0xca <LBB347_15>

0000000000016890 <LBB347_9>
   11538	7b 6a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r6
   11539	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
   11540	b7 03 00 00 05 00 00 00	r3 = 0x5
   11541	7b 3a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r3
   11542	18 03 00 00 bf 93 01 00 00 00 00 00 00 00 00 00	r3 = 0x193bf ll
   11544	7b 3a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r3
   11545	2d 20 da ff 00 00 00 00	if r0 > r2 goto -0x26 <LBB347_12>

00000000000168d0 <LBB347_10>
   11546	2d 24 d9 ff 00 00 00 00	if r4 > r2 goto -0x27 <LBB347_12>
   11547	2d 40 01 00 00 00 00 00	if r0 > r4 goto +0x1 <LBB347_42>
   11548	05 00 1f 00 00 00 00 00	goto +0x1f <LBB347_16>

00000000000168e8 <LBB347_42>
   11549	b7 01 00 00 00 00 00 00	r1 = 0x0
   11550	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
   11551	18 01 00 00 50 a5 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a550 ll
   11553	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
   11554	b7 01 00 00 04 00 00 00	r1 = 0x4
   11555	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
   11556	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
   11557	bf a1 00 00 00 00 00 00	r1 = r10
   11558	07 01 00 00 b0 ff ff ff	r1 += -0x50
   11559	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
   11560	bf a1 00 00 00 00 00 00	r1 = r10
   11561	07 01 00 00 50 ff ff ff	r1 += -0xb0
   11562	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   11563	18 01 00 00 60 7f 01 00 00 00 00 00 00 00 00 00	r1 = 0x17f60 ll
   11565	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
   11566	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
   11567	bf a1 00 00 00 00 00 00	r1 = r10
   11568	07 01 00 00 40 ff ff ff	r1 += -0xc0
   11569	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   11570	bf a1 00 00 00 00 00 00	r1 = r10
   11571	07 01 00 00 38 ff ff ff	r1 += -0xc8
   11572	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   11573	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
   11575	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   11576	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   11577	bf a1 00 00 00 00 00 00	r1 = r10
   11578	07 01 00 00 30 ff ff ff	r1 += -0xd0
   11579	05 00 a0 00 00 00 00 00	goto +0xa0 <LBB347_15>

00000000000169e0 <LBB347_16>
   11580	15 00 0a 00 00 00 00 00	if r0 == 0x0 goto +0xa <LBB347_20>
   11581	2d 02 02 00 00 00 00 00	if r2 > r0 goto +0x2 <LBB347_19>
   11582	1d 20 08 00 00 00 00 00	if r0 == r2 goto +0x8 <LBB347_20>
   11583	05 00 08 00 00 00 00 00	goto +0x8 <LBB347_21>

0000000000016a00 <LBB347_19>
   11584	bf 13 00 00 00 00 00 00	r3 = r1
   11585	0f 03 00 00 00 00 00 00	r3 += r0
   11586	71 33 00 00 00 00 00 00	r3 = *(u8 *)(r3 + 0x0)
   11587	67 03 00 00 38 00 00 00	r3 <<= 0x38
   11588	c7 03 00 00 38 00 00 00	r3 s>>= 0x38
   11589	b7 06 00 00 c0 ff ff ff	r6 = -0x40
   11590	6d 36 01 00 00 00 00 00	if r6 s> r3 goto +0x1 <LBB347_21>

0000000000016a38 <LBB347_20>
   11591	bf 40 00 00 00 00 00 00	r0 = r4

0000000000016a40 <LBB347_21>
   11592	7b 0a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r0
   11593	bf 23 00 00 00 00 00 00	r3 = r2
   11594	3d 20 21 00 00 00 00 00	if r0 >= r2 goto +0x21 <LBB347_32>
   11595	bf 03 00 00 00 00 00 00	r3 = r0
   11596	07 03 00 00 fd ff ff ff	r3 += -0x3
   11597	b7 04 00 00 00 00 00 00	r4 = 0x0
   11598	b7 06 00 00 01 00 00 00	r6 = 0x1
   11599	2d 03 01 00 00 00 00 00	if r3 > r0 goto +0x1 <LBB347_24>
   11600	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000016a88 <LBB347_24>
   11601	55 06 01 00 00 00 00 00	if r6 != 0x0 goto +0x1 <LBB347_26>
   11602	bf 34 00 00 00 00 00 00	r4 = r3

0000000000016a98 <LBB347_26>
   11603	bf 06 00 00 00 00 00 00	r6 = r0
   11604	07 06 00 00 01 00 00 00	r6 += 0x1
   11605	3d 46 06 00 00 00 00 00	if r6 >= r4 goto +0x6 <LBB347_28>
   11606	bf 41 00 00 00 00 00 00	r1 = r4
   11607	bf 62 00 00 00 00 00 00	r2 = r6
   11608	18 03 00 00 c0 a5 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a5c0 ll
   11610	85 10 00 00 75 fd ff ff	call -0x28b ; <core::slice::index::slice_index_order_fail>
   11611	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000016ae0 <LBB347_28>
   11612	bf 17 00 00 00 00 00 00	r7 = r1
   11613	0f 47 00 00 00 00 00 00	r7 += r4
   11614	bf 13 00 00 00 00 00 00	r3 = r1
   11615	0f 63 00 00 00 00 00 00	r3 += r6
   11616	1f 73 00 00 00 00 00 00	r3 -= r7
   11617	bf 16 00 00 00 00 00 00	r6 = r1
   11618	0f 06 00 00 00 00 00 00	r6 += r0
   11619	b7 00 00 00 c0 ff ff ff	r0 = -0x40

0000000000016b20 <LBB347_29>
   11620	15 03 06 00 00 00 00 00	if r3 == 0x0 goto +0x6 <LBB347_31>
   11621	07 03 00 00 ff ff ff ff	r3 += -0x1
   11622	71 67 00 00 00 00 00 00	r7 = *(u8 *)(r6 + 0x0)
   11623	07 06 00 00 ff ff ff ff	r6 += -0x1
   11624	67 07 00 00 38 00 00 00	r7 <<= 0x38
   11625	c7 07 00 00 38 00 00 00	r7 s>>= 0x38
   11626	6d 70 f9 ff 00 00 00 00	if r0 s> r7 goto -0x7 <LBB347_29>

0000000000016b58 <LBB347_31>
   11627	0f 43 00 00 00 00 00 00	r3 += r4

0000000000016b60 <LBB347_32>
   11628	bf 24 00 00 00 00 00 00	r4 = r2
   11629	15 03 05 00 00 00 00 00	if r3 == 0x0 goto +0x5 <LBB347_37>
   11630	2d 32 2d 00 00 00 00 00	if r2 > r3 goto +0x2d <LBB347_35>
   11631	bf 24 00 00 00 00 00 00	r4 = r2
   11632	1f 34 00 00 00 00 00 00	r4 -= r3
   11633	1d 32 01 00 00 00 00 00	if r2 == r3 goto +0x1 <LBB347_37>
   11634	05 00 31 00 00 00 00 00	goto +0x31 <LBB347_36>

0000000000016b98 <LBB347_37>
   11635	15 04 22 00 00 00 00 00	if r4 == 0x0 goto +0x22 <LBB347_43>
   11636	0f 31 00 00 00 00 00 00	r1 += r3
   11637	71 10 00 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x0)
   11638	bf 02 00 00 00 00 00 00	r2 = r0
   11639	67 02 00 00 38 00 00 00	r2 <<= 0x38
   11640	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
   11641	65 02 2d 00 ff ff ff ff	if r2 s> -0x1 goto +0x2d <LBB347_44>
   11642	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
   11643	57 02 00 00 3f 00 00 00	r2 &= 0x3f
   11644	bf 04 00 00 00 00 00 00	r4 = r0
   11645	57 04 00 00 1f 00 00 00	r4 &= 0x1f
   11646	bf 46 00 00 00 00 00 00	r6 = r4
   11647	67 06 00 00 06 00 00 00	r6 <<= 0x6
   11648	4f 26 00 00 00 00 00 00	r6 |= r2
   11649	25 00 01 00 df 00 00 00	if r0 > 0xdf goto +0x1 <LBB347_40>
   11650	05 00 25 00 00 00 00 00	goto +0x25 <LBB347_45>

0000000000016c18 <LBB347_40>
   11651	67 02 00 00 06 00 00 00	r2 <<= 0x6
   11652	71 16 02 00 00 00 00 00	r6 = *(u8 *)(r1 + 0x2)
   11653	57 06 00 00 3f 00 00 00	r6 &= 0x3f
   11654	4f 62 00 00 00 00 00 00	r2 |= r6
   11655	bf 47 00 00 00 00 00 00	r7 = r4
   11656	67 07 00 00 0c 00 00 00	r7 <<= 0xc
   11657	bf 26 00 00 00 00 00 00	r6 = r2
   11658	4f 76 00 00 00 00 00 00	r6 |= r7
   11659	b7 07 00 00 f0 00 00 00	r7 = 0xf0
   11660	2d 07 1b 00 00 00 00 00	if r7 > r0 goto +0x1b <LBB347_45>
   11661	67 02 00 00 06 00 00 00	r2 <<= 0x6
   11662	71 11 03 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x3)
   11663	57 01 00 00 3f 00 00 00	r1 &= 0x3f
   11664	4f 12 00 00 00 00 00 00	r2 |= r1
   11665	67 04 00 00 12 00 00 00	r4 <<= 0x12
   11666	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
   11667	4f 42 00 00 00 00 00 00	r2 |= r4
   11668	bf 26 00 00 00 00 00 00	r6 = r2
   11669	05 00 12 00 00 00 00 00	goto +0x12 <LBB347_45>

0000000000016cb0 <LBB347_43>
   11670	18 01 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r1 = 0x19090 ll
   11672	b7 02 00 00 2b 00 00 00	r2 = 0x2b
   11673	bf 53 00 00 00 00 00 00	r3 = r5
   11674	85 10 00 00 76 f6 ff ff	call -0x98a ; <core::panicking::panic>
   11675	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000016ce0 <LBB347_35>
   11676	bf 24 00 00 00 00 00 00	r4 = r2
   11677	1f 34 00 00 00 00 00 00	r4 -= r3
   11678	bf 10 00 00 00 00 00 00	r0 = r1
   11679	0f 30 00 00 00 00 00 00	r0 += r3
   11680	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
   11681	67 00 00 00 38 00 00 00	r0 <<= 0x38
   11682	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
   11683	65 00 cf ff bf ff ff ff	if r0 s> -0x41 goto -0x31 <LBB347_37>

0000000000016d20 <LBB347_36>
   11684	bf 24 00 00 00 00 00 00	r4 = r2
   11685	85 10 00 00 20 ff ff ff	call -0xe0 ; <core::str::slice_error_fail>
   11686	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000016d38 <LBB347_44>
   11687	bf 06 00 00 00 00 00 00	r6 = r0

0000000000016d40 <LBB347_45>
   11688	b7 01 00 00 01 00 00 00	r1 = 0x1
   11689	63 6a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r6
   11690	b7 02 00 00 80 00 00 00	r2 = 0x80
   11691	2d 62 07 00 00 00 00 00	if r2 > r6 goto +0x7 <LBB347_49>
   11692	b7 01 00 00 02 00 00 00	r1 = 0x2
   11693	b7 02 00 00 00 08 00 00	r2 = 0x800
   11694	2d 62 04 00 00 00 00 00	if r2 > r6 goto +0x4 <LBB347_49>
   11695	b7 01 00 00 03 00 00 00	r1 = 0x3
   11696	b7 02 00 00 00 00 01 00	r2 = 0x10000
   11697	2d 62 01 00 00 00 00 00	if r2 > r6 goto +0x1 <LBB347_49>
   11698	b7 01 00 00 04 00 00 00	r1 = 0x4

0000000000016d98 <LBB347_49>
   11699	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
   11700	0f 31 00 00 00 00 00 00	r1 += r3
   11701	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
   11702	b7 01 00 00 00 00 00 00	r1 = 0x0
   11703	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
   11704	18 01 00 00 00 a5 01 00 00 00 00 00 00 00 00 00	r1 = 0x1a500 ll
   11706	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
   11707	b7 01 00 00 05 00 00 00	r1 = 0x5
   11708	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
   11709	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
   11710	bf a1 00 00 00 00 00 00	r1 = r10
   11711	07 01 00 00 b0 ff ff ff	r1 += -0x50
   11712	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
   11713	bf a1 00 00 00 00 00 00	r1 = r10
   11714	07 01 00 00 50 ff ff ff	r1 += -0xb0
   11715	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   11716	18 01 00 00 60 7f 01 00 00 00 00 00 00 00 00 00	r1 = 0x17f60 ll
   11718	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   11719	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
   11720	bf a1 00 00 00 00 00 00	r1 = r10
   11721	07 01 00 00 40 ff ff ff	r1 += -0xc0
   11722	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
   11723	18 01 00 00 78 14 01 00 00 00 00 00 00 00 00 00	r1 = 0x11478 ll
   11725	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
   11726	bf a1 00 00 00 00 00 00	r1 = r10
   11727	07 01 00 00 70 ff ff ff	r1 += -0x90
   11728	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
   11729	18 01 00 00 68 52 01 00 00 00 00 00 00 00 00 00	r1 = 0x15268 ll
   11731	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
   11732	bf a1 00 00 00 00 00 00	r1 = r10
   11733	07 01 00 00 6c ff ff ff	r1 += -0x94
   11734	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
   11735	18 01 00 00 c8 7e 01 00 00 00 00 00 00 00 00 00	r1 = 0x17ec8 ll
   11737	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
   11738	bf a1 00 00 00 00 00 00	r1 = r10
   11739	07 01 00 00 60 ff ff ff	r1 += -0xa0

0000000000016ee0 <LBB347_15>
   11740	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
   11741	bf a1 00 00 00 00 00 00	r1 = r10
   11742	07 01 00 00 80 ff ff ff	r1 += -0x80
   11743	bf 52 00 00 00 00 00 00	r2 = r5
   11744	85 10 00 00 22 f6 ff ff	call -0x9de ; <core::panicking::panic_fmt>
   11745	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000016f10 <core::unicode::printable::check>
   11746	bf 19 00 00 00 00 00 00	r9 = r1
   11747	79 51 10 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff0)
   11748	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   11749	79 56 08 f0 00 00 00 00	r6 = *(u64 *)(r5 - 0xff8)
   11750	15 03 29 00 00 00 00 00	if r3 == 0x0 goto +0x29 <LBB365_3>
   11751	67 03 00 00 01 00 00 00	r3 <<= 0x1
   11752	bf 21 00 00 00 00 00 00	r1 = r2
   11753	0f 31 00 00 00 00 00 00	r1 += r3
   11754	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   11755	79 58 00 f0 00 00 00 00	r8 = *(u64 *)(r5 - 0x1000)
   11756	bf 93 00 00 00 00 00 00	r3 = r9
   11757	57 03 00 00 00 ff 00 00	r3 &= 0xff00
   11758	77 03 00 00 08 00 00 00	r3 >>= 0x8
   11759	b7 00 00 00 00 00 00 00	r0 = 0x0
   11760	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
   11761	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
   11762	05 00 04 00 00 00 00 00	goto +0x4 <LBB365_2>

0000000000016f98 <LBB365_6>
   11763	2d 31 1c 00 00 00 00 00	if r1 > r3 goto +0x1c <LBB365_3>
   11764	bf 50 00 00 00 00 00 00	r0 = r5
   11765	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   11766	1d 12 19 00 00 00 00 00	if r2 == r1 goto +0x19 <LBB365_3>

0000000000016fb8 <LBB365_2>
   11767	71 27 01 00 00 00 00 00	r7 = *(u8 *)(r2 + 0x1)
   11768	bf 05 00 00 00 00 00 00	r5 = r0
   11769	0f 75 00 00 00 00 00 00	r5 += r7
   11770	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
   11771	07 02 00 00 02 00 00 00	r2 += 0x2
   11772	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB365_8>
   11773	05 00 f5 ff 00 00 00 00	goto -0xb <LBB365_6>

0000000000016ff0 <LBB365_8>
   11774	2d 50 37 00 00 00 00 00	if r0 > r5 goto +0x37 <LBB365_10>
   11775	2d 85 3c 00 00 00 00 00	if r5 > r8 goto +0x3c <LBB365_11>
   11776	0f 04 00 00 00 00 00 00	r4 += r0

0000000000017008 <LBB365_21>
   11777	15 07 08 00 00 00 00 00	if r7 == 0x0 goto +0x8 <LBB365_12>
   11778	b7 00 00 00 00 00 00 00	r0 = 0x0
   11779	07 07 00 00 ff ff ff ff	r7 += -0x1
   11780	bf 91 00 00 00 00 00 00	r1 = r9
   11781	57 01 00 00 ff 00 00 00	r1 &= 0xff
   11782	71 48 00 00 00 00 00 00	r8 = *(u8 *)(r4 + 0x0)
   11783	07 04 00 00 01 00 00 00	r4 += 0x1
   11784	1d 18 24 00 00 00 00 00	if r8 == r1 goto +0x24 <LBB365_19>
   11785	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB365_21>

0000000000017050 <LBB365_12>
   11786	bf 50 00 00 00 00 00 00	r0 = r5
   11787	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
   11788	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
   11789	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
   11790	1d 12 01 00 00 00 00 00	if r2 == r1 goto +0x1 <LBB365_3>
   11791	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB365_2>

0000000000017080 <LBB365_3>
   11792	b7 00 00 00 01 00 00 00	r0 = 0x1
   11793	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
   11794	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB365_19>
   11795	bf 62 00 00 00 00 00 00	r2 = r6
   11796	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
   11797	0f 12 00 00 00 00 00 00	r2 += r1
   11798	57 09 00 00 ff ff 00 00	r9 &= 0xffff
   11799	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000170c0 <LBB365_5>
   11800	bf 65 00 00 00 00 00 00	r5 = r6
   11801	07 05 00 00 01 00 00 00	r5 += 0x1
   11802	71 64 00 00 00 00 00 00	r4 = *(u8 *)(r6 + 0x0)
   11803	bf 47 00 00 00 00 00 00	r7 = r4
   11804	67 07 00 00 38 00 00 00	r7 <<= 0x38
   11805	c7 07 00 00 38 00 00 00	r7 s>>= 0x38
   11806	6d 73 02 00 00 00 00 00	if r3 s> r7 goto +0x2 <LBB365_13>
   11807	bf 56 00 00 00 00 00 00	r6 = r5
   11808	05 00 06 00 00 00 00 00	goto +0x6 <LBB365_15>

0000000000017108 <LBB365_13>
   11809	1d 25 0d 00 00 00 00 00	if r5 == r2 goto +0xd <LBB365_16>
   11810	57 04 00 00 7f 00 00 00	r4 &= 0x7f
   11811	67 04 00 00 08 00 00 00	r4 <<= 0x8
   11812	71 65 01 00 00 00 00 00	r5 = *(u8 *)(r6 + 0x1)
   11813	4f 54 00 00 00 00 00 00	r4 |= r5
   11814	07 06 00 00 02 00 00 00	r6 += 0x2

0000000000017138 <LBB365_15>
   11815	1f 49 00 00 00 00 00 00	r9 -= r4
   11816	67 09 00 00 20 00 00 00	r9 <<= 0x20
   11817	c7 09 00 00 20 00 00 00	r9 s>>= 0x20
   11818	6d 93 02 00 00 00 00 00	if r3 s> r9 goto +0x2 <LBB365_19>
   11819	a7 00 00 00 01 00 00 00	r0 ^= 0x1
   11820	5d 26 eb ff 00 00 00 00	if r6 != r2 goto -0x15 <LBB365_5>

0000000000017168 <LBB365_19>
   11821	57 00 00 00 01 00 00 00	r0 &= 0x1
   11822	95 00 00 00 00 00 00 00	exit

0000000000017178 <LBB365_16>
   11823	18 01 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r1 = 0x19090 ll
   11825	b7 02 00 00 2b 00 00 00	r2 = 0x2b
   11826	18 03 00 00 d8 a5 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a5d8 ll
   11828	85 10 00 00 dc f5 ff ff	call -0xa24 ; <core::panicking::panic>
   11829	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000171b0 <LBB365_10>
   11830	bf 01 00 00 00 00 00 00	r1 = r0
   11831	bf 52 00 00 00 00 00 00	r2 = r5
   11832	18 03 00 00 f0 a5 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a5f0 ll
   11834	85 10 00 00 95 fc ff ff	call -0x36b ; <core::slice::index::slice_index_order_fail>
   11835	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000171e0 <LBB365_11>
   11836	bf 51 00 00 00 00 00 00	r1 = r5
   11837	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
   11838	18 03 00 00 f0 a5 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a5f0 ll
   11840	85 10 00 00 73 fc ff ff	call -0x38d ; <core::slice::index::slice_end_index_len_fail>
   11841	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000017210 <core::unicode::printable::is_printable>
   11842	b7 00 00 00 00 00 00 00	r0 = 0x0
   11843	bf 12 00 00 00 00 00 00	r2 = r1
   11844	67 02 00 00 20 00 00 00	r2 <<= 0x20
   11845	77 02 00 00 20 00 00 00	r2 >>= 0x20
   11846	b7 03 00 00 20 00 00 00	r3 = 0x20
   11847	2d 23 27 00 00 00 00 00	if r3 > r2 goto +0x27 <LBB366_7>
   11848	b7 00 00 00 01 00 00 00	r0 = 0x1
   11849	b7 03 00 00 7f 00 00 00	r3 = 0x7f
   11850	2d 23 24 00 00 00 00 00	if r3 > r2 goto +0x24 <LBB366_7>
   11851	bf 12 00 00 00 00 00 00	r2 = r1
   11852	67 02 00 00 20 00 00 00	r2 <<= 0x20
   11853	77 02 00 00 20 00 00 00	r2 >>= 0x20
   11854	b7 03 00 00 00 00 01 00	r3 = 0x10000
   11855	2d 23 11 00 00 00 00 00	if r3 > r2 goto +0x11 <LBB366_5>
   11856	b7 03 00 00 00 00 02 00	r3 = 0x20000
   11857	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB366_4>
   11858	05 00 1d 00 00 00 00 00	goto +0x1d <LBB366_8>

0000000000017298 <LBB366_4>
   11859	18 02 00 00 7b 95 01 00 00 00 00 00 00 00 00 00	r2 = 0x1957b ll
   11861	7b 2a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r2
   11862	b7 02 00 00 c2 01 00 00	r2 = 0x1c2
   11863	7b 2a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r2
   11864	b7 02 00 00 c4 00 00 00	r2 = 0xc4
   11865	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
   11866	bf a5 00 00 00 00 00 00	r5 = r10
   11867	18 02 00 00 5f 94 01 00 00 00 00 00 00 00 00 00	r2 = 0x1945f ll
   11869	b7 03 00 00 2c 00 00 00	r3 = 0x2c
   11870	18 04 00 00 b7 94 01 00 00 00 00 00 00 00 00 00	r4 = 0x194b7 ll
   11872	05 00 0d 00 00 00 00 00	goto +0xd <LBB366_6>

0000000000017308 <LBB366_5>
   11873	18 02 00 00 ac 98 01 00 00 00 00 00 00 00 00 00	r2 = 0x198ac ll
   11875	7b 2a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r2
   11876	b7 02 00 00 2f 01 00 00	r2 = 0x12f
   11877	7b 2a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r2
   11878	b7 02 00 00 1f 01 00 00	r2 = 0x11f
   11879	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
   11880	bf a5 00 00 00 00 00 00	r5 = r10
   11881	18 02 00 00 3d 97 01 00 00 00 00 00 00 00 00 00	r2 = 0x1973d ll
   11883	b7 03 00 00 28 00 00 00	r3 = 0x28
   11884	18 04 00 00 8d 97 01 00 00 00 00 00 00 00 00 00	r4 = 0x1978d ll

0000000000017370 <LBB366_6>
   11886	85 10 00 00 73 ff ff ff	call -0x8d ; <core::unicode::printable::check>

0000000000017378 <LBB366_7>
   11887	95 00 00 00 00 00 00 00	exit

0000000000017380 <LBB366_8>
   11888	bf 14 00 00 00 00 00 00	r4 = r1
   11889	07 04 00 00 c6 48 fd ff	r4 += -0x2b73a
   11890	67 04 00 00 20 00 00 00	r4 <<= 0x20
   11891	77 04 00 00 20 00 00 00	r4 >>= 0x20
   11892	b7 03 00 00 01 00 00 00	r3 = 0x1
   11893	b7 05 00 00 06 00 00 00	r5 = 0x6
   11894	b7 02 00 00 01 00 00 00	r2 = 0x1
   11895	2d 45 01 00 00 00 00 00	if r5 > r4 goto +0x1 <LBB366_10>
   11896	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000173c8 <LBB366_10>
   11897	bf 15 00 00 00 00 00 00	r5 = r1
   11898	07 05 00 00 5e 31 fd ff	r5 += -0x2cea2
   11899	67 05 00 00 20 00 00 00	r5 <<= 0x20
   11900	77 05 00 00 20 00 00 00	r5 >>= 0x20
   11901	b7 00 00 00 0e 00 00 00	r0 = 0xe
   11902	b7 04 00 00 01 00 00 00	r4 = 0x1
   11903	2d 50 01 00 00 00 00 00	if r0 > r5 goto +0x1 <LBB366_12>
   11904	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000017408 <LBB366_12>
   11905	bf 10 00 00 00 00 00 00	r0 = r1
   11906	07 00 00 00 e2 05 fd ff	r0 += -0x2fa1e
   11907	67 00 00 00 20 00 00 00	r0 <<= 0x20
   11908	77 00 00 00 20 00 00 00	r0 >>= 0x20
   11909	b7 06 00 00 e2 05 00 00	r6 = 0x5e2
   11910	b7 05 00 00 01 00 00 00	r5 = 0x1
   11911	2d 06 01 00 00 00 00 00	if r6 > r0 goto +0x1 <LBB366_14>
   11912	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000017448 <LBB366_14>
   11913	bf 10 00 00 00 00 00 00	r0 = r1
   11914	07 00 00 00 1f 14 fd ff	r0 += -0x2ebe1
   11915	67 00 00 00 20 00 00 00	r0 <<= 0x20
   11916	77 00 00 00 20 00 00 00	r0 >>= 0x20
   11917	b7 06 00 00 1f 0c 00 00	r6 = 0xc1f
   11918	2d 06 01 00 00 00 00 00	if r6 > r0 goto +0x1 <LBB366_16>
   11919	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000017480 <LBB366_16>
   11920	67 03 00 00 02 00 00 00	r3 <<= 0x2
   11921	67 05 00 00 03 00 00 00	r5 <<= 0x3
   11922	4f 35 00 00 00 00 00 00	r5 |= r3
   11923	67 04 00 00 01 00 00 00	r4 <<= 0x1
   11924	4f 42 00 00 00 00 00 00	r2 |= r4
   11925	4f 52 00 00 00 00 00 00	r2 |= r5
   11926	b7 00 00 00 00 00 00 00	r0 = 0x0
   11927	55 02 d7 ff 00 00 00 00	if r2 != 0x0 goto -0x29 <LBB366_7>
   11928	bf 12 00 00 00 00 00 00	r2 = r1
   11929	07 02 00 00 b5 ec fc ff	r2 += -0x3134b
   11930	67 02 00 00 20 00 00 00	r2 <<= 0x20
   11931	77 02 00 00 20 00 00 00	r2 >>= 0x20
   11932	b7 03 00 00 05 00 00 00	r3 = 0x5
   11933	2d 23 d1 ff 00 00 00 00	if r3 > r2 goto -0x2f <LBB366_7>
   11934	bf 12 00 00 00 00 00 00	r2 = r1
   11935	07 02 00 00 50 dc fc ff	r2 += -0x323b0
   11936	67 02 00 00 20 00 00 00	r2 <<= 0x20
   11937	77 02 00 00 20 00 00 00	r2 >>= 0x20
   11938	b7 03 00 00 50 dd 0a 00	r3 = 0xadd50
   11939	2d 23 cb ff 00 00 00 00	if r3 > r2 goto -0x35 <LBB366_7>
   11940	bf 12 00 00 00 00 00 00	r2 = r1
   11941	57 02 00 00 e0 ff ff ff	r2 &= -0x20
   11942	67 02 00 00 20 00 00 00	r2 <<= 0x20
   11943	77 02 00 00 20 00 00 00	r2 >>= 0x20
   11944	15 02 c6 ff e0 a6 02 00	if r2 == 0x2a6e0 goto -0x3a <LBB366_7>
   11945	bf 12 00 00 00 00 00 00	r2 = r1
   11946	57 02 00 00 fe ff ff ff	r2 &= -0x2
   11947	67 02 00 00 20 00 00 00	r2 <<= 0x20
   11948	77 02 00 00 20 00 00 00	r2 >>= 0x20
   11949	15 02 c1 ff 1e b8 02 00	if r2 == 0x2b81e goto -0x3f <LBB366_7>
   11950	b7 00 00 00 01 00 00 00	r0 = 0x1
   11951	07 01 00 00 10 fe f1 ff	r1 += -0xe01f0
   11952	67 01 00 00 20 00 00 00	r1 <<= 0x20
   11953	77 01 00 00 20 00 00 00	r1 >>= 0x20
   11954	25 01 bc ff 0f fe 02 00	if r1 > 0x2fe0f goto -0x44 <LBB366_7>
   11955	b7 00 00 00 00 00 00 00	r0 = 0x0
   11956	05 00 ba ff 00 00 00 00	goto -0x46 <LBB366_7>

00000000000175a8 <core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt>
   11957	b7 03 00 00 00 00 00 00	r3 = 0x0
   11958	61 15 00 00 00 00 00 00	r5 = *(u32 *)(r1 + 0x0)
   11959	b7 01 00 00 0a 00 00 00	r1 = 0xa
   11960	b7 04 00 00 10 00 00 00	r4 = 0x10
   11961	05 00 0c 00 00 00 00 00	goto +0xc <LBB594_1>

00000000000175d0 <LBB594_5>
   11962	0f 60 00 00 00 00 00 00	r0 += r6
   11963	bf a6 00 00 00 00 00 00	r6 = r10
   11964	07 06 00 00 80 ff ff ff	r6 += -0x80
   11965	0f 36 00 00 00 00 00 00	r6 += r3
   11966	73 06 7f 00 00 00 00 00	*(u8 *)(r6 + 0x7f) = r0
   11967	07 03 00 00 ff ff ff ff	r3 += -0x1
   11968	67 05 00 00 20 00 00 00	r5 <<= 0x20
   11969	bf 50 00 00 00 00 00 00	r0 = r5
   11970	77 00 00 00 20 00 00 00	r0 >>= 0x20
   11971	bf 05 00 00 00 00 00 00	r5 = r0
   11972	77 05 00 00 04 00 00 00	r5 >>= 0x4
   11973	2d 04 06 00 00 00 00 00	if r4 > r0 goto +0x6 <LBB594_2>

0000000000017630 <LBB594_1>
   11974	bf 56 00 00 00 00 00 00	r6 = r5
   11975	57 06 00 00 0f 00 00 00	r6 &= 0xf
   11976	b7 00 00 00 30 00 00 00	r0 = 0x30
   11977	2d 61 f0 ff 00 00 00 00	if r1 > r6 goto -0x10 <LBB594_5>
   11978	b7 00 00 00 57 00 00 00	r0 = 0x57
   11979	05 00 ee ff 00 00 00 00	goto -0x12 <LBB594_5>

0000000000017660 <LBB594_2>
   11980	bf 31 00 00 00 00 00 00	r1 = r3
   11981	07 01 00 00 80 00 00 00	r1 += 0x80
   11982	b7 04 00 00 81 00 00 00	r4 = 0x81
   11983	2d 14 05 00 00 00 00 00	if r4 > r1 goto +0x5 <LBB594_6>
   11984	b7 02 00 00 80 00 00 00	r2 = 0x80
   11985	18 03 00 00 68 a3 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a368 ll
   11987	85 10 00 00 c4 fb ff ff	call -0x43c ; <core::slice::index::slice_start_index_len_fail>
   11988	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000176a8 <LBB594_6>
   11989	bf 31 00 00 00 00 00 00	r1 = r3
   11990	87 01 00 00 00 00 00 00	r1 = -r1
   11991	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
   11992	bf a1 00 00 00 00 00 00	r1 = r10
   11993	07 01 00 00 80 ff ff ff	r1 += -0x80
   11994	0f 31 00 00 00 00 00 00	r1 += r3
   11995	07 01 00 00 80 00 00 00	r1 += 0x80
   11996	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
   11997	bf a5 00 00 00 00 00 00	r5 = r10
   11998	bf 21 00 00 00 00 00 00	r1 = r2
   11999	b7 02 00 00 01 00 00 00	r2 = 0x1
   12000	18 03 00 00 25 91 01 00 00 00 00 00 00 00 00 00	r3 = 0x19125 ll
   12002	b7 04 00 00 02 00 00 00	r4 = 0x2
   12003	85 10 00 00 7e f8 ff ff	call -0x782 ; <core::fmt::Formatter::pad_integral>
   12004	95 00 00 00 00 00 00 00	exit

0000000000017728 <core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt>
   12005	b7 03 00 00 00 00 00 00	r3 = 0x0
   12006	61 15 00 00 00 00 00 00	r5 = *(u32 *)(r1 + 0x0)
   12007	b7 01 00 00 0a 00 00 00	r1 = 0xa
   12008	b7 04 00 00 10 00 00 00	r4 = 0x10
   12009	05 00 0c 00 00 00 00 00	goto +0xc <LBB595_1>

0000000000017750 <LBB595_5>
   12010	0f 60 00 00 00 00 00 00	r0 += r6
   12011	bf a6 00 00 00 00 00 00	r6 = r10
   12012	07 06 00 00 80 ff ff ff	r6 += -0x80
   12013	0f 36 00 00 00 00 00 00	r6 += r3
   12014	73 06 7f 00 00 00 00 00	*(u8 *)(r6 + 0x7f) = r0
   12015	07 03 00 00 ff ff ff ff	r3 += -0x1
   12016	67 05 00 00 20 00 00 00	r5 <<= 0x20
   12017	bf 50 00 00 00 00 00 00	r0 = r5
   12018	77 00 00 00 20 00 00 00	r0 >>= 0x20
   12019	bf 05 00 00 00 00 00 00	r5 = r0
   12020	77 05 00 00 04 00 00 00	r5 >>= 0x4
   12021	2d 04 06 00 00 00 00 00	if r4 > r0 goto +0x6 <LBB595_2>

00000000000177b0 <LBB595_1>
   12022	bf 56 00 00 00 00 00 00	r6 = r5
   12023	57 06 00 00 0f 00 00 00	r6 &= 0xf
   12024	b7 00 00 00 30 00 00 00	r0 = 0x30
   12025	2d 61 f0 ff 00 00 00 00	if r1 > r6 goto -0x10 <LBB595_5>
   12026	b7 00 00 00 37 00 00 00	r0 = 0x37
   12027	05 00 ee ff 00 00 00 00	goto -0x12 <LBB595_5>

00000000000177e0 <LBB595_2>
   12028	bf 31 00 00 00 00 00 00	r1 = r3
   12029	07 01 00 00 80 00 00 00	r1 += 0x80
   12030	b7 04 00 00 81 00 00 00	r4 = 0x81
   12031	2d 14 05 00 00 00 00 00	if r4 > r1 goto +0x5 <LBB595_6>
   12032	b7 02 00 00 80 00 00 00	r2 = 0x80
   12033	18 03 00 00 68 a3 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a368 ll
   12035	85 10 00 00 94 fb ff ff	call -0x46c ; <core::slice::index::slice_start_index_len_fail>
   12036	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000017828 <LBB595_6>
   12037	bf 31 00 00 00 00 00 00	r1 = r3
   12038	87 01 00 00 00 00 00 00	r1 = -r1
   12039	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
   12040	bf a1 00 00 00 00 00 00	r1 = r10
   12041	07 01 00 00 80 ff ff ff	r1 += -0x80
   12042	0f 31 00 00 00 00 00 00	r1 += r3
   12043	07 01 00 00 80 00 00 00	r1 += 0x80
   12044	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
   12045	bf a5 00 00 00 00 00 00	r5 = r10
   12046	bf 21 00 00 00 00 00 00	r1 = r2
   12047	b7 02 00 00 01 00 00 00	r2 = 0x1
   12048	18 03 00 00 25 91 01 00 00 00 00 00 00 00 00 00	r3 = 0x19125 ll
   12050	b7 04 00 00 02 00 00 00	r4 = 0x2
   12051	85 10 00 00 4e f8 ff ff	call -0x7b2 ; <core::fmt::Formatter::pad_integral>
   12052	95 00 00 00 00 00 00 00	exit

00000000000178a8 <core::fmt::num::<impl core::fmt::Debug for u64>::fmt>
   12053	bf 23 00 00 00 00 00 00	r3 = r2
   12054	61 32 34 00 00 00 00 00	r2 = *(u32 *)(r3 + 0x34)
   12055	bf 24 00 00 00 00 00 00	r4 = r2
   12056	57 04 00 00 10 00 00 00	r4 &= 0x10
   12057	55 04 07 00 00 00 00 00	if r4 != 0x0 goto +0x7 <LBB611_4>
   12058	57 02 00 00 20 00 00 00	r2 &= 0x20
   12059	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB611_8>
   12060	05 00 19 00 00 00 00 00	goto +0x19 <LBB611_11>

00000000000178e8 <LBB611_8>
   12061	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
   12062	b7 02 00 00 01 00 00 00	r2 = 0x1
   12063	85 10 00 00 49 00 00 00	call 0x49 ; <core::fmt::num::imp::fmt_u64>
   12064	05 00 47 00 00 00 00 00	goto +0x47 <LBB611_16>

0000000000017908 <LBB611_4>
   12065	b7 02 00 00 00 00 00 00	r2 = 0x0
   12066	79 10 00 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x0)
   12067	b7 01 00 00 0a 00 00 00	r1 = 0xa
   12068	b7 04 00 00 10 00 00 00	r4 = 0x10
   12069	05 00 09 00 00 00 00 00	goto +0x9 <LBB611_5>

0000000000017930 <LBB611_7>
   12070	0f 60 00 00 00 00 00 00	r0 += r6
   12071	bf a6 00 00 00 00 00 00	r6 = r10
   12072	07 06 00 00 80 ff ff ff	r6 += -0x80
   12073	0f 26 00 00 00 00 00 00	r6 += r2
   12074	73 06 7f 00 00 00 00 00	*(u8 *)(r6 + 0x7f) = r0
   12075	07 02 00 00 ff ff ff ff	r2 += -0x1
   12076	bf 50 00 00 00 00 00 00	r0 = r5
   12077	77 00 00 00 04 00 00 00	r0 >>= 0x4
   12078	2d 54 21 00 00 00 00 00	if r4 > r5 goto +0x21 <LBB611_2>

0000000000017978 <LBB611_5>
   12079	bf 05 00 00 00 00 00 00	r5 = r0
   12080	bf 56 00 00 00 00 00 00	r6 = r5
   12081	57 06 00 00 0f 00 00 00	r6 &= 0xf
   12082	b7 00 00 00 30 00 00 00	r0 = 0x30
   12083	2d 61 f2 ff 00 00 00 00	if r1 > r6 goto -0xe <LBB611_7>
   12084	b7 00 00 00 57 00 00 00	r0 = 0x57
   12085	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB611_7>

00000000000179b0 <LBB611_11>
   12086	b7 02 00 00 00 00 00 00	r2 = 0x0
   12087	79 10 00 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x0)
   12088	b7 01 00 00 0a 00 00 00	r1 = 0xa
   12089	b7 04 00 00 10 00 00 00	r4 = 0x10
   12090	05 00 09 00 00 00 00 00	goto +0x9 <LBB611_12>

00000000000179d8 <LBB611_14>
   12091	0f 60 00 00 00 00 00 00	r0 += r6
   12092	bf a6 00 00 00 00 00 00	r6 = r10
   12093	07 06 00 00 80 ff ff ff	r6 += -0x80
   12094	0f 26 00 00 00 00 00 00	r6 += r2
   12095	73 06 7f 00 00 00 00 00	*(u8 *)(r6 + 0x7f) = r0
   12096	07 02 00 00 ff ff ff ff	r2 += -0x1
   12097	bf 50 00 00 00 00 00 00	r0 = r5
   12098	77 00 00 00 04 00 00 00	r0 >>= 0x4
   12099	2d 54 07 00 00 00 00 00	if r4 > r5 goto +0x7 <LBB611_9>

0000000000017a20 <LBB611_12>
   12100	bf 05 00 00 00 00 00 00	r5 = r0
   12101	bf 56 00 00 00 00 00 00	r6 = r5
   12102	57 06 00 00 0f 00 00 00	r6 &= 0xf
   12103	b7 00 00 00 30 00 00 00	r0 = 0x30
   12104	2d 61 f2 ff 00 00 00 00	if r1 > r6 goto -0xe <LBB611_14>
   12105	b7 00 00 00 37 00 00 00	r0 = 0x37
   12106	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB611_14>

0000000000017a58 <LBB611_9>
   12107	bf 21 00 00 00 00 00 00	r1 = r2
   12108	07 01 00 00 80 00 00 00	r1 += 0x80
   12109	b7 04 00 00 81 00 00 00	r4 = 0x81
   12110	2d 14 0a 00 00 00 00 00	if r4 > r1 goto +0xa <LBB611_15>
   12111	05 00 04 00 00 00 00 00	goto +0x4 <LBB611_3>

0000000000017a80 <LBB611_2>
   12112	bf 21 00 00 00 00 00 00	r1 = r2
   12113	07 01 00 00 80 00 00 00	r1 += 0x80
   12114	b7 04 00 00 81 00 00 00	r4 = 0x81
   12115	2d 14 05 00 00 00 00 00	if r4 > r1 goto +0x5 <LBB611_15>

0000000000017aa0 <LBB611_3>
   12116	b7 02 00 00 80 00 00 00	r2 = 0x80
   12117	18 03 00 00 68 a3 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a368 ll
   12119	85 10 00 00 40 fb ff ff	call -0x4c0 ; <core::slice::index::slice_start_index_len_fail>
   12120	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000017ac8 <LBB611_15>
   12121	bf 21 00 00 00 00 00 00	r1 = r2
   12122	87 01 00 00 00 00 00 00	r1 = -r1
   12123	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
   12124	bf a1 00 00 00 00 00 00	r1 = r10
   12125	07 01 00 00 80 ff ff ff	r1 += -0x80
   12126	0f 21 00 00 00 00 00 00	r1 += r2
   12127	07 01 00 00 80 00 00 00	r1 += 0x80
   12128	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
   12129	bf a5 00 00 00 00 00 00	r5 = r10
   12130	bf 31 00 00 00 00 00 00	r1 = r3
   12131	b7 02 00 00 01 00 00 00	r2 = 0x1
   12132	18 03 00 00 25 91 01 00 00 00 00 00 00 00 00 00	r3 = 0x19125 ll
   12134	b7 04 00 00 02 00 00 00	r4 = 0x2
   12135	85 10 00 00 fa f7 ff ff	call -0x806 ; <core::fmt::Formatter::pad_integral>

0000000000017b40 <LBB611_16>
   12136	95 00 00 00 00 00 00 00	exit

0000000000017b48 <core::fmt::num::imp::fmt_u64>
   12137	b7 04 00 00 27 00 00 00	r4 = 0x27
   12138	b7 05 00 00 10 27 00 00	r5 = 0x2710
   12139	2d 15 20 00 00 00 00 00	if r5 > r1 goto +0x20 <LBB612_4>
   12140	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000017b68 <LBB612_2>
   12141	bf 15 00 00 00 00 00 00	r5 = r1
   12142	37 01 00 00 10 27 00 00	r1 /= 0x2710
   12143	bf 16 00 00 00 00 00 00	r6 = r1
   12144	27 06 00 00 10 27 00 00	r6 *= 0x2710
   12145	bf 50 00 00 00 00 00 00	r0 = r5
   12146	1f 60 00 00 00 00 00 00	r0 -= r6
   12147	bf 06 00 00 00 00 00 00	r6 = r0
   12148	57 06 00 00 ff ff 00 00	r6 &= 0xffff
   12149	37 06 00 00 64 00 00 00	r6 /= 0x64
   12150	bf 67 00 00 00 00 00 00	r7 = r6
   12151	27 07 00 00 64 00 00 00	r7 *= 0x64
   12152	1f 70 00 00 00 00 00 00	r0 -= r7
   12153	bf a7 00 00 00 00 00 00	r7 = r10
   12154	07 07 00 00 d9 ff ff ff	r7 += -0x27
   12155	0f 47 00 00 00 00 00 00	r7 += r4
   12156	67 06 00 00 01 00 00 00	r6 <<= 0x1
   12157	18 08 00 00 27 91 01 00 00 00 00 00 00 00 00 00	r8 = 0x19127 ll
   12159	0f 68 00 00 00 00 00 00	r8 += r6
   12160	69 86 00 00 00 00 00 00	r6 = *(u16 *)(r8 + 0x0)
   12161	6b 67 23 00 00 00 00 00	*(u16 *)(r7 + 0x23) = r6
   12162	67 00 00 00 01 00 00 00	r0 <<= 0x1
   12163	57 00 00 00 fe ff 00 00	r0 &= 0xfffe
   12164	18 06 00 00 27 91 01 00 00 00 00 00 00 00 00 00	r6 = 0x19127 ll
   12166	0f 06 00 00 00 00 00 00	r6 += r0
   12167	69 60 00 00 00 00 00 00	r0 = *(u16 *)(r6 + 0x0)
   12168	6b 07 25 00 00 00 00 00	*(u16 *)(r7 + 0x25) = r0
   12169	07 04 00 00 fc ff ff ff	r4 += -0x4
   12170	25 05 e2 ff ff e0 f5 05	if r5 > 0x5f5e0ff goto -0x1e <LBB612_2>
   12171	07 04 00 00 27 00 00 00	r4 += 0x27

0000000000017c60 <LBB612_4>
   12172	25 01 0a 00 63 00 00 00	if r1 > 0x63 goto +0xa <LBB612_6>

0000000000017c68 <LBB612_5>
   12173	b7 05 00 00 0a 00 00 00	r5 = 0xa
   12174	2d 15 01 00 00 00 00 00	if r5 > r1 goto +0x1 <LBB612_8>
   12175	05 00 1a 00 00 00 00 00	goto +0x1a <LBB612_7>

0000000000017c80 <LBB612_8>
   12176	07 04 00 00 ff ff ff ff	r4 += -0x1
   12177	bf a5 00 00 00 00 00 00	r5 = r10
   12178	07 05 00 00 d9 ff ff ff	r5 += -0x27
   12179	0f 45 00 00 00 00 00 00	r5 += r4
   12180	07 01 00 00 30 00 00 00	r1 += 0x30
   12181	73 15 00 00 00 00 00 00	*(u8 *)(r5 + 0x0) = r1
   12182	05 00 1d 00 00 00 00 00	goto +0x1d <LBB612_9>

0000000000017cb8 <LBB612_6>
   12183	bf 15 00 00 00 00 00 00	r5 = r1
   12184	57 05 00 00 ff ff 00 00	r5 &= 0xffff
   12185	37 05 00 00 64 00 00 00	r5 /= 0x64
   12186	bf 50 00 00 00 00 00 00	r0 = r5
   12187	27 00 00 00 64 00 00 00	r0 *= 0x64
   12188	1f 01 00 00 00 00 00 00	r1 -= r0
   12189	67 01 00 00 01 00 00 00	r1 <<= 0x1
   12190	57 01 00 00 fe ff 00 00	r1 &= 0xfffe
   12191	18 00 00 00 27 91 01 00 00 00 00 00 00 00 00 00	r0 = 0x19127 ll
   12193	0f 10 00 00 00 00 00 00	r0 += r1
   12194	07 04 00 00 fe ff ff ff	r4 += -0x2
   12195	bf a1 00 00 00 00 00 00	r1 = r10
   12196	07 01 00 00 d9 ff ff ff	r1 += -0x27
   12197	0f 41 00 00 00 00 00 00	r1 += r4
   12198	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
   12199	6b 01 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r0
   12200	bf 51 00 00 00 00 00 00	r1 = r5
   12201	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB612_5>

0000000000017d50 <LBB612_7>
   12202	67 01 00 00 01 00 00 00	r1 <<= 0x1
   12203	18 05 00 00 27 91 01 00 00 00 00 00 00 00 00 00	r5 = 0x19127 ll
   12205	0f 15 00 00 00 00 00 00	r5 += r1
   12206	07 04 00 00 fe ff ff ff	r4 += -0x2
   12207	bf a1 00 00 00 00 00 00	r1 = r10
   12208	07 01 00 00 d9 ff ff ff	r1 += -0x27
   12209	0f 41 00 00 00 00 00 00	r1 += r4
   12210	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
   12211	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5

0000000000017da0 <LBB612_9>
   12212	bf a1 00 00 00 00 00 00	r1 = r10
   12213	07 01 00 00 d9 ff ff ff	r1 += -0x27
   12214	0f 41 00 00 00 00 00 00	r1 += r4
   12215	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
   12216	b7 01 00 00 27 00 00 00	r1 = 0x27
   12217	1f 41 00 00 00 00 00 00	r1 -= r4
   12218	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
   12219	bf a5 00 00 00 00 00 00	r5 = r10
   12220	bf 31 00 00 00 00 00 00	r1 = r3
   12221	18 03 00 00 90 90 01 00 00 00 00 00 00 00 00 00	r3 = 0x19090 ll
   12223	b7 04 00 00 00 00 00 00	r4 = 0x0
   12224	85 10 00 00 a1 f7 ff ff	call -0x85f ; <core::fmt::Formatter::pad_integral>
   12225	95 00 00 00 00 00 00 00	exit

0000000000017e10 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
   12226	bf 23 00 00 00 00 00 00	r3 = r2
   12227	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
   12228	b7 02 00 00 01 00 00 00	r2 = 0x1
   12229	85 10 00 00 a3 ff ff ff	call -0x5d ; <core::fmt::num::imp::fmt_u64>
   12230	95 00 00 00 00 00 00 00	exit

0000000000017e38 <core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt>
   12231	bf 23 00 00 00 00 00 00	r3 = r2
   12232	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
   12233	67 02 00 00 20 00 00 00	r2 <<= 0x20
   12234	c7 02 00 00 20 00 00 00	r2 s>>= 0x20
   12235	bf 24 00 00 00 00 00 00	r4 = r2
   12236	c7 04 00 00 3f 00 00 00	r4 s>>= 0x3f
   12237	bf 21 00 00 00 00 00 00	r1 = r2
   12238	af 41 00 00 00 00 00 00	r1 ^= r4
   12239	1f 41 00 00 00 00 00 00	r1 -= r4
   12240	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
   12241	77 02 00 00 3f 00 00 00	r2 >>= 0x3f
   12242	85 10 00 00 96 ff ff ff	call -0x6a ; <core::fmt::num::imp::fmt_u64>
   12243	95 00 00 00 00 00 00 00	exit

0000000000017ea0 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
   12244	bf 23 00 00 00 00 00 00	r3 = r2
   12245	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
   12246	b7 02 00 00 01 00 00 00	r2 = 0x1
   12247	85 10 00 00 91 ff ff ff	call -0x6f ; <core::fmt::num::imp::fmt_u64>
   12248	95 00 00 00 00 00 00 00	exit

0000000000017ec8 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
   12249	bf 23 00 00 00 00 00 00	r3 = r2
   12250	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
   12251	b7 02 00 00 01 00 00 00	r2 = 0x1
   12252	85 10 00 00 8c ff ff ff	call -0x74 ; <core::fmt::num::imp::fmt_u64>
   12253	95 00 00 00 00 00 00 00	exit

0000000000017ef0 <<core::fmt::Error as core::fmt::Debug>::fmt>
   12254	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
   12255	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
   12256	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
   12257	18 02 00 00 1d 9a 01 00 00 00 00 00 00 00 00 00	r2 = 0x19a1d ll
   12259	b7 03 00 00 05 00 00 00	r3 = 0x5
   12260	8d 00 00 00 04 00 00 00	callx r4
   12261	95 00 00 00 00 00 00 00	exit

0000000000017f30 <<&T as core::fmt::Debug>::fmt>
   12262	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
   12263	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
   12264	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
   12265	bf 31 00 00 00 00 00 00	r1 = r3
   12266	8d 00 00 00 04 00 00 00	callx r4
   12267	95 00 00 00 00 00 00 00	exit

0000000000017f60 <<&T as core::fmt::Display>::fmt>
   12268	bf 24 00 00 00 00 00 00	r4 = r2
   12269	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
   12270	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
   12271	bf 41 00 00 00 00 00 00	r1 = r4
   12272	85 10 00 00 4e f8 ff ff	call -0x7b2 ; <core::fmt::Formatter::pad>
   12273	95 00 00 00 00 00 00 00	exit

0000000000017f90 <core::unicode::unicode_data::grapheme_extend::lookup>
   12274	b7 02 00 00 00 00 00 00	r2 = 0x0
   12275	b7 03 00 00 21 00 00 00	r3 = 0x21
   12276	bf 14 00 00 00 00 00 00	r4 = r1
   12277	67 04 00 00 0b 00 00 00	r4 <<= 0xb
   12278	67 04 00 00 20 00 00 00	r4 <<= 0x20
   12279	77 04 00 00 20 00 00 00	r4 >>= 0x20
   12280	b7 05 00 00 21 00 00 00	r5 = 0x21
   12281	05 00 0a 00 00 00 00 00	goto +0xa <LBB767_1>

0000000000017fd0 <LBB767_5>
   12282	15 06 05 00 01 00 00 00	if r6 == 0x1 goto +0x5 <LBB767_8>
   12283	57 06 00 00 ff 00 00 00	r6 &= 0xff
   12284	55 06 19 00 ff 00 00 00	if r6 != 0xff goto +0x19 <LBB767_9>
   12285	bf 32 00 00 00 00 00 00	r2 = r3
   12286	07 02 00 00 01 00 00 00	r2 += 0x1
   12287	bf 53 00 00 00 00 00 00	r3 = r5

0000000000018000 <LBB767_8>
   12288	bf 35 00 00 00 00 00 00	r5 = r3
   12289	1f 23 00 00 00 00 00 00	r3 -= r2
   12290	2d 25 01 00 00 00 00 00	if r5 > r2 goto +0x1 <LBB767_1>
   12291	05 00 14 00 00 00 00 00	goto +0x14 <LBB767_10>

0000000000018020 <LBB767_1>
   12292	77 03 00 00 01 00 00 00	r3 >>= 0x1
   12293	0f 23 00 00 00 00 00 00	r3 += r2
   12294	bf 30 00 00 00 00 00 00	r0 = r3
   12295	67 00 00 00 02 00 00 00	r0 <<= 0x2
   12296	18 06 00 00 24 9a 01 00 00 00 00 00 00 00 00 00	r6 = 0x19a24 ll
   12298	0f 06 00 00 00 00 00 00	r6 += r0
   12299	61 60 00 00 00 00 00 00	r0 = *(u32 *)(r6 + 0x0)
   12300	67 00 00 00 0b 00 00 00	r0 <<= 0xb
   12301	67 00 00 00 20 00 00 00	r0 <<= 0x20
   12302	77 00 00 00 20 00 00 00	r0 >>= 0x20
   12303	b7 07 00 00 01 00 00 00	r7 = 0x1
   12304	5d 40 01 00 00 00 00 00	if r0 != r4 goto +0x1 <LBB767_3>
   12305	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000018090 <LBB767_3>
   12306	b7 06 00 00 ff ff ff ff	r6 = -0x1
   12307	2d 04 e6 ff 00 00 00 00	if r4 > r0 goto -0x1a <LBB767_5>
   12308	bf 76 00 00 00 00 00 00	r6 = r7
   12309	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB767_5>

00000000000180b0 <LBB767_9>
   12310	07 03 00 00 01 00 00 00	r3 += 0x1
   12311	bf 32 00 00 00 00 00 00	r2 = r3

00000000000180c0 <LBB767_10>
   12312	25 02 39 00 20 00 00 00	if r2 > 0x20 goto +0x39 <LBB767_12>
   12313	bf 27 00 00 00 00 00 00	r7 = r2
   12314	67 07 00 00 02 00 00 00	r7 <<= 0x2
   12315	18 04 00 00 24 9a 01 00 00 00 00 00 00 00 00 00	r4 = 0x19a24 ll
   12317	18 05 00 00 24 9a 01 00 00 00 00 00 00 00 00 00	r5 = 0x19a24 ll
   12319	0f 75 00 00 00 00 00 00	r5 += r7
   12320	b7 03 00 00 d7 02 00 00	r3 = 0x2d7
   12321	b7 06 00 00 1f 00 00 00	r6 = 0x1f
   12322	61 50 00 00 00 00 00 00	r0 = *(u32 *)(r5 + 0x0)
   12323	77 00 00 00 15 00 00 00	r0 >>= 0x15
   12324	15 02 07 00 20 00 00 00	if r2 == 0x20 goto +0x7 <LBB767_14>
   12325	0f 47 00 00 00 00 00 00	r7 += r4
   12326	b7 05 00 00 00 00 00 00	r5 = 0x0
   12327	bf 26 00 00 00 00 00 00	r6 = r2
   12328	07 06 00 00 ff ff ff ff	r6 += -0x1
   12329	61 73 04 00 00 00 00 00	r3 = *(u32 *)(r7 + 0x4)
   12330	77 03 00 00 15 00 00 00	r3 >>= 0x15
   12331	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB767_15>

0000000000018160 <LBB767_14>
   12332	67 06 00 00 02 00 00 00	r6 <<= 0x2
   12333	0f 64 00 00 00 00 00 00	r4 += r6
   12334	61 45 00 00 00 00 00 00	r5 = *(u32 *)(r4 + 0x0)
   12335	57 05 00 00 ff ff 1f 00	r5 &= 0x1fffff

0000000000018180 <LBB767_15>
   12336	bf 02 00 00 00 00 00 00	r2 = r0
   12337	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
   12338	0f 23 00 00 00 00 00 00	r3 += r2
   12339	15 03 16 00 00 00 00 00	if r3 == 0x0 goto +0x16 <LBB767_22>
   12340	1f 51 00 00 00 00 00 00	r1 -= r5
   12341	18 05 00 00 a8 9a 01 00 00 00 00 00 00 00 00 00	r5 = 0x19aa8 ll
   12343	0f 05 00 00 00 00 00 00	r5 += r0
   12344	b7 04 00 00 00 00 00 00	r4 = 0x0
   12345	67 01 00 00 20 00 00 00	r1 <<= 0x20
   12346	77 01 00 00 20 00 00 00	r1 >>= 0x20
   12347	b7 06 00 00 00 00 00 00	r6 = 0x0

00000000000181e0 <LBB767_17>
   12348	bf 02 00 00 00 00 00 00	r2 = r0
   12349	0f 42 00 00 00 00 00 00	r2 += r4
   12350	25 02 0d 00 d6 02 00 00	if r2 > 0x2d6 goto +0xd <LBB767_19>
   12351	bf 52 00 00 00 00 00 00	r2 = r5
   12352	0f 42 00 00 00 00 00 00	r2 += r4
   12353	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
   12354	0f 26 00 00 00 00 00 00	r6 += r2
   12355	bf 62 00 00 00 00 00 00	r2 = r6
   12356	67 02 00 00 20 00 00 00	r2 <<= 0x20
   12357	77 02 00 00 20 00 00 00	r2 >>= 0x20
   12358	2d 12 02 00 00 00 00 00	if r2 > r1 goto +0x2 <LBB767_21>
   12359	07 04 00 00 01 00 00 00	r4 += 0x1
   12360	2d 43 f3 ff 00 00 00 00	if r3 > r4 goto -0xd <LBB767_17>

0000000000018248 <LBB767_21>
   12361	0f 40 00 00 00 00 00 00	r0 += r4

0000000000018250 <LBB767_22>
   12362	57 00 00 00 01 00 00 00	r0 &= 0x1
   12363	95 00 00 00 00 00 00 00	exit

0000000000018260 <LBB767_19>
   12364	bf 21 00 00 00 00 00 00	r1 = r2
   12365	b7 02 00 00 d7 02 00 00	r2 = 0x2d7
   12366	18 03 00 00 20 a6 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a620 ll
   12368	85 10 00 00 d2 f3 ff ff	call -0xc2e ; <core::panicking::panic_bounds_check>
   12369	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000018290 <LBB767_12>
   12370	bf 21 00 00 00 00 00 00	r1 = r2
   12371	b7 02 00 00 21 00 00 00	r2 = 0x21
   12372	18 03 00 00 08 a6 01 00 00 00 00 00 00 00 00 00	r3 = 0x1a608 ll
   12374	85 10 00 00 cc f3 ff ff	call -0xc34 ; <core::panicking::panic_bounds_check>
   12375	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000182c0 <memcpy>
   12376	bf 16 00 00 00 00 00 00	r6 = r1
   12377	bf 34 00 00 00 00 00 00	r4 = r3
   12378	77 04 00 00 03 00 00 00	r4 >>= 0x3
   12379	bf 41 00 00 00 00 00 00	r1 = r4
   12380	27 01 00 00 f9 ff ff ff	r1 *= -0x7
   12381	0f 31 00 00 00 00 00 00	r1 += r3
   12382	25 01 18 00 0f 00 00 00	if r1 > 0xf goto +0x18 <LBB0_4>
   12383	b7 01 00 00 00 00 00 00	r1 = 0x0
   12384	b7 05 00 00 08 00 00 00	r5 = 0x8
   12385	2d 35 0a 00 00 00 00 00	if r5 > r3 goto +0xa <LBB0_5>
   12386	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000018318 <LBB0_3>
   12387	bf 60 00 00 00 00 00 00	r0 = r6
   12388	0f 10 00 00 00 00 00 00	r0 += r1
   12389	bf 27 00 00 00 00 00 00	r7 = r2
   12390	0f 17 00 00 00 00 00 00	r7 += r1
   12391	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
   12392	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
   12393	07 01 00 00 08 00 00 00	r1 += 0x8
   12394	07 05 00 00 01 00 00 00	r5 += 0x1
   12395	2d 54 f7 ff 00 00 00 00	if r4 > r5 goto -0x9 <LBB0_3>

0000000000018360 <LBB0_5>
   12396	7d 31 08 00 00 00 00 00	if r1 s>= r3 goto +0x8 <LBB0_7>

0000000000018368 <LBB0_6>
   12397	bf 64 00 00 00 00 00 00	r4 = r6
   12398	0f 14 00 00 00 00 00 00	r4 += r1
   12399	bf 25 00 00 00 00 00 00	r5 = r2
   12400	0f 15 00 00 00 00 00 00	r5 += r1
   12401	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
   12402	73 54 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r5
   12403	07 01 00 00 01 00 00 00	r1 += 0x1
   12404	6d 13 f8 ff 00 00 00 00	if r3 s> r1 goto -0x8 <LBB0_6>

00000000000183a8 <LBB0_7>
   12405	bf 60 00 00 00 00 00 00	r0 = r6
   12406	95 00 00 00 00 00 00 00	exit

00000000000183b8 <LBB0_4>
   12407	bf 61 00 00 00 00 00 00	r1 = r6
   12408	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcpy_
   12409	05 00 fb ff 00 00 00 00	goto -0x5 <LBB0_7>

00000000000183d0 <memmove>
   12410	bf 16 00 00 00 00 00 00	r6 = r1
   12411	bf 31 00 00 00 00 00 00	r1 = r3
   12412	77 01 00 00 03 00 00 00	r1 >>= 0x3
   12413	bf 14 00 00 00 00 00 00	r4 = r1
   12414	27 04 00 00 f9 ff ff ff	r4 *= -0x7
   12415	0f 34 00 00 00 00 00 00	r4 += r3
   12416	25 04 22 00 0f 00 00 00	if r4 > 0xf goto +0x22 <LBB1_5>
   12417	3d 62 24 00 00 00 00 00	if r2 >= r6 goto +0x24 <LBB1_6>
   12418	bf 34 00 00 00 00 00 00	r4 = r3
   12419	57 04 00 00 f8 ff ff ff	r4 &= -0x8
   12420	7d 34 0d 00 00 00 00 00	if r4 s>= r3 goto +0xd <LBB1_11>
   12421	bf 25 00 00 00 00 00 00	r5 = r2
   12422	07 05 00 00 ff ff ff ff	r5 += -0x1
   12423	bf 60 00 00 00 00 00 00	r0 = r6
   12424	07 00 00 00 ff ff ff ff	r0 += -0x1
   12425	bf 37 00 00 00 00 00 00	r7 = r3

0000000000018450 <LBB1_4>
   12426	bf 08 00 00 00 00 00 00	r8 = r0
   12427	0f 78 00 00 00 00 00 00	r8 += r7
   12428	bf 59 00 00 00 00 00 00	r9 = r5
   12429	0f 79 00 00 00 00 00 00	r9 += r7
   12430	71 99 00 00 00 00 00 00	r9 = *(u8 *)(r9 + 0x0)
   12431	73 98 00 00 00 00 00 00	*(u8 *)(r8 + 0x0) = r9
   12432	07 07 00 00 ff ff ff ff	r7 += -0x1
   12433	6d 47 f8 ff 00 00 00 00	if r7 s> r4 goto -0x8 <LBB1_4>

0000000000018490 <LBB1_11>
   12434	b7 04 00 00 08 00 00 00	r4 = 0x8
   12435	2d 34 0d 00 00 00 00 00	if r4 > r3 goto +0xd <LBB1_14>
   12436	bf 14 00 00 00 00 00 00	r4 = r1
   12437	67 04 00 00 03 00 00 00	r4 <<= 0x3
   12438	07 04 00 00 f8 ff ff ff	r4 += -0x8
   12439	0f 42 00 00 00 00 00 00	r2 += r4
   12440	bf 63 00 00 00 00 00 00	r3 = r6
   12441	0f 43 00 00 00 00 00 00	r3 += r4
   12442	07 01 00 00 01 00 00 00	r1 += 0x1

00000000000184d8 <LBB1_13>
   12443	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
   12444	7b 43 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r4
   12445	07 02 00 00 f8 ff ff ff	r2 += -0x8
   12446	07 03 00 00 f8 ff ff ff	r3 += -0x8
   12447	07 01 00 00 ff ff ff ff	r1 += -0x1
   12448	65 01 fa ff 01 00 00 00	if r1 s> 0x1 goto -0x6 <LBB1_13>

0000000000018508 <LBB1_14>
   12449	bf 60 00 00 00 00 00 00	r0 = r6
   12450	95 00 00 00 00 00 00 00	exit

0000000000018518 <LBB1_5>
   12451	bf 61 00 00 00 00 00 00	r1 = r6
   12452	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memmove_
   12453	05 00 fb ff 00 00 00 00	goto -0x5 <LBB1_14>

0000000000018530 <LBB1_6>
   12454	b7 04 00 00 00 00 00 00	r4 = 0x0
   12455	b7 05 00 00 08 00 00 00	r5 = 0x8
   12456	2d 35 0a 00 00 00 00 00	if r5 > r3 goto +0xa <LBB1_9>
   12457	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000018550 <LBB1_8>
   12458	bf 60 00 00 00 00 00 00	r0 = r6
   12459	0f 40 00 00 00 00 00 00	r0 += r4
   12460	bf 27 00 00 00 00 00 00	r7 = r2
   12461	0f 47 00 00 00 00 00 00	r7 += r4
   12462	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
   12463	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
   12464	07 04 00 00 08 00 00 00	r4 += 0x8
   12465	07 05 00 00 01 00 00 00	r5 += 0x1
   12466	2d 51 f7 ff 00 00 00 00	if r1 > r5 goto -0x9 <LBB1_8>

0000000000018598 <LBB1_9>
   12467	7d 34 ed ff 00 00 00 00	if r4 s>= r3 goto -0x13 <LBB1_14>

00000000000185a0 <LBB1_10>
   12468	bf 61 00 00 00 00 00 00	r1 = r6
   12469	0f 41 00 00 00 00 00 00	r1 += r4
   12470	bf 25 00 00 00 00 00 00	r5 = r2
   12471	0f 45 00 00 00 00 00 00	r5 += r4
   12472	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
   12473	73 51 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r5
   12474	07 04 00 00 01 00 00 00	r4 += 0x1
   12475	6d 43 f8 ff 00 00 00 00	if r3 s> r4 goto -0x8 <LBB1_10>
   12476	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB1_14>

00000000000185e8 <memset>
   12477	bf 16 00 00 00 00 00 00	r6 = r1
   12478	bf 34 00 00 00 00 00 00	r4 = r3
   12479	77 04 00 00 03 00 00 00	r4 >>= 0x3
   12480	bf 41 00 00 00 00 00 00	r1 = r4
   12481	27 01 00 00 f9 ff ff ff	r1 *= -0x7
   12482	0f 31 00 00 00 00 00 00	r1 += r3
   12483	25 01 17 00 0f 00 00 00	if r1 > 0xf goto +0x17 <LBB2_2>
   12484	b7 01 00 00 00 00 00 00	r1 = 0x0
   12485	b7 05 00 00 08 00 00 00	r5 = 0x8
   12486	2d 35 0d 00 00 00 00 00	if r5 > r3 goto +0xd <LBB2_4>
   12487	bf 25 00 00 00 00 00 00	r5 = r2
   12488	57 05 00 00 ff 00 00 00	r5 &= 0xff
   12489	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
   12491	2f 15 00 00 00 00 00 00	r5 *= r1
   12492	b7 01 00 00 00 00 00 00	r1 = 0x0
   12493	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000018670 <LBB2_7>
   12494	bf 67 00 00 00 00 00 00	r7 = r6
   12495	0f 17 00 00 00 00 00 00	r7 += r1
   12496	7b 57 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r5
   12497	07 01 00 00 08 00 00 00	r1 += 0x8
   12498	07 00 00 00 01 00 00 00	r0 += 0x1
   12499	2d 04 fa ff 00 00 00 00	if r4 > r0 goto -0x6 <LBB2_7>

00000000000186a0 <LBB2_4>
   12500	7d 31 09 00 00 00 00 00	if r1 s>= r3 goto +0x9 <LBB2_3>

00000000000186a8 <LBB2_5>
   12501	bf 64 00 00 00 00 00 00	r4 = r6
   12502	0f 14 00 00 00 00 00 00	r4 += r1
   12503	73 24 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r2
   12504	07 01 00 00 01 00 00 00	r1 += 0x1
   12505	6d 13 fb ff 00 00 00 00	if r3 s> r1 goto -0x5 <LBB2_5>
   12506	05 00 03 00 00 00 00 00	goto +0x3 <LBB2_3>

00000000000186d8 <LBB2_2>
   12507	57 02 00 00 ff 00 00 00	r2 &= 0xff
   12508	bf 61 00 00 00 00 00 00	r1 = r6
   12509	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memset_

00000000000186f0 <LBB2_3>
   12510	bf 60 00 00 00 00 00 00	r0 = r6
   12511	95 00 00 00 00 00 00 00	exit

0000000000018700 <memcmp>
   12512	bf 35 00 00 00 00 00 00	r5 = r3
   12513	77 05 00 00 03 00 00 00	r5 >>= 0x3
   12514	bf 54 00 00 00 00 00 00	r4 = r5
   12515	27 04 00 00 f9 ff ff ff	r4 *= -0x7
   12516	0f 34 00 00 00 00 00 00	r4 += r3
   12517	25 04 1a 00 0f 00 00 00	if r4 > 0xf goto +0x1a <LBB3_8>
   12518	b7 00 00 00 00 00 00 00	r0 = 0x0
   12519	b7 06 00 00 08 00 00 00	r6 = 0x8
   12520	b7 04 00 00 00 00 00 00	r4 = 0x0
   12521	2d 36 0a 00 00 00 00 00	if r6 > r3 goto +0xa <LBB3_6>
   12522	bf 16 00 00 00 00 00 00	r6 = r1
   12523	bf 27 00 00 00 00 00 00	r7 = r2

0000000000018760 <LBB3_3>
   12524	79 78 00 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x0)
   12525	79 69 00 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x0)
   12526	5d 89 04 00 00 00 00 00	if r9 != r8 goto +0x4 <LBB3_5>
   12527	07 06 00 00 08 00 00 00	r6 += 0x8
   12528	07 07 00 00 08 00 00 00	r7 += 0x8
   12529	07 04 00 00 01 00 00 00	r4 += 0x1
   12530	2d 45 f9 ff 00 00 00 00	if r5 > r4 goto -0x7 <LBB3_3>

0000000000018798 <LBB3_5>
   12531	67 04 00 00 03 00 00 00	r4 <<= 0x3

00000000000187a0 <LBB3_6>
   12532	7d 34 14 00 00 00 00 00	if r4 s>= r3 goto +0x14 <LBB3_9>

00000000000187a8 <LBB3_7>
   12533	bf 16 00 00 00 00 00 00	r6 = r1
   12534	0f 46 00 00 00 00 00 00	r6 += r4
   12535	bf 25 00 00 00 00 00 00	r5 = r2
   12536	0f 45 00 00 00 00 00 00	r5 += r4
   12537	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
   12538	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
   12539	1d 56 01 00 00 00 00 00	if r6 == r5 goto +0x1 <LBB3_4>
   12540	05 00 0a 00 00 00 00 00	goto +0xa <LBB3_10>

00000000000187e8 <LBB3_4>
   12541	07 04 00 00 01 00 00 00	r4 += 0x1
   12542	6d 43 f6 ff 00 00 00 00	if r3 s> r4 goto -0xa <LBB3_7>
   12543	05 00 09 00 00 00 00 00	goto +0x9 <LBB3_9>

0000000000018800 <LBB3_8>
   12544	b7 04 00 00 00 00 00 00	r4 = 0x0
   12545	63 4a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r4
   12546	bf a4 00 00 00 00 00 00	r4 = r10
   12547	07 04 00 00 fc ff ff ff	r4 += -0x4
   12548	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcmp_
   12549	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 0x4)
   12550	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_9>

0000000000018838 <LBB3_10>
   12551	1f 56 00 00 00 00 00 00	r6 -= r5
   12552	bf 60 00 00 00 00 00 00	r0 = r6

0000000000018848 <LBB3_9>
   12553	67 00 00 00 20 00 00 00	r0 <<= 0x20
   12554	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
   12555	95 00 00 00 00 00 00 00	exit

0000000000018860 <__multi3>
   12556	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
   12557	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
   12558	bf 21 00 00 00 00 00 00	r1 = r2
   12559	67 01 00 00 20 00 00 00	r1 <<= 0x20
   12560	77 01 00 00 20 00 00 00	r1 >>= 0x20
   12561	bf 47 00 00 00 00 00 00	r7 = r4
   12562	67 07 00 00 20 00 00 00	r7 <<= 0x20
   12563	77 07 00 00 20 00 00 00	r7 >>= 0x20
   12564	bf 40 00 00 00 00 00 00	r0 = r4
   12565	77 00 00 00 20 00 00 00	r0 >>= 0x20
   12566	bf 73 00 00 00 00 00 00	r3 = r7
   12567	2f 13 00 00 00 00 00 00	r3 *= r1
   12568	bf 08 00 00 00 00 00 00	r8 = r0
   12569	2f 18 00 00 00 00 00 00	r8 *= r1
   12570	bf 26 00 00 00 00 00 00	r6 = r2
   12571	77 06 00 00 20 00 00 00	r6 >>= 0x20
   12572	2f 67 00 00 00 00 00 00	r7 *= r6
   12573	bf 79 00 00 00 00 00 00	r9 = r7
   12574	0f 89 00 00 00 00 00 00	r9 += r8
   12575	b7 01 00 00 01 00 00 00	r1 = 0x1
   12576	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
   12577	b7 08 00 00 01 00 00 00	r8 = 0x1
   12578	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB0_2>
   12579	b7 08 00 00 00 00 00 00	r8 = 0x0

0000000000018920 <LBB0_2>
   12580	bf 91 00 00 00 00 00 00	r1 = r9
   12581	67 01 00 00 20 00 00 00	r1 <<= 0x20
   12582	bf 37 00 00 00 00 00 00	r7 = r3
   12583	0f 17 00 00 00 00 00 00	r7 += r1
   12584	2d 73 02 00 00 00 00 00	if r3 > r7 goto +0x2 <LBB0_4>
   12585	b7 01 00 00 00 00 00 00	r1 = 0x0
   12586	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1

0000000000018958 <LBB0_4>
   12587	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
   12588	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
   12589	77 09 00 00 20 00 00 00	r9 >>= 0x20
   12590	67 08 00 00 20 00 00 00	r8 <<= 0x20
   12591	4f 98 00 00 00 00 00 00	r8 |= r9
   12592	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
   12593	2f 34 00 00 00 00 00 00	r4 *= r3
   12594	2f 25 00 00 00 00 00 00	r5 *= r2
   12595	2f 60 00 00 00 00 00 00	r0 *= r6
   12596	0f 80 00 00 00 00 00 00	r0 += r8
   12597	0f 45 00 00 00 00 00 00	r5 += r4
   12598	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
   12599	0f 20 00 00 00 00 00 00	r0 += r2
   12600	0f 50 00 00 00 00 00 00	r0 += r5
   12601	7b 01 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r0
   12602	95 00 00 00 00 00 00 00	exit
